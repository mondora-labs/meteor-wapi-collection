{
  "reportTitle": "meteor-wapi-collection",
  "stats": {
    "suites": 17,
    "tests": 45,
    "passes": 45,
    "pending": 0,
    "failures": 0,
    "start": "2015-04-19T21:43:42.501Z",
    "end": "2015-04-19T21:43:42.581Z",
    "duration": 80,
    "testsRegistered": 45,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "The addValidationRules method",
        "suites": [],
        "tests": [
          {
            "title": "should add validation rules to the collection instance",
            "fullTitle": "The addValidationRules method should add validation rules to the collection instance",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [],\n        update: [],\n        remove: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> insert = sinon.spy();\n<span class=\"hljs-keyword\">var</span> update = sinon.spy();\n<span class=\"hljs-keyword\">var</span> remove = sinon.spy();\nCollection.prototype.addValidationRules.call(instance, {\n    insert: insert,\n    update: update,\n    remove: remove\n});\ninstance.validationRules.insert[<span class=\"hljs-number\">0</span>].should.equal(insert);\ninstance.validationRules.update[<span class=\"hljs-number\">0</span>].should.equal(update);\ninstance.validationRules.remove[<span class=\"hljs-number\">0</span>].should.equal(remove);",
            "isRoot": false,
            "uuid": "f28191a6-f7f4-427e-9cb2-af152b8c004e",
            "parentUUID": "265e0bc7-feff-4b91-8914-7c8b59f22fff",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/collection/addValidationRules.js",
        "uuid": "265e0bc7-feff-4b91-8914-7c8b59f22fff",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/collection/addValidationRules.js",
        "passes": [
          "[Circular ~.suites.suites.0.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      {
        "title": "The attachMethods method",
        "suites": [],
        "tests": [
          {
            "title": "should attach methods to the collection's mw instance",
            "fullTitle": "The attachMethods method should attach methods to the collection's mw instance",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    name: <span class=\"hljs-string\">\"elements\"</span>,\n    mw: {\n        methods: sinon.spy()\n    }\n};\nCollection.prototype.attachMethods.call(instance);\n<span class=\"hljs-keyword\">var</span> methods = instance.mw.methods.firstCall.args[<span class=\"hljs-number\">0</span>];\nR.keys(methods).should.eql([\n    <span class=\"hljs-string\">\"/elements/insert\"</span>,\n    <span class=\"hljs-string\">\"/elements/update\"</span>,\n    <span class=\"hljs-string\">\"/elements/remove\"</span>\n]);",
            "isRoot": false,
            "uuid": "6adfdba1-4c89-4675-b38e-bb845e50bc4a",
            "parentUUID": "6412f789-161a-47e7-a61d-d6f28d7daa1b",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/collection/attachMethods.js",
        "uuid": "6412f789-161a-47e7-a61d-d6f28d7daa1b",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/collection/attachMethods.js",
        "passes": [
          "[Circular ~.suites.suites.1.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "The runValidationRules method",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "The runValidationRules method should return a promise",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: []\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, {}, {})\n    .should.be.a.Promise;",
            "isRoot": false,
            "uuid": "26196dc4-ef1c-4949-b75c-c8abe1d22f94",
            "parentUUID": "c5264ca9-23e4-479b-b958-35ea12c0794b",
            "skipped": false
          },
          {
            "title": "should run all validation rules for the specified method",
            "fullTitle": "The runValidationRules method should run all validation rules for the specified method",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> rule_0 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> rule_1 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> rule_2 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [rule_0, rule_1, rule_2]\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, {}, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        rule_0.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        rule_1.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        rule_2.called.should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "4d4274b5-8af8-4cd8-80b6-f3ec3332017e",
            "parentUUID": "c5264ca9-23e4-479b-b958-35ea12c0794b",
            "skipped": false
          },
          {
            "title": "should call rules with the correct context and arguments",
            "fullTitle": "The runValidationRules method should call rules with the correct context and arguments",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> insertRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> updateRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> removeRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [insertRule],\n        update: [updateRule],\n        remove: [removeRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> context = {context: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> oldDocument = {oldDocument: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> newDocument = {newDocument: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> insertResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, newDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        insertRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        insertRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">1</span>);\n        insertRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(newDocument);\n    });\n<span class=\"hljs-keyword\">var</span> updateResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"update\"</span>, oldDocument, newDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        updateRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        updateRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">2</span>);\n        updateRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(oldDocument);\n        updateRule.firstCall.args[<span class=\"hljs-number\">1</span>].should.eql(newDocument);\n    });\n<span class=\"hljs-keyword\">var</span> removeResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"remove\"</span>, oldDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        removeRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        removeRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">1</span>);\n        removeRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(oldDocument);\n    });\n<span class=\"hljs-keyword\">return</span> BPromise.all([\n    insertResult,\n    updateResult,\n    removeResult\n]);",
            "isRoot": false,
            "uuid": "96ad9eab-d7ae-4e14-9a08-3bd84b550111",
            "parentUUID": "c5264ca9-23e4-479b-b958-35ea12c0794b",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/collection/runValidationRules.js",
        "uuid": "c5264ca9-23e4-479b-b958-35ea12c0794b",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/collection/runValidationRules.js",
        "passes": [
          "[Circular ~.suites.suites.2.tests.0]",
          "[Circular ~.suites.suites.2.tests.1]",
          "[Circular ~.suites.suites.2.tests.2]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 8
      },
      {
        "title": "The promise returned by the runValidationRules method",
        "suites": [],
        "tests": [
          {
            "title": "should be fulfilled if all validation rules return either a value or an eventually fulfilled promise",
            "fullTitle": "The promise returned by the runValidationRules method should be fulfilled if all validation rules return either a value or an eventually fulfilled promise",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> rule_0 = sinon.stub().returns(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">var</span> rule_1 = sinon.stub().returns(<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-keyword\">var</span> rule_2 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [rule_0, rule_1, rule_2]\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.fulfilled;",
            "isRoot": false,
            "uuid": "17362ecd-1a74-40d4-ad5d-7287f3c87299",
            "parentUUID": "5530ebcf-fad2-479d-8d43-f5a01896a552",
            "skipped": false
          },
          {
            "title": "should be rejected if any of the validation rules either throws or returns an eventually rejected promise",
            "fullTitle": "The promise returned by the runValidationRules method should be rejected if any of the validation rules either throws or returns an eventually rejected promise",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> goodRule = sinon.stub().returns(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">var</span> badRule = sinon.stub().throws(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>());\n<span class=\"hljs-keyword\">var</span> eventuallyBadRule = sinon.stub().returns(BPromise.reject());\n<span class=\"hljs-keyword\">var</span> instance_0 = {\n    validationRules: {\n        insert: [goodRule, badRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> rejection_0 = Collection.prototype.runValidationRules\n    .call(instance_0, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.rejected;\n<span class=\"hljs-keyword\">var</span> instance_1 = {\n    validationRules: {\n        insert: [goodRule, eventuallyBadRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> rejection_1 = Collection.prototype.runValidationRules\n    .call(instance_1, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.rejected;\n<span class=\"hljs-keyword\">return</span> BPromise.all([rejection_0, rejection_1]);",
            "isRoot": false,
            "uuid": "3a503f40-25f9-49ff-ae2d-0ab9a90e8784",
            "parentUUID": "5530ebcf-fad2-479d-8d43-f5a01896a552",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/collection/runValidationRules.js",
        "uuid": "5530ebcf-fad2-479d-8d43-f5a01896a552",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/collection/runValidationRules.js",
        "passes": [
          "[Circular ~.suites.suites.3.tests.0]",
          "[Circular ~.suites.suites.3.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 4
      },
      {
        "title": "The applyPatches function",
        "suites": [],
        "tests": [
          {
            "title": "should apply the supplied set of patches to the supplied object",
            "fullTitle": "The applyPatches function should apply the supplied set of patches to the supplied object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> oldObj = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = {\n    a: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare(oldObj, newObj);\n<span class=\"hljs-keyword\">var</span> patchedObj = applyPatches(oldObj, patches);\npatchedObj.should.eql(newObj);",
            "isRoot": false,
            "uuid": "3e28edc9-87ed-4598-9273-33835fd8ce7b",
            "parentUUID": "f22cea0e-8797-4289-b92f-f66e5bf86517",
            "skipped": false
          },
          {
            "title": "should not mutate the object to which it applies patches",
            "fullTitle": "The applyPatches function should not mutate the object to which it applies patches",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> oldObj = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> oldObjClone = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = {\n    a: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare(oldObj, newObj);\napplyPatches(oldObj, patches);\noldObj.should.eql(oldObjClone);",
            "isRoot": false,
            "uuid": "e06f9caa-ee5c-4719-ba3c-d240b6bc234d",
            "parentUUID": "f22cea0e-8797-4289-b92f-f66e5bf86517",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/apply-patches.js",
        "uuid": "f22cea0e-8797-4289-b92f-f66e5bf86517",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/apply-patches.js",
        "passes": [
          "[Circular ~.suites.suites.4.tests.0]",
          "[Circular ~.suites.suites.4.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "The argMatches function",
        "suites": [],
        "tests": [
          {
            "title": "should return true the argument is of the correct type",
            "fullTitle": "The argMatches function should return true the argument is of the correct type",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "argMatches(t.Str, <span class=\"hljs-string\">\"I'm a string\"</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "44bb55b4-f15d-42f3-bc81-382dda101701",
            "parentUUID": "e7e8dfc8-32e1-4a5f-a300-8fc9248c97cf",
            "skipped": false
          },
          {
            "title": "should throw an MW.Error if the argument is of the incorrect type",
            "fullTitle": "The argMatches function should throw an MW.Error if the argument is of the incorrect type",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "argMatches(t.Num, <span class=\"hljs-string\">\"I'm a string, not a number\"</span>).should.equal(<span class=\"hljs-literal\">false</span>);",
            "isRoot": false,
            "uuid": "75d253ce-7e2b-4659-a62d-77245f17e24d",
            "parentUUID": "e7e8dfc8-32e1-4a5f-a300-8fc9248c97cf",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/arg-matches.js",
        "uuid": "e7e8dfc8-32e1-4a5f-a300-8fc9248c97cf",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/arg-matches.js",
        "passes": [
          "[Circular ~.suites.suites.5.tests.0]",
          "[Circular ~.suites.suites.5.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "The ensure function",
        "suites": [],
        "tests": [
          {
            "title": "should not throw if the condition is truthy",
            "fullTitle": "The ensure function should not throw if the condition is truthy",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> peacefulFella = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    ensure(error, <span class=\"hljs-literal\">true</span>);\n};\npeacefulFella.should.not.throw();",
            "isRoot": false,
            "uuid": "701463d8-6eb7-4234-a527-44be267aae67",
            "parentUUID": "931f244d-7ab0-4512-9913-9fd18e978491",
            "skipped": false
          },
          {
            "title": "should throw if the condition is falsy",
            "fullTitle": "The ensure function should throw if the condition is falsy",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> troublemaker = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    ensure(error, <span class=\"hljs-literal\">false</span>);\n};\ntroublemaker.should.throw(<span class=\"hljs-built_in\">Error</span>);",
            "isRoot": false,
            "uuid": "f38f1c55-92ff-4e56-9544-6e1cc84c1463",
            "parentUUID": "931f244d-7ab0-4512-9913-9fd18e978491",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/ensure.js",
        "uuid": "931f244d-7ab0-4512-9913-9fd18e978491",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/ensure.js",
        "passes": [
          "[Circular ~.suites.suites.6.tests.0]",
          "[Circular ~.suites.suites.6.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "The getOldDocument function",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "The getOldDocument function should return a promise",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    db: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.a.Promise;",
            "isRoot": false,
            "uuid": "5a7a7f67-efd7-4035-8b46-99e952649444",
            "parentUUID": "70246a12-401d-4e00-8e13-95b1fe0f3e0c",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/get-old-document.js",
        "uuid": "70246a12-401d-4e00-8e13-95b1fe0f3e0c",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/get-old-document.js",
        "passes": [
          "[Circular ~.suites.suites.7.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "The promise returned by the getOldDocument function",
        "suites": [],
        "tests": [
          {
            "title": "should be fulfilled if a document is found",
            "fullTitle": "The promise returned by the getOldDocument function should be fulfilled if a document is found",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    db: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.fulfilledWith({});",
            "isRoot": false,
            "uuid": "63a5ad8e-c8ae-409f-938d-6080a3094095",
            "parentUUID": "256ddc2f-c4cc-46cb-b579-fe56ff48190d",
            "skipped": false
          },
          {
            "title": "should be rejected with a MW.Error if no document is found",
            "fullTitle": "The promise returned by the getOldDocument function should be rejected with a MW.Error if no document is found",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    db: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.rejectedWith(MW.Error);",
            "isRoot": false,
            "uuid": "94f3d1c4-232d-4de0-82bc-1b4308a57775",
            "parentUUID": "256ddc2f-c4cc-46cb-b579-fe56ff48190d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/get-old-document.js",
        "uuid": "256ddc2f-c4cc-46cb-b579-fe56ff48190d",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/get-old-document.js",
        "passes": [
          "[Circular ~.suites.suites.8.tests.0]",
          "[Circular ~.suites.suites.8.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "The PatchesType object",
        "suites": [],
        "tests": [
          {
            "title": "should be a tcomb type",
            "fullTitle": "The PatchesType object should be a tcomb type",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "t.Type.is(PatchesType).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "550b63eb-d29e-4b78-864a-fc728d4a6071",
            "parentUUID": "c29a9815-aaf6-41f7-8623-1e739b4804ef",
            "skipped": false
          },
          {
            "title": "should match valid JSON patches",
            "fullTitle": "The PatchesType object should match valid JSON patches",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> validPatches_0 = [];\n<span class=\"hljs-keyword\">var</span> validPatches_1 = jp.compare({a: <span class=\"hljs-number\">1</span>}, {b: <span class=\"hljs-number\">1</span>});\nt.validate(validPatches_0, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">true</span>);\nt.validate(validPatches_1, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "df0de216-854a-4dc0-a068-61b569f995aa",
            "parentUUID": "c29a9815-aaf6-41f7-8623-1e739b4804ef",
            "skipped": false
          },
          {
            "title": "should not match invalid JSON patches",
            "fullTitle": "The PatchesType object should not match invalid JSON patches",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> invalidPatches = [{a: <span class=\"hljs-number\">2</span>}];\nt.validate(invalidPatches, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">false</span>);",
            "isRoot": false,
            "uuid": "f196ec3b-8a05-4676-803a-706de01baec6",
            "parentUUID": "c29a9815-aaf6-41f7-8623-1e739b4804ef",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/patches-type.js",
        "uuid": "c29a9815-aaf6-41f7-8623-1e739b4804ef",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/patches-type.js",
        "passes": [
          "[Circular ~.suites.suites.9.tests.0]",
          "[Circular ~.suites.suites.9.tests.1]",
          "[Circular ~.suites.suites.9.tests.2]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "The randomId function",
        "suites": [],
        "tests": [
          {
            "title": "should generate a random 16-bytes string (32 characters long)",
            "fullTitle": "The randomId function should generate a random 16-bytes string (32 characters long)",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> string = randomId();\nstring.should.be.a.String;\nstring.length.should.equal(<span class=\"hljs-number\">32</span>);",
            "isRoot": false,
            "uuid": "c0e43616-7b23-427c-bd3e-d8414905f27c",
            "parentUUID": "0490df10-5d61-4b70-a290-7efb1e8f15a3",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/random-id.js",
        "uuid": "0490df10-5d61-4b70-a290-7efb1e8f15a3",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/random-id.js",
        "passes": [
          "[Circular ~.suites.suites.10.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "The insert method",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "The insert method should return a promise",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> promise = methods.insert();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
            "isRoot": false,
            "uuid": "770abf62-4a77-4bb9-8193-e49ff338e03e",
            "parentUUID": "315e19ee-1435-4d47-963a-f7bd376bb23d",
            "skipped": false
          },
          {
            "title": "should run validation insert rules",
            "fullTitle": "The insert method should run validation insert rules",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy()\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"insert\"</span>);\n    });",
            "isRoot": false,
            "uuid": "bc5e3d70-3cbb-42f9-8cc1-bce08a576c3d",
            "parentUUID": "315e19ee-1435-4d47-963a-f7bd376bb23d",
            "skipped": false
          },
          {
            "title": "should give the document a random _id if it doesn't have one",
            "fullTitle": "The insert method should give the document a random _id if it doesn't have one",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        insert: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> insertedDocument = collection.db.insert.firstCall.args[<span class=\"hljs-number\">0</span>];\n        insertedDocument._id.should.be.a.String;\n        insertedDocument._id.length.should.equal(<span class=\"hljs-number\">32</span>);\n    });",
            "isRoot": false,
            "uuid": "80f43c2a-e179-4e9e-b517-62ce7e99c3a5",
            "parentUUID": "315e19ee-1435-4d47-963a-f7bd376bb23d",
            "skipped": false
          },
          {
            "title": "should call db.insert with the new document",
            "fullTitle": "The insert method should call db.insert with the new document",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        insert: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {_id: <span class=\"hljs-string\">\"_id\"</span>, a: <span class=\"hljs-number\">1</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.db.insert.calledWith({\n            _id: <span class=\"hljs-string\">\"_id\"</span>,\n            a: <span class=\"hljs-number\">1</span>\n        }).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "c5e191c4-62c0-4849-8d87-c4675b558d42",
            "parentUUID": "315e19ee-1435-4d47-963a-f7bd376bb23d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/insert.js",
        "uuid": "315e19ee-1435-4d47-963a-f7bd376bb23d",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/methods/insert.js",
        "passes": [
          "[Circular ~.suites.suites.11.tests.0]",
          "[Circular ~.suites.suites.11.tests.1]",
          "[Circular ~.suites.suites.11.tests.2]",
          "[Circular ~.suites.suites.11.tests.3]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 3
      },
      {
        "title": "The promise returned by the insert method",
        "suites": [],
        "tests": [
          {
            "title": "should be rejected if the remote argument `newDocument` is not an object",
            "fullTitle": "The promise returned by the insert method should be rejected if the remote argument `newDocument` is not an object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> methods.insert().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `newDocument` must be an object\"</span>\n});",
            "isRoot": false,
            "uuid": "76bb35f1-9989-4434-80e9-34bb1e13e9b6",
            "parentUUID": "ca7e2243-00d1-4b36-8500-72ed737c1742",
            "skipped": false
          },
          {
            "title": "should be rejected if running validation rules fails",
            "fullTitle": "The promise returned by the insert method should be rejected if running validation rules fails",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    ))\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {}).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
            "isRoot": false,
            "uuid": "063b9e81-3fa0-4618-a24b-dd4e574b9f57",
            "parentUUID": "ca7e2243-00d1-4b36-8500-72ed737c1742",
            "skipped": false
          },
          {
            "title": "should be rejected if inserting fails",
            "fullTitle": "The promise returned by the insert method should be rejected if inserting fails",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        insert: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Insert error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {}).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Insert error\"</span>\n});",
            "isRoot": false,
            "uuid": "11010436-792a-4365-bb7c-8681283c9767",
            "parentUUID": "ca7e2243-00d1-4b36-8500-72ed737c1742",
            "skipped": false
          },
          {
            "title": "should be resolved with null if nothing fails",
            "fullTitle": "The promise returned by the insert method should be resolved with null if nothing fails",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        insert: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "7c7284f0-cbd6-478d-9789-cdf959f2ef8a",
            "parentUUID": "ca7e2243-00d1-4b36-8500-72ed737c1742",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/insert.js",
        "uuid": "ca7e2243-00d1-4b36-8500-72ed737c1742",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/methods/insert.js",
        "passes": [
          "[Circular ~.suites.suites.12.tests.0]",
          "[Circular ~.suites.suites.12.tests.1]",
          "[Circular ~.suites.suites.12.tests.2]",
          "[Circular ~.suites.suites.12.tests.3]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 3
      },
      {
        "title": "The remove method",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "The remove method should return a promise",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> promise = methods.remove();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
            "isRoot": false,
            "uuid": "7c22b1a1-5d5a-4408-9973-d4eabaac59e1",
            "parentUUID": "42c46b51-c727-4364-95af-50164dd0f191",
            "skipped": false
          },
          {
            "title": "should run validation remove rules",
            "fullTitle": "The remove method should run validation remove rules",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy(),\n    db: {\n        findOne: R.always(BPromise.resolve({}))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>)\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"remove\"</span>);\n    });",
            "isRoot": false,
            "uuid": "7fb9d86a-86e6-4f36-9955-5744cbad7636",
            "parentUUID": "42c46b51-c727-4364-95af-50164dd0f191",
            "skipped": false
          },
          {
            "title": "should call db.remove to remove the old document",
            "fullTitle": "The remove method should call db.remove to remove the old document",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        findOne: R.always(BPromise.resolve({_id: <span class=\"hljs-string\">\"_id\"</span>})),\n        remove: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"_id\"</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.db.remove.calledWith({\n            _id: <span class=\"hljs-string\">\"_id\"</span>\n        }).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "8ca881bd-7543-49c2-91da-40730627fc3a",
            "parentUUID": "42c46b51-c727-4364-95af-50164dd0f191",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/remove.js",
        "uuid": "42c46b51-c727-4364-95af-50164dd0f191",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/methods/remove.js",
        "passes": [
          "[Circular ~.suites.suites.13.tests.0]",
          "[Circular ~.suites.suites.13.tests.1]",
          "[Circular ~.suites.suites.13.tests.2]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      {
        "title": "The promise returned by the remove method",
        "suites": [],
        "tests": [
          {
            "title": "should be rejected if the remote argument `documentId` is not a string",
            "fullTitle": "The promise returned by the remove method should be rejected if the remote argument `documentId` is not a string",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> methods.remove().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>\n});",
            "isRoot": false,
            "uuid": "cdcdfa1b-f4c1-4a90-ab41-3e110c585f84",
            "parentUUID": "79dcfd5f-a493-407c-a24a-8869bb0fcfaa",
            "skipped": false
          },
          {
            "title": "should be rejected if no document with the given id is found",
            "fullTitle": "The promise returned by the remove method should be rejected if no document with the given id is found",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    db: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">404</span>,\n    message: <span class=\"hljs-string\">\"Document not found\"</span>\n});",
            "isRoot": false,
            "uuid": "af0190df-7252-4a94-b5f1-4d31be21e265",
            "parentUUID": "79dcfd5f-a493-407c-a24a-8869bb0fcfaa",
            "skipped": false
          },
          {
            "title": "should be rejected if running validation rules fails",
            "fullTitle": "The promise returned by the remove method should be rejected if running validation rules fails",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    )),\n    db: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
            "isRoot": false,
            "uuid": "473faca0-28f7-4f2d-9903-e642ade077af",
            "parentUUID": "79dcfd5f-a493-407c-a24a-8869bb0fcfaa",
            "skipped": false
          },
          {
            "title": "should be rejected if removing fails",
            "fullTitle": "The promise returned by the remove method should be rejected if removing fails",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        findOne: R.always({}),\n        remove: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Remove error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Remove error\"</span>\n});",
            "isRoot": false,
            "uuid": "b4788901-9140-444f-904f-e4d97cc6bd0d",
            "parentUUID": "79dcfd5f-a493-407c-a24a-8869bb0fcfaa",
            "skipped": false
          },
          {
            "title": "should be resolved with null if nothing fails",
            "fullTitle": "The promise returned by the remove method should be resolved with null if nothing fails",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        findOne: R.always({}),\n        remove: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "bd5528d1-7cea-47d2-b91d-ac69a790f2a9",
            "parentUUID": "79dcfd5f-a493-407c-a24a-8869bb0fcfaa",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/remove.js",
        "uuid": "79dcfd5f-a493-407c-a24a-8869bb0fcfaa",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/methods/remove.js",
        "passes": [
          "[Circular ~.suites.suites.14.tests.0]",
          "[Circular ~.suites.suites.14.tests.1]",
          "[Circular ~.suites.suites.14.tests.2]",
          "[Circular ~.suites.suites.14.tests.3]",
          "[Circular ~.suites.suites.14.tests.4]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 3
      },
      {
        "title": "The update method",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "The update method should return a promise",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> promise = methods.update();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
            "isRoot": false,
            "uuid": "d2592b42-0cfb-454c-96ea-1a1f2325428e",
            "parentUUID": "fb540e4f-8c5c-45fa-9ce5-65b4f0066366",
            "skipped": false
          },
          {
            "title": "should run validation update rules",
            "fullTitle": "The update method should run validation update rules",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy(),\n    db: {\n        findOne: R.always(BPromise.resolve({}))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, [])\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"update\"</span>);\n    });",
            "isRoot": false,
            "uuid": "b06fea34-23e4-4fdf-9b81-c00504bf0a36",
            "parentUUID": "fb540e4f-8c5c-45fa-9ce5-65b4f0066366",
            "skipped": false
          },
          {
            "title": "should call db.update with the updated document",
            "fullTitle": "The update method should call db.update with the updated document",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        findOne: R.always(BPromise.resolve({_id: <span class=\"hljs-string\">\"_id\"</span>})),\n        update: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare({}, {a: <span class=\"hljs-number\">1</span>});\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"_id\"</span>, patches)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.db.update.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.db.update.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql({\n            _id: <span class=\"hljs-string\">\"_id\"</span>\n        });\n        collection.db.update.firstCall.args[<span class=\"hljs-number\">1</span>].should.eql({\n            $set: {\n                a: <span class=\"hljs-number\">1</span>\n            }\n        });\n    });",
            "isRoot": false,
            "uuid": "9ce1e1f5-bcb4-4b3b-a060-5fdb54ed334d",
            "parentUUID": "fb540e4f-8c5c-45fa-9ce5-65b4f0066366",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/update.js",
        "uuid": "fb540e4f-8c5c-45fa-9ce5-65b4f0066366",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/methods/update.js",
        "passes": [
          "[Circular ~.suites.suites.15.tests.0]",
          "[Circular ~.suites.suites.15.tests.1]",
          "[Circular ~.suites.suites.15.tests.2]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      {
        "title": "The promise returned by the update method",
        "suites": [],
        "tests": [
          {
            "title": "should be rejected if the remote argument `documentId` is not a string",
            "fullTitle": "The promise returned by the update method should be rejected if the remote argument `documentId` is not a string",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> methods.update().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>\n});",
            "isRoot": false,
            "uuid": "44b042b2-b60c-4eb7-95fa-ee13c869a5d6",
            "parentUUID": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
            "skipped": false
          },
          {
            "title": "should be rejected if the remote argument `patches` is not an array of patches",
            "fullTitle": "The promise returned by the update method should be rejected if the remote argument `patches` is not an array of patches",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> methods.update(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"Second argument `patches` must be an array of JSON patches\"</span>\n});",
            "isRoot": false,
            "uuid": "1a70615e-56d6-4b4e-8288-51103a96773e",
            "parentUUID": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
            "skipped": false
          },
          {
            "title": "should be rejected if no document with the given id is found",
            "fullTitle": "The promise returned by the update method should be rejected if no document with the given id is found",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    db: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, []).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">404</span>,\n    message: <span class=\"hljs-string\">\"Document not found\"</span>\n});",
            "isRoot": false,
            "uuid": "cb8a9f65-0172-4135-b4a0-635f236a421d",
            "parentUUID": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
            "skipped": false
          },
          {
            "title": "should be rejected if running validation rules fails",
            "fullTitle": "The promise returned by the update method should be rejected if running validation rules fails",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    )),\n    db: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, []).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
            "isRoot": false,
            "uuid": "02939ab8-b1a7-4876-86aa-d94e8eafc457",
            "parentUUID": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
            "skipped": false
          },
          {
            "title": "should be rejected if updating fails",
            "fullTitle": "The promise returned by the update method should be rejected if updating fails",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        findOne: R.always({}),\n        update: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Update error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, []).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Update error\"</span>\n});",
            "isRoot": false,
            "uuid": "6f41e963-8fa9-43bc-9020-4652b6badfb1",
            "parentUUID": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
            "skipped": false
          },
          {
            "title": "should be resolved with null if nothing fails",
            "fullTitle": "The promise returned by the update method should be resolved with null if nothing fails",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        findOne: R.always({}),\n        update: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, [])\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "0407747e-f789-473e-848a-4c86b743ed8d",
            "parentUUID": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/update.js",
        "uuid": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/methods/update.js",
        "passes": [
          "[Circular ~.suites.suites.16.tests.0]",
          "[Circular ~.suites.suites.16.tests.1]",
          "[Circular ~.suites.suites.16.tests.2]",
          "[Circular ~.suites.suites.16.tests.3]",
          "[Circular ~.suites.suites.16.tests.4]",
          "[Circular ~.suites.suites.16.tests.5]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 3
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "ef84cd1b-e3f7-4715-97a7-886144043d1e",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should add validation rules to the collection instance",
      "fullTitle": "The addValidationRules method should add validation rules to the collection instance",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [],\n        update: [],\n        remove: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> insert = sinon.spy();\n<span class=\"hljs-keyword\">var</span> update = sinon.spy();\n<span class=\"hljs-keyword\">var</span> remove = sinon.spy();\nCollection.prototype.addValidationRules.call(instance, {\n    insert: insert,\n    update: update,\n    remove: remove\n});\ninstance.validationRules.insert[<span class=\"hljs-number\">0</span>].should.equal(insert);\ninstance.validationRules.update[<span class=\"hljs-number\">0</span>].should.equal(update);\ninstance.validationRules.remove[<span class=\"hljs-number\">0</span>].should.equal(remove);",
      "isRoot": false,
      "uuid": "0e04c8ee-f1af-4b70-a2bc-8b6f31adcf0e",
      "parentUUID": "265e0bc7-feff-4b91-8914-7c8b59f22fff",
      "skipped": false
    },
    {
      "title": "should attach methods to the collection's mw instance",
      "fullTitle": "The attachMethods method should attach methods to the collection's mw instance",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    name: <span class=\"hljs-string\">\"elements\"</span>,\n    mw: {\n        methods: sinon.spy()\n    }\n};\nCollection.prototype.attachMethods.call(instance);\n<span class=\"hljs-keyword\">var</span> methods = instance.mw.methods.firstCall.args[<span class=\"hljs-number\">0</span>];\nR.keys(methods).should.eql([\n    <span class=\"hljs-string\">\"/elements/insert\"</span>,\n    <span class=\"hljs-string\">\"/elements/update\"</span>,\n    <span class=\"hljs-string\">\"/elements/remove\"</span>\n]);",
      "isRoot": false,
      "uuid": "3903a215-14c4-4f9b-85ae-25c5a89ebafe",
      "parentUUID": "6412f789-161a-47e7-a61d-d6f28d7daa1b",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The runValidationRules method should return a promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: []\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, {}, {})\n    .should.be.a.Promise;",
      "isRoot": false,
      "uuid": "12f52886-e1fd-44db-873b-20f496e912e2",
      "parentUUID": "c5264ca9-23e4-479b-b958-35ea12c0794b",
      "skipped": false
    },
    {
      "title": "should run all validation rules for the specified method",
      "fullTitle": "The runValidationRules method should run all validation rules for the specified method",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> rule_0 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> rule_1 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> rule_2 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [rule_0, rule_1, rule_2]\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, {}, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        rule_0.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        rule_1.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        rule_2.called.should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "1a50e552-6efe-487a-8d68-1e541ba79e7a",
      "parentUUID": "c5264ca9-23e4-479b-b958-35ea12c0794b",
      "skipped": false
    },
    {
      "title": "should call rules with the correct context and arguments",
      "fullTitle": "The runValidationRules method should call rules with the correct context and arguments",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> insertRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> updateRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> removeRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [insertRule],\n        update: [updateRule],\n        remove: [removeRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> context = {context: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> oldDocument = {oldDocument: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> newDocument = {newDocument: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> insertResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, newDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        insertRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        insertRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">1</span>);\n        insertRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(newDocument);\n    });\n<span class=\"hljs-keyword\">var</span> updateResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"update\"</span>, oldDocument, newDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        updateRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        updateRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">2</span>);\n        updateRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(oldDocument);\n        updateRule.firstCall.args[<span class=\"hljs-number\">1</span>].should.eql(newDocument);\n    });\n<span class=\"hljs-keyword\">var</span> removeResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"remove\"</span>, oldDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        removeRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        removeRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">1</span>);\n        removeRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(oldDocument);\n    });\n<span class=\"hljs-keyword\">return</span> BPromise.all([\n    insertResult,\n    updateResult,\n    removeResult\n]);",
      "isRoot": false,
      "uuid": "e9f408fb-d4e1-4b2f-9b6a-8a4b7734463e",
      "parentUUID": "c5264ca9-23e4-479b-b958-35ea12c0794b",
      "skipped": false
    },
    {
      "title": "should be fulfilled if all validation rules return either a value or an eventually fulfilled promise",
      "fullTitle": "The promise returned by the runValidationRules method should be fulfilled if all validation rules return either a value or an eventually fulfilled promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> rule_0 = sinon.stub().returns(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">var</span> rule_1 = sinon.stub().returns(<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-keyword\">var</span> rule_2 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [rule_0, rule_1, rule_2]\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.fulfilled;",
      "isRoot": false,
      "uuid": "aab0dcfa-5233-4903-8a90-a20d4deb9e28",
      "parentUUID": "5530ebcf-fad2-479d-8d43-f5a01896a552",
      "skipped": false
    },
    {
      "title": "should be rejected if any of the validation rules either throws or returns an eventually rejected promise",
      "fullTitle": "The promise returned by the runValidationRules method should be rejected if any of the validation rules either throws or returns an eventually rejected promise",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> goodRule = sinon.stub().returns(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">var</span> badRule = sinon.stub().throws(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>());\n<span class=\"hljs-keyword\">var</span> eventuallyBadRule = sinon.stub().returns(BPromise.reject());\n<span class=\"hljs-keyword\">var</span> instance_0 = {\n    validationRules: {\n        insert: [goodRule, badRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> rejection_0 = Collection.prototype.runValidationRules\n    .call(instance_0, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.rejected;\n<span class=\"hljs-keyword\">var</span> instance_1 = {\n    validationRules: {\n        insert: [goodRule, eventuallyBadRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> rejection_1 = Collection.prototype.runValidationRules\n    .call(instance_1, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.rejected;\n<span class=\"hljs-keyword\">return</span> BPromise.all([rejection_0, rejection_1]);",
      "isRoot": false,
      "uuid": "f923a4ab-dd55-44a3-b09b-b057df25a5fa",
      "parentUUID": "5530ebcf-fad2-479d-8d43-f5a01896a552",
      "skipped": false
    },
    {
      "title": "should apply the supplied set of patches to the supplied object",
      "fullTitle": "The applyPatches function should apply the supplied set of patches to the supplied object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> oldObj = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = {\n    a: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare(oldObj, newObj);\n<span class=\"hljs-keyword\">var</span> patchedObj = applyPatches(oldObj, patches);\npatchedObj.should.eql(newObj);",
      "isRoot": false,
      "uuid": "6e5005e9-7bf2-4ac3-91d1-473181272fcc",
      "parentUUID": "f22cea0e-8797-4289-b92f-f66e5bf86517",
      "skipped": false
    },
    {
      "title": "should not mutate the object to which it applies patches",
      "fullTitle": "The applyPatches function should not mutate the object to which it applies patches",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> oldObj = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> oldObjClone = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = {\n    a: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare(oldObj, newObj);\napplyPatches(oldObj, patches);\noldObj.should.eql(oldObjClone);",
      "isRoot": false,
      "uuid": "453ac0a3-96cc-4c14-a46a-f5166c56f6e0",
      "parentUUID": "f22cea0e-8797-4289-b92f-f66e5bf86517",
      "skipped": false
    },
    {
      "title": "should return true the argument is of the correct type",
      "fullTitle": "The argMatches function should return true the argument is of the correct type",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "argMatches(t.Str, <span class=\"hljs-string\">\"I'm a string\"</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "506e04f4-906f-4b2f-8a00-bc1949fde183",
      "parentUUID": "e7e8dfc8-32e1-4a5f-a300-8fc9248c97cf",
      "skipped": false
    },
    {
      "title": "should throw an MW.Error if the argument is of the incorrect type",
      "fullTitle": "The argMatches function should throw an MW.Error if the argument is of the incorrect type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "argMatches(t.Num, <span class=\"hljs-string\">\"I'm a string, not a number\"</span>).should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "1af3c237-8ae4-4425-bce5-cf13077b4d27",
      "parentUUID": "e7e8dfc8-32e1-4a5f-a300-8fc9248c97cf",
      "skipped": false
    },
    {
      "title": "should not throw if the condition is truthy",
      "fullTitle": "The ensure function should not throw if the condition is truthy",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> peacefulFella = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    ensure(error, <span class=\"hljs-literal\">true</span>);\n};\npeacefulFella.should.not.throw();",
      "isRoot": false,
      "uuid": "77e789f6-3525-4d6f-8f95-298e64c2576a",
      "parentUUID": "931f244d-7ab0-4512-9913-9fd18e978491",
      "skipped": false
    },
    {
      "title": "should throw if the condition is falsy",
      "fullTitle": "The ensure function should throw if the condition is falsy",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> troublemaker = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    ensure(error, <span class=\"hljs-literal\">false</span>);\n};\ntroublemaker.should.throw(<span class=\"hljs-built_in\">Error</span>);",
      "isRoot": false,
      "uuid": "3d4f7ea2-ad3d-4563-a8c8-1a80b2ef8442",
      "parentUUID": "931f244d-7ab0-4512-9913-9fd18e978491",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The getOldDocument function should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    db: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.a.Promise;",
      "isRoot": false,
      "uuid": "32e1f6cf-b804-40b2-81ee-36b592652cd2",
      "parentUUID": "70246a12-401d-4e00-8e13-95b1fe0f3e0c",
      "skipped": false
    },
    {
      "title": "should be fulfilled if a document is found",
      "fullTitle": "The promise returned by the getOldDocument function should be fulfilled if a document is found",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    db: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.fulfilledWith({});",
      "isRoot": false,
      "uuid": "6c4fc288-988c-4e09-a557-64ab7cdd7eff",
      "parentUUID": "256ddc2f-c4cc-46cb-b579-fe56ff48190d",
      "skipped": false
    },
    {
      "title": "should be rejected with a MW.Error if no document is found",
      "fullTitle": "The promise returned by the getOldDocument function should be rejected with a MW.Error if no document is found",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    db: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.rejectedWith(MW.Error);",
      "isRoot": false,
      "uuid": "04c94a6b-942f-469c-9935-f83218f281e1",
      "parentUUID": "256ddc2f-c4cc-46cb-b579-fe56ff48190d",
      "skipped": false
    },
    {
      "title": "should be a tcomb type",
      "fullTitle": "The PatchesType object should be a tcomb type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t.Type.is(PatchesType).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "cbe97339-d39c-445f-ad86-a6cb2ccb96ff",
      "parentUUID": "c29a9815-aaf6-41f7-8623-1e739b4804ef",
      "skipped": false
    },
    {
      "title": "should match valid JSON patches",
      "fullTitle": "The PatchesType object should match valid JSON patches",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> validPatches_0 = [];\n<span class=\"hljs-keyword\">var</span> validPatches_1 = jp.compare({a: <span class=\"hljs-number\">1</span>}, {b: <span class=\"hljs-number\">1</span>});\nt.validate(validPatches_0, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">true</span>);\nt.validate(validPatches_1, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "e0607a0e-7c2e-4dda-8207-31af8b4e3be9",
      "parentUUID": "c29a9815-aaf6-41f7-8623-1e739b4804ef",
      "skipped": false
    },
    {
      "title": "should not match invalid JSON patches",
      "fullTitle": "The PatchesType object should not match invalid JSON patches",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> invalidPatches = [{a: <span class=\"hljs-number\">2</span>}];\nt.validate(invalidPatches, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "3f6b8c89-2599-42a2-acdc-1351ef98d234",
      "parentUUID": "c29a9815-aaf6-41f7-8623-1e739b4804ef",
      "skipped": false
    },
    {
      "title": "should generate a random 16-bytes string (32 characters long)",
      "fullTitle": "The randomId function should generate a random 16-bytes string (32 characters long)",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> string = randomId();\nstring.should.be.a.String;\nstring.length.should.equal(<span class=\"hljs-number\">32</span>);",
      "isRoot": false,
      "uuid": "82a68a34-97c1-445d-9cb4-8c57705bf8ff",
      "parentUUID": "0490df10-5d61-4b70-a290-7efb1e8f15a3",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The insert method should return a promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = methods.insert();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "f6e6a5e4-7a4e-41a3-9352-b59150a0b446",
      "parentUUID": "315e19ee-1435-4d47-963a-f7bd376bb23d",
      "skipped": false
    },
    {
      "title": "should run validation insert rules",
      "fullTitle": "The insert method should run validation insert rules",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy()\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"insert\"</span>);\n    });",
      "isRoot": false,
      "uuid": "40ef6ec1-ae7b-4744-9421-d9c53931256c",
      "parentUUID": "315e19ee-1435-4d47-963a-f7bd376bb23d",
      "skipped": false
    },
    {
      "title": "should give the document a random _id if it doesn't have one",
      "fullTitle": "The insert method should give the document a random _id if it doesn't have one",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        insert: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> insertedDocument = collection.db.insert.firstCall.args[<span class=\"hljs-number\">0</span>];\n        insertedDocument._id.should.be.a.String;\n        insertedDocument._id.length.should.equal(<span class=\"hljs-number\">32</span>);\n    });",
      "isRoot": false,
      "uuid": "2e5354cc-a219-48e1-9ed2-06530337b68e",
      "parentUUID": "315e19ee-1435-4d47-963a-f7bd376bb23d",
      "skipped": false
    },
    {
      "title": "should call db.insert with the new document",
      "fullTitle": "The insert method should call db.insert with the new document",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        insert: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {_id: <span class=\"hljs-string\">\"_id\"</span>, a: <span class=\"hljs-number\">1</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.db.insert.calledWith({\n            _id: <span class=\"hljs-string\">\"_id\"</span>,\n            a: <span class=\"hljs-number\">1</span>\n        }).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "e6b60b2d-5e83-4d83-ba28-1af1659e7bd9",
      "parentUUID": "315e19ee-1435-4d47-963a-f7bd376bb23d",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `newDocument` is not an object",
      "fullTitle": "The promise returned by the insert method should be rejected if the remote argument `newDocument` is not an object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.insert().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `newDocument` must be an object\"</span>\n});",
      "isRoot": false,
      "uuid": "66de2e57-2ff1-4945-bbd9-bad5c00511c5",
      "parentUUID": "ca7e2243-00d1-4b36-8500-72ed737c1742",
      "skipped": false
    },
    {
      "title": "should be rejected if running validation rules fails",
      "fullTitle": "The promise returned by the insert method should be rejected if running validation rules fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    ))\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {}).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
      "isRoot": false,
      "uuid": "93d61a8e-89b5-4361-bbfe-a2119adc67fa",
      "parentUUID": "ca7e2243-00d1-4b36-8500-72ed737c1742",
      "skipped": false
    },
    {
      "title": "should be rejected if inserting fails",
      "fullTitle": "The promise returned by the insert method should be rejected if inserting fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        insert: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Insert error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {}).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Insert error\"</span>\n});",
      "isRoot": false,
      "uuid": "93aa1bc7-bc22-4d34-955f-7df275fd266e",
      "parentUUID": "ca7e2243-00d1-4b36-8500-72ed737c1742",
      "skipped": false
    },
    {
      "title": "should be resolved with null if nothing fails",
      "fullTitle": "The promise returned by the insert method should be resolved with null if nothing fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        insert: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "c3fa0afb-f418-49b8-8909-ce6c45074d47",
      "parentUUID": "ca7e2243-00d1-4b36-8500-72ed737c1742",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The remove method should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = methods.remove();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "aed005cf-777b-4365-8609-be449c8da399",
      "parentUUID": "42c46b51-c727-4364-95af-50164dd0f191",
      "skipped": false
    },
    {
      "title": "should run validation remove rules",
      "fullTitle": "The remove method should run validation remove rules",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy(),\n    db: {\n        findOne: R.always(BPromise.resolve({}))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>)\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"remove\"</span>);\n    });",
      "isRoot": false,
      "uuid": "5bdaf3a8-340f-4e34-81f7-3f657c1c90c9",
      "parentUUID": "42c46b51-c727-4364-95af-50164dd0f191",
      "skipped": false
    },
    {
      "title": "should call db.remove to remove the old document",
      "fullTitle": "The remove method should call db.remove to remove the old document",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        findOne: R.always(BPromise.resolve({_id: <span class=\"hljs-string\">\"_id\"</span>})),\n        remove: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"_id\"</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.db.remove.calledWith({\n            _id: <span class=\"hljs-string\">\"_id\"</span>\n        }).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "7afaba17-1b6c-4045-9e14-c7158a7798d8",
      "parentUUID": "42c46b51-c727-4364-95af-50164dd0f191",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `documentId` is not a string",
      "fullTitle": "The promise returned by the remove method should be rejected if the remote argument `documentId` is not a string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.remove().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>\n});",
      "isRoot": false,
      "uuid": "17b34da7-dda7-4c2c-ab8e-ef67d412fc0e",
      "parentUUID": "79dcfd5f-a493-407c-a24a-8869bb0fcfaa",
      "skipped": false
    },
    {
      "title": "should be rejected if no document with the given id is found",
      "fullTitle": "The promise returned by the remove method should be rejected if no document with the given id is found",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    db: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">404</span>,\n    message: <span class=\"hljs-string\">\"Document not found\"</span>\n});",
      "isRoot": false,
      "uuid": "6f49e074-2699-4f7c-825a-f98a366135ef",
      "parentUUID": "79dcfd5f-a493-407c-a24a-8869bb0fcfaa",
      "skipped": false
    },
    {
      "title": "should be rejected if running validation rules fails",
      "fullTitle": "The promise returned by the remove method should be rejected if running validation rules fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    )),\n    db: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
      "isRoot": false,
      "uuid": "ec71016d-a2b0-4d5e-b5d2-334ae09fd7ed",
      "parentUUID": "79dcfd5f-a493-407c-a24a-8869bb0fcfaa",
      "skipped": false
    },
    {
      "title": "should be rejected if removing fails",
      "fullTitle": "The promise returned by the remove method should be rejected if removing fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        findOne: R.always({}),\n        remove: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Remove error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Remove error\"</span>\n});",
      "isRoot": false,
      "uuid": "bc09cb10-4c18-49fa-aabc-3cef6e0fbd78",
      "parentUUID": "79dcfd5f-a493-407c-a24a-8869bb0fcfaa",
      "skipped": false
    },
    {
      "title": "should be resolved with null if nothing fails",
      "fullTitle": "The promise returned by the remove method should be resolved with null if nothing fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        findOne: R.always({}),\n        remove: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "8b9e07d1-b73f-49dc-be6b-ff6f9f1a2816",
      "parentUUID": "79dcfd5f-a493-407c-a24a-8869bb0fcfaa",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The update method should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = methods.update();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "da970094-6ef7-489e-86b1-07a7c9d580da",
      "parentUUID": "fb540e4f-8c5c-45fa-9ce5-65b4f0066366",
      "skipped": false
    },
    {
      "title": "should run validation update rules",
      "fullTitle": "The update method should run validation update rules",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy(),\n    db: {\n        findOne: R.always(BPromise.resolve({}))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, [])\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"update\"</span>);\n    });",
      "isRoot": false,
      "uuid": "b923f310-7a2f-47f6-b12d-abdce1334cd7",
      "parentUUID": "fb540e4f-8c5c-45fa-9ce5-65b4f0066366",
      "skipped": false
    },
    {
      "title": "should call db.update with the updated document",
      "fullTitle": "The update method should call db.update with the updated document",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        findOne: R.always(BPromise.resolve({_id: <span class=\"hljs-string\">\"_id\"</span>})),\n        update: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare({}, {a: <span class=\"hljs-number\">1</span>});\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"_id\"</span>, patches)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.db.update.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.db.update.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql({\n            _id: <span class=\"hljs-string\">\"_id\"</span>\n        });\n        collection.db.update.firstCall.args[<span class=\"hljs-number\">1</span>].should.eql({\n            $set: {\n                a: <span class=\"hljs-number\">1</span>\n            }\n        });\n    });",
      "isRoot": false,
      "uuid": "c7f05d87-e2ce-41d3-8482-4b4ad83c54a8",
      "parentUUID": "fb540e4f-8c5c-45fa-9ce5-65b4f0066366",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `documentId` is not a string",
      "fullTitle": "The promise returned by the update method should be rejected if the remote argument `documentId` is not a string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.update().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>\n});",
      "isRoot": false,
      "uuid": "38be8860-4aa7-4fd8-a7a8-a076dd7a61f4",
      "parentUUID": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `patches` is not an array of patches",
      "fullTitle": "The promise returned by the update method should be rejected if the remote argument `patches` is not an array of patches",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.update(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"Second argument `patches` must be an array of JSON patches\"</span>\n});",
      "isRoot": false,
      "uuid": "c81350a8-57e2-4b75-97d0-e818dc170b44",
      "parentUUID": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
      "skipped": false
    },
    {
      "title": "should be rejected if no document with the given id is found",
      "fullTitle": "The promise returned by the update method should be rejected if no document with the given id is found",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    db: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, []).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">404</span>,\n    message: <span class=\"hljs-string\">\"Document not found\"</span>\n});",
      "isRoot": false,
      "uuid": "0bff9445-f8d8-4070-960d-8435eb6c9e35",
      "parentUUID": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
      "skipped": false
    },
    {
      "title": "should be rejected if running validation rules fails",
      "fullTitle": "The promise returned by the update method should be rejected if running validation rules fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    )),\n    db: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, []).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
      "isRoot": false,
      "uuid": "0de49d4c-c516-46e8-b2a7-47a09ada6488",
      "parentUUID": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
      "skipped": false
    },
    {
      "title": "should be rejected if updating fails",
      "fullTitle": "The promise returned by the update method should be rejected if updating fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        findOne: R.always({}),\n        update: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Update error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, []).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Update error\"</span>\n});",
      "isRoot": false,
      "uuid": "9ea7101f-1e1b-46de-9c5d-5f7c884e01a8",
      "parentUUID": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
      "skipped": false
    },
    {
      "title": "should be resolved with null if nothing fails",
      "fullTitle": "The promise returned by the update method should be resolved with null if nothing fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        findOne: R.always({}),\n        update: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, [])\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "baeaa598-9612-4ee3-af83-e2f483979743",
      "parentUUID": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
      "skipped": false
    }
  ],
  "allHooks": [],
  "allPending": [],
  "allPasses": [
    {
      "title": "should add validation rules to the collection instance",
      "fullTitle": "The addValidationRules method should add validation rules to the collection instance",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [],\n        update: [],\n        remove: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> insert = sinon.spy();\n<span class=\"hljs-keyword\">var</span> update = sinon.spy();\n<span class=\"hljs-keyword\">var</span> remove = sinon.spy();\nCollection.prototype.addValidationRules.call(instance, {\n    insert: insert,\n    update: update,\n    remove: remove\n});\ninstance.validationRules.insert[<span class=\"hljs-number\">0</span>].should.equal(insert);\ninstance.validationRules.update[<span class=\"hljs-number\">0</span>].should.equal(update);\ninstance.validationRules.remove[<span class=\"hljs-number\">0</span>].should.equal(remove);",
      "isRoot": false,
      "uuid": "271f4198-770c-4644-a21e-773f3a9dfce1",
      "parentUUID": "265e0bc7-feff-4b91-8914-7c8b59f22fff",
      "skipped": false
    },
    {
      "title": "should attach methods to the collection's mw instance",
      "fullTitle": "The attachMethods method should attach methods to the collection's mw instance",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    name: <span class=\"hljs-string\">\"elements\"</span>,\n    mw: {\n        methods: sinon.spy()\n    }\n};\nCollection.prototype.attachMethods.call(instance);\n<span class=\"hljs-keyword\">var</span> methods = instance.mw.methods.firstCall.args[<span class=\"hljs-number\">0</span>];\nR.keys(methods).should.eql([\n    <span class=\"hljs-string\">\"/elements/insert\"</span>,\n    <span class=\"hljs-string\">\"/elements/update\"</span>,\n    <span class=\"hljs-string\">\"/elements/remove\"</span>\n]);",
      "isRoot": false,
      "uuid": "ed2dbd13-e67e-4267-be86-8a3d0337bd49",
      "parentUUID": "6412f789-161a-47e7-a61d-d6f28d7daa1b",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The runValidationRules method should return a promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: []\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, {}, {})\n    .should.be.a.Promise;",
      "isRoot": false,
      "uuid": "f58b246e-8556-413f-809b-3b494ef8e4aa",
      "parentUUID": "c5264ca9-23e4-479b-b958-35ea12c0794b",
      "skipped": false
    },
    {
      "title": "should run all validation rules for the specified method",
      "fullTitle": "The runValidationRules method should run all validation rules for the specified method",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> rule_0 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> rule_1 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> rule_2 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [rule_0, rule_1, rule_2]\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, {}, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        rule_0.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        rule_1.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        rule_2.called.should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "b50f1dda-4fcd-49d5-83ae-ff0b4b9d4d1c",
      "parentUUID": "c5264ca9-23e4-479b-b958-35ea12c0794b",
      "skipped": false
    },
    {
      "title": "should call rules with the correct context and arguments",
      "fullTitle": "The runValidationRules method should call rules with the correct context and arguments",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> insertRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> updateRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> removeRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [insertRule],\n        update: [updateRule],\n        remove: [removeRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> context = {context: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> oldDocument = {oldDocument: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> newDocument = {newDocument: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> insertResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, newDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        insertRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        insertRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">1</span>);\n        insertRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(newDocument);\n    });\n<span class=\"hljs-keyword\">var</span> updateResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"update\"</span>, oldDocument, newDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        updateRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        updateRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">2</span>);\n        updateRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(oldDocument);\n        updateRule.firstCall.args[<span class=\"hljs-number\">1</span>].should.eql(newDocument);\n    });\n<span class=\"hljs-keyword\">var</span> removeResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"remove\"</span>, oldDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        removeRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        removeRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">1</span>);\n        removeRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(oldDocument);\n    });\n<span class=\"hljs-keyword\">return</span> BPromise.all([\n    insertResult,\n    updateResult,\n    removeResult\n]);",
      "isRoot": false,
      "uuid": "1016633a-4b65-4330-b5c8-ba85e026375f",
      "parentUUID": "c5264ca9-23e4-479b-b958-35ea12c0794b",
      "skipped": false
    },
    {
      "title": "should be fulfilled if all validation rules return either a value or an eventually fulfilled promise",
      "fullTitle": "The promise returned by the runValidationRules method should be fulfilled if all validation rules return either a value or an eventually fulfilled promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> rule_0 = sinon.stub().returns(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">var</span> rule_1 = sinon.stub().returns(<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-keyword\">var</span> rule_2 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [rule_0, rule_1, rule_2]\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.fulfilled;",
      "isRoot": false,
      "uuid": "d0626c18-3e9d-4a20-ab96-e4245620f03a",
      "parentUUID": "5530ebcf-fad2-479d-8d43-f5a01896a552",
      "skipped": false
    },
    {
      "title": "should be rejected if any of the validation rules either throws or returns an eventually rejected promise",
      "fullTitle": "The promise returned by the runValidationRules method should be rejected if any of the validation rules either throws or returns an eventually rejected promise",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> goodRule = sinon.stub().returns(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">var</span> badRule = sinon.stub().throws(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>());\n<span class=\"hljs-keyword\">var</span> eventuallyBadRule = sinon.stub().returns(BPromise.reject());\n<span class=\"hljs-keyword\">var</span> instance_0 = {\n    validationRules: {\n        insert: [goodRule, badRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> rejection_0 = Collection.prototype.runValidationRules\n    .call(instance_0, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.rejected;\n<span class=\"hljs-keyword\">var</span> instance_1 = {\n    validationRules: {\n        insert: [goodRule, eventuallyBadRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> rejection_1 = Collection.prototype.runValidationRules\n    .call(instance_1, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.rejected;\n<span class=\"hljs-keyword\">return</span> BPromise.all([rejection_0, rejection_1]);",
      "isRoot": false,
      "uuid": "fcf746fd-9988-4a08-a4a2-7a115242b4e0",
      "parentUUID": "5530ebcf-fad2-479d-8d43-f5a01896a552",
      "skipped": false
    },
    {
      "title": "should apply the supplied set of patches to the supplied object",
      "fullTitle": "The applyPatches function should apply the supplied set of patches to the supplied object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> oldObj = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = {\n    a: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare(oldObj, newObj);\n<span class=\"hljs-keyword\">var</span> patchedObj = applyPatches(oldObj, patches);\npatchedObj.should.eql(newObj);",
      "isRoot": false,
      "uuid": "61af26ca-32a4-457e-b0db-83898f5dfe0a",
      "parentUUID": "f22cea0e-8797-4289-b92f-f66e5bf86517",
      "skipped": false
    },
    {
      "title": "should not mutate the object to which it applies patches",
      "fullTitle": "The applyPatches function should not mutate the object to which it applies patches",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> oldObj = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> oldObjClone = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = {\n    a: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare(oldObj, newObj);\napplyPatches(oldObj, patches);\noldObj.should.eql(oldObjClone);",
      "isRoot": false,
      "uuid": "704bf952-b725-44c0-9d92-8bb0ab878d12",
      "parentUUID": "f22cea0e-8797-4289-b92f-f66e5bf86517",
      "skipped": false
    },
    {
      "title": "should return true the argument is of the correct type",
      "fullTitle": "The argMatches function should return true the argument is of the correct type",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "argMatches(t.Str, <span class=\"hljs-string\">\"I'm a string\"</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "d72728b7-b793-4aa8-889c-2fbe1b077ec0",
      "parentUUID": "e7e8dfc8-32e1-4a5f-a300-8fc9248c97cf",
      "skipped": false
    },
    {
      "title": "should throw an MW.Error if the argument is of the incorrect type",
      "fullTitle": "The argMatches function should throw an MW.Error if the argument is of the incorrect type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "argMatches(t.Num, <span class=\"hljs-string\">\"I'm a string, not a number\"</span>).should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "6072765e-62ed-490f-b6bd-9b0a8eb5e9f4",
      "parentUUID": "e7e8dfc8-32e1-4a5f-a300-8fc9248c97cf",
      "skipped": false
    },
    {
      "title": "should not throw if the condition is truthy",
      "fullTitle": "The ensure function should not throw if the condition is truthy",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> peacefulFella = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    ensure(error, <span class=\"hljs-literal\">true</span>);\n};\npeacefulFella.should.not.throw();",
      "isRoot": false,
      "uuid": "42c208f5-7c33-40bc-b14b-c944649e50b8",
      "parentUUID": "931f244d-7ab0-4512-9913-9fd18e978491",
      "skipped": false
    },
    {
      "title": "should throw if the condition is falsy",
      "fullTitle": "The ensure function should throw if the condition is falsy",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> troublemaker = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    ensure(error, <span class=\"hljs-literal\">false</span>);\n};\ntroublemaker.should.throw(<span class=\"hljs-built_in\">Error</span>);",
      "isRoot": false,
      "uuid": "92614c25-3b7e-4d01-bd2d-390e3a25deb2",
      "parentUUID": "931f244d-7ab0-4512-9913-9fd18e978491",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The getOldDocument function should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    db: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.a.Promise;",
      "isRoot": false,
      "uuid": "4ffe4d93-66d3-4b8a-8aa4-c0169a798c6c",
      "parentUUID": "70246a12-401d-4e00-8e13-95b1fe0f3e0c",
      "skipped": false
    },
    {
      "title": "should be fulfilled if a document is found",
      "fullTitle": "The promise returned by the getOldDocument function should be fulfilled if a document is found",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    db: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.fulfilledWith({});",
      "isRoot": false,
      "uuid": "d7dc6af2-c7c8-4843-b2c6-61a9c4db3960",
      "parentUUID": "256ddc2f-c4cc-46cb-b579-fe56ff48190d",
      "skipped": false
    },
    {
      "title": "should be rejected with a MW.Error if no document is found",
      "fullTitle": "The promise returned by the getOldDocument function should be rejected with a MW.Error if no document is found",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    db: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.rejectedWith(MW.Error);",
      "isRoot": false,
      "uuid": "31d3171d-11ab-4be4-9b31-1a0993b4ff43",
      "parentUUID": "256ddc2f-c4cc-46cb-b579-fe56ff48190d",
      "skipped": false
    },
    {
      "title": "should be a tcomb type",
      "fullTitle": "The PatchesType object should be a tcomb type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t.Type.is(PatchesType).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "fedb13f4-0a81-4e24-b309-8aceb6be7085",
      "parentUUID": "c29a9815-aaf6-41f7-8623-1e739b4804ef",
      "skipped": false
    },
    {
      "title": "should match valid JSON patches",
      "fullTitle": "The PatchesType object should match valid JSON patches",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> validPatches_0 = [];\n<span class=\"hljs-keyword\">var</span> validPatches_1 = jp.compare({a: <span class=\"hljs-number\">1</span>}, {b: <span class=\"hljs-number\">1</span>});\nt.validate(validPatches_0, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">true</span>);\nt.validate(validPatches_1, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "d69df22e-5a88-427c-b3e5-664d954d2248",
      "parentUUID": "c29a9815-aaf6-41f7-8623-1e739b4804ef",
      "skipped": false
    },
    {
      "title": "should not match invalid JSON patches",
      "fullTitle": "The PatchesType object should not match invalid JSON patches",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> invalidPatches = [{a: <span class=\"hljs-number\">2</span>}];\nt.validate(invalidPatches, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "d423e75f-b81d-4a73-aec4-8eab219caeaa",
      "parentUUID": "c29a9815-aaf6-41f7-8623-1e739b4804ef",
      "skipped": false
    },
    {
      "title": "should generate a random 16-bytes string (32 characters long)",
      "fullTitle": "The randomId function should generate a random 16-bytes string (32 characters long)",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> string = randomId();\nstring.should.be.a.String;\nstring.length.should.equal(<span class=\"hljs-number\">32</span>);",
      "isRoot": false,
      "uuid": "7b08f619-8602-499a-bf6d-c2b1c374e897",
      "parentUUID": "0490df10-5d61-4b70-a290-7efb1e8f15a3",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The insert method should return a promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = methods.insert();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "e3d197e6-f807-4c88-9e3b-5801cd236ac9",
      "parentUUID": "315e19ee-1435-4d47-963a-f7bd376bb23d",
      "skipped": false
    },
    {
      "title": "should run validation insert rules",
      "fullTitle": "The insert method should run validation insert rules",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy()\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"insert\"</span>);\n    });",
      "isRoot": false,
      "uuid": "6e20ea87-5041-4599-9bdc-aa4aea9b67bb",
      "parentUUID": "315e19ee-1435-4d47-963a-f7bd376bb23d",
      "skipped": false
    },
    {
      "title": "should give the document a random _id if it doesn't have one",
      "fullTitle": "The insert method should give the document a random _id if it doesn't have one",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        insert: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> insertedDocument = collection.db.insert.firstCall.args[<span class=\"hljs-number\">0</span>];\n        insertedDocument._id.should.be.a.String;\n        insertedDocument._id.length.should.equal(<span class=\"hljs-number\">32</span>);\n    });",
      "isRoot": false,
      "uuid": "230fccc4-4f3d-468b-b19d-58cb6e7a1c96",
      "parentUUID": "315e19ee-1435-4d47-963a-f7bd376bb23d",
      "skipped": false
    },
    {
      "title": "should call db.insert with the new document",
      "fullTitle": "The insert method should call db.insert with the new document",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        insert: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {_id: <span class=\"hljs-string\">\"_id\"</span>, a: <span class=\"hljs-number\">1</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.db.insert.calledWith({\n            _id: <span class=\"hljs-string\">\"_id\"</span>,\n            a: <span class=\"hljs-number\">1</span>\n        }).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "3670f95f-36ab-4a7c-b2d8-33be56471bce",
      "parentUUID": "315e19ee-1435-4d47-963a-f7bd376bb23d",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `newDocument` is not an object",
      "fullTitle": "The promise returned by the insert method should be rejected if the remote argument `newDocument` is not an object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.insert().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `newDocument` must be an object\"</span>\n});",
      "isRoot": false,
      "uuid": "5f1ced25-353b-4a52-be28-bb3d54b70fbf",
      "parentUUID": "ca7e2243-00d1-4b36-8500-72ed737c1742",
      "skipped": false
    },
    {
      "title": "should be rejected if running validation rules fails",
      "fullTitle": "The promise returned by the insert method should be rejected if running validation rules fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    ))\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {}).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
      "isRoot": false,
      "uuid": "6f886d43-f1cc-46fb-8feb-60fc829b69f6",
      "parentUUID": "ca7e2243-00d1-4b36-8500-72ed737c1742",
      "skipped": false
    },
    {
      "title": "should be rejected if inserting fails",
      "fullTitle": "The promise returned by the insert method should be rejected if inserting fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        insert: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Insert error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {}).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Insert error\"</span>\n});",
      "isRoot": false,
      "uuid": "576d8cdc-6820-424f-9608-a9c28edd9cf0",
      "parentUUID": "ca7e2243-00d1-4b36-8500-72ed737c1742",
      "skipped": false
    },
    {
      "title": "should be resolved with null if nothing fails",
      "fullTitle": "The promise returned by the insert method should be resolved with null if nothing fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        insert: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "f1c39540-d36a-48c0-93ef-d4f90dfbf985",
      "parentUUID": "ca7e2243-00d1-4b36-8500-72ed737c1742",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The remove method should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = methods.remove();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "31cfb9eb-b718-4904-b087-187561cf82e1",
      "parentUUID": "42c46b51-c727-4364-95af-50164dd0f191",
      "skipped": false
    },
    {
      "title": "should run validation remove rules",
      "fullTitle": "The remove method should run validation remove rules",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy(),\n    db: {\n        findOne: R.always(BPromise.resolve({}))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>)\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"remove\"</span>);\n    });",
      "isRoot": false,
      "uuid": "77eb1292-caf8-46ed-ad2f-43774d6a34d2",
      "parentUUID": "42c46b51-c727-4364-95af-50164dd0f191",
      "skipped": false
    },
    {
      "title": "should call db.remove to remove the old document",
      "fullTitle": "The remove method should call db.remove to remove the old document",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        findOne: R.always(BPromise.resolve({_id: <span class=\"hljs-string\">\"_id\"</span>})),\n        remove: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"_id\"</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.db.remove.calledWith({\n            _id: <span class=\"hljs-string\">\"_id\"</span>\n        }).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "7a0427ab-01b2-466e-af94-8ab770eab8b7",
      "parentUUID": "42c46b51-c727-4364-95af-50164dd0f191",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `documentId` is not a string",
      "fullTitle": "The promise returned by the remove method should be rejected if the remote argument `documentId` is not a string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.remove().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>\n});",
      "isRoot": false,
      "uuid": "f37b8e73-ea0a-4fad-a65f-3ccd7ebb87c7",
      "parentUUID": "79dcfd5f-a493-407c-a24a-8869bb0fcfaa",
      "skipped": false
    },
    {
      "title": "should be rejected if no document with the given id is found",
      "fullTitle": "The promise returned by the remove method should be rejected if no document with the given id is found",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    db: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">404</span>,\n    message: <span class=\"hljs-string\">\"Document not found\"</span>\n});",
      "isRoot": false,
      "uuid": "c6fc78de-f976-449e-b86a-0c0b9588c032",
      "parentUUID": "79dcfd5f-a493-407c-a24a-8869bb0fcfaa",
      "skipped": false
    },
    {
      "title": "should be rejected if running validation rules fails",
      "fullTitle": "The promise returned by the remove method should be rejected if running validation rules fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    )),\n    db: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
      "isRoot": false,
      "uuid": "50118a51-dc66-42d3-80fa-cae805c4ea7c",
      "parentUUID": "79dcfd5f-a493-407c-a24a-8869bb0fcfaa",
      "skipped": false
    },
    {
      "title": "should be rejected if removing fails",
      "fullTitle": "The promise returned by the remove method should be rejected if removing fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        findOne: R.always({}),\n        remove: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Remove error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Remove error\"</span>\n});",
      "isRoot": false,
      "uuid": "13c397e8-5e21-4f5d-99fd-0f8b932619f4",
      "parentUUID": "79dcfd5f-a493-407c-a24a-8869bb0fcfaa",
      "skipped": false
    },
    {
      "title": "should be resolved with null if nothing fails",
      "fullTitle": "The promise returned by the remove method should be resolved with null if nothing fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        findOne: R.always({}),\n        remove: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "5911ffde-4443-49ce-ade0-d7a6e69c41b3",
      "parentUUID": "79dcfd5f-a493-407c-a24a-8869bb0fcfaa",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "The update method should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = methods.update();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "1339d4f9-4d71-4882-87e8-6bbd88a9dac9",
      "parentUUID": "fb540e4f-8c5c-45fa-9ce5-65b4f0066366",
      "skipped": false
    },
    {
      "title": "should run validation update rules",
      "fullTitle": "The update method should run validation update rules",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy(),\n    db: {\n        findOne: R.always(BPromise.resolve({}))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, [])\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"update\"</span>);\n    });",
      "isRoot": false,
      "uuid": "178cc88b-11c5-48f7-bfb2-044cc149cd05",
      "parentUUID": "fb540e4f-8c5c-45fa-9ce5-65b4f0066366",
      "skipped": false
    },
    {
      "title": "should call db.update with the updated document",
      "fullTitle": "The update method should call db.update with the updated document",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        findOne: R.always(BPromise.resolve({_id: <span class=\"hljs-string\">\"_id\"</span>})),\n        update: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare({}, {a: <span class=\"hljs-number\">1</span>});\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"_id\"</span>, patches)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.db.update.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.db.update.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql({\n            _id: <span class=\"hljs-string\">\"_id\"</span>\n        });\n        collection.db.update.firstCall.args[<span class=\"hljs-number\">1</span>].should.eql({\n            $set: {\n                a: <span class=\"hljs-number\">1</span>\n            }\n        });\n    });",
      "isRoot": false,
      "uuid": "223500a1-8d14-482f-8edb-9b2f1513b2e3",
      "parentUUID": "fb540e4f-8c5c-45fa-9ce5-65b4f0066366",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `documentId` is not a string",
      "fullTitle": "The promise returned by the update method should be rejected if the remote argument `documentId` is not a string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.update().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>\n});",
      "isRoot": false,
      "uuid": "9b1f948f-5731-4c68-833e-4859906f9d29",
      "parentUUID": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `patches` is not an array of patches",
      "fullTitle": "The promise returned by the update method should be rejected if the remote argument `patches` is not an array of patches",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.update(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"Second argument `patches` must be an array of JSON patches\"</span>\n});",
      "isRoot": false,
      "uuid": "53e506e8-f9fd-4662-bdbc-6902892e16da",
      "parentUUID": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
      "skipped": false
    },
    {
      "title": "should be rejected if no document with the given id is found",
      "fullTitle": "The promise returned by the update method should be rejected if no document with the given id is found",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    db: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, []).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">404</span>,\n    message: <span class=\"hljs-string\">\"Document not found\"</span>\n});",
      "isRoot": false,
      "uuid": "85901dba-cd30-4522-9ba5-7aff1a38e62b",
      "parentUUID": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
      "skipped": false
    },
    {
      "title": "should be rejected if running validation rules fails",
      "fullTitle": "The promise returned by the update method should be rejected if running validation rules fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    )),\n    db: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, []).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
      "isRoot": false,
      "uuid": "15001d07-43f8-4a08-8683-416901de4702",
      "parentUUID": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
      "skipped": false
    },
    {
      "title": "should be rejected if updating fails",
      "fullTitle": "The promise returned by the update method should be rejected if updating fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        findOne: R.always({}),\n        update: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Update error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, []).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Update error\"</span>\n});",
      "isRoot": false,
      "uuid": "9ae87781-6584-422b-a3a0-fafc8add751b",
      "parentUUID": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
      "skipped": false
    },
    {
      "title": "should be resolved with null if nothing fails",
      "fullTitle": "The promise returned by the update method should be resolved with null if nothing fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    db: {\n        findOne: R.always({}),\n        update: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, [])\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "37d8df0f-871b-40d3-97b4-9d1736f79d4d",
      "parentUUID": "d1cd445a-9980-4576-9b42-1bfd5ee43044",
      "skipped": false
    }
  ],
  "allFailures": []
}