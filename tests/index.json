{
  "reportTitle": "meteor-wapi-collection",
  "stats": {
    "suites": 23,
    "tests": 65,
    "passes": 65,
    "pending": 0,
    "failures": 0,
    "start": "2015-05-01T20:30:25.676Z",
    "end": "2015-05-01T20:30:25.927Z",
    "duration": 251,
    "testsRegistered": 65,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Unit suite - The addValidationRules method",
        "suites": [],
        "tests": [
          {
            "title": "should add validation rules to the collection instance",
            "fullTitle": "Unit suite - The addValidationRules method should add validation rules to the collection instance",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [],\n        update: [],\n        remove: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> insert = sinon.spy();\n<span class=\"hljs-keyword\">var</span> update = sinon.spy();\n<span class=\"hljs-keyword\">var</span> remove = sinon.spy();\nCollection.prototype.addValidationRules.call(instance, {\n    insert: insert,\n    update: update,\n    remove: remove\n});\ninstance.validationRules.insert[<span class=\"hljs-number\">0</span>].should.equal(insert);\ninstance.validationRules.update[<span class=\"hljs-number\">0</span>].should.equal(update);\ninstance.validationRules.remove[<span class=\"hljs-number\">0</span>].should.equal(remove);",
            "isRoot": false,
            "uuid": "9adb2add-6831-42b1-893f-74dc103bb6a2",
            "parentUUID": "4dabfc63-60f1-440d-8161-ba9d92e1b5a5",
            "skipped": false
          },
          {
            "title": "should return the collection instance to allow method chaining",
            "fullTitle": "Unit suite - The addValidationRules method should return the collection instance to allow method chaining",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [],\n        update: [],\n        remove: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> insert = sinon.spy();\n<span class=\"hljs-keyword\">var</span> update = sinon.spy();\n<span class=\"hljs-keyword\">var</span> remove = sinon.spy();\n<span class=\"hljs-keyword\">var</span> ret = Collection.prototype.addValidationRules.call(instance, {});\nret.should.equal(instance);",
            "isRoot": false,
            "uuid": "675ddaea-9060-4fb2-80cf-4e46386c9bba",
            "parentUUID": "4dabfc63-60f1-440d-8161-ba9d92e1b5a5",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/collection/addValidationRules.js",
        "uuid": "4dabfc63-60f1-440d-8161-ba9d92e1b5a5",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/collection/addValidationRules.js",
        "passes": [
          "[Circular ~.suites.suites.0.tests.0]",
          "[Circular ~.suites.suites.0.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      {
        "title": "Unit suite - The attachMethods method",
        "suites": [],
        "tests": [
          {
            "title": "should attach methods to the collection's mw instance",
            "fullTitle": "Unit suite - The attachMethods method should attach methods to the collection's mw instance",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    name: <span class=\"hljs-string\">\"elements\"</span>,\n    mw: {\n        methods: sinon.spy()\n    }\n};\nCollection.prototype.attachMethods.call(instance);\n<span class=\"hljs-keyword\">var</span> methods = instance.mw.methods.firstCall.args[<span class=\"hljs-number\">0</span>];\nR.keys(methods).should.eql([\n    <span class=\"hljs-string\">\"/elements/insert\"</span>,\n    <span class=\"hljs-string\">\"/elements/update\"</span>,\n    <span class=\"hljs-string\">\"/elements/remove\"</span>\n]);",
            "isRoot": false,
            "uuid": "db0e09ec-1b84-43e2-b467-593719f9ae5c",
            "parentUUID": "2958f1a3-dd75-448a-a0d9-1233dc6af203",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/collection/attachMethods.js",
        "uuid": "2958f1a3-dd75-448a-a0d9-1233dc6af203",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/collection/attachMethods.js",
        "passes": [
          "[Circular ~.suites.suites.1.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      {
        "title": "Unit suite - The Collection constructor",
        "suites": [],
        "tests": [
          {
            "title": "should save the mw instance, the name, and init the collection instance",
            "fullTitle": "Unit suite - The Collection constructor should save the mw instance, the name, and init the collection instance",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> mw = {};\n<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.mw.should.equal(mw);\nElements.name.should.equal(<span class=\"hljs-string\">\"elements\"</span>);\nCollection.prototype.createDbProxy.called.should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.createDbProxy.calledOn(Elements).should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.attachMethods.called.should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.attachMethods.calledOn(Elements).should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.initValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.initValidationRules.calledOn(Elements).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "169c16f7-30c2-476b-bcfd-dc91a63ffef1",
            "parentUUID": "9c75fe75-8089-4340-98a7-807828a5c8d8",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/collection/constructor.js",
        "uuid": "9c75fe75-8089-4340-98a7-807828a5c8d8",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/collection/constructor.js",
        "passes": [
          "[Circular ~.suites.suites.2.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "Unit suite - The createDbProxy method",
        "suites": [],
        "tests": [
          {
            "title": "should create the dbCollection proxy as a property of to the collection instance",
            "fullTitle": "Unit suite - The createDbProxy method should create the dbCollection proxy as a property of to the collection instance",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    name: <span class=\"hljs-string\">\"elements\"</span>,\n    mw: {\n        db: {\n            collection: R.always({\n                findOne: R.always(),\n                insert: R.always(),\n                update: R.always(),\n                remove: R.always()\n            })\n        }\n    }\n};\nCollection.prototype.createDbProxy.call(instance);\ninstance.dbCollection.should.be.a.Object;\ninstance.dbCollection.findOne.should.be.a.Function;\ninstance.dbCollection.insert.should.be.a.Function;\ninstance.dbCollection.update.should.be.a.Function;\ninstance.dbCollection.remove.should.be.a.Function;",
            "isRoot": false,
            "uuid": "bfb1ec5c-eb7f-4ab3-a70b-9cc8a8ff750c",
            "parentUUID": "380a4497-e0d4-4bd9-a355-d740f0474de2",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/collection/createDbProxy.js",
        "uuid": "380a4497-e0d4-4bd9-a355-d740f0474de2",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/collection/createDbProxy.js",
        "passes": [
          "[Circular ~.suites.suites.3.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      {
        "title": "Unit suite - The initValidationRules method",
        "suites": [],
        "tests": [
          {
            "title": "should create the validationRules store as a property of to the collection instance",
            "fullTitle": "Unit suite - The initValidationRules method should create the validationRules store as a property of to the collection instance",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> instance = {};\nCollection.prototype.initValidationRules.call(instance);\ninstance.validationRules.should.eql({\n    insert: [],\n    update: [],\n    remove: []\n});",
            "isRoot": false,
            "uuid": "5bfddfda-5347-4b41-b67f-31d12204305b",
            "parentUUID": "7a62778f-4194-4f32-b696-eafac74f74da",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/collection/initValidationRules.js.js",
        "uuid": "7a62778f-4194-4f32-b696-eafac74f74da",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/collection/initValidationRules.js.js",
        "passes": [
          "[Circular ~.suites.suites.4.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Unit suite - The runValidationRules method",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "Unit suite - The runValidationRules method should return a promise",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: []\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, {}, {})\n    .should.be.a.Promise;",
            "isRoot": false,
            "uuid": "c8c8af4f-1e1d-4e40-9142-30d9e6ed5984",
            "parentUUID": "211a2d88-de49-4cea-8b3a-de67ee76e295",
            "skipped": false
          },
          {
            "title": "should run all validation rules for the specified method",
            "fullTitle": "Unit suite - The runValidationRules method should run all validation rules for the specified method",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> rule_0 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> rule_1 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> rule_2 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [rule_0, rule_1, rule_2]\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, {}, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        rule_0.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        rule_1.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        rule_2.called.should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "e218fe6f-e5da-4db7-b6a5-658b60ede5b5",
            "parentUUID": "211a2d88-de49-4cea-8b3a-de67ee76e295",
            "skipped": false
          },
          {
            "title": "should call rules with the correct context and arguments",
            "fullTitle": "Unit suite - The runValidationRules method should call rules with the correct context and arguments",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> insertRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> updateRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> removeRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [insertRule],\n        update: [updateRule],\n        remove: [removeRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> context = {context: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> oldDocument = {oldDocument: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> newDocument = {newDocument: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> insertResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, newDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        insertRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        insertRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">1</span>);\n        insertRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(newDocument);\n    });\n<span class=\"hljs-keyword\">var</span> updateResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"update\"</span>, oldDocument, newDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        updateRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        updateRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">2</span>);\n        updateRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(oldDocument);\n        updateRule.firstCall.args[<span class=\"hljs-number\">1</span>].should.eql(newDocument);\n    });\n<span class=\"hljs-keyword\">var</span> removeResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"remove\"</span>, oldDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        removeRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        removeRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">1</span>);\n        removeRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(oldDocument);\n    });\n<span class=\"hljs-keyword\">return</span> BPromise.all([\n    insertResult,\n    updateResult,\n    removeResult\n]);",
            "isRoot": false,
            "uuid": "feb9bfec-15af-4c26-8808-2a498c6288f6",
            "parentUUID": "211a2d88-de49-4cea-8b3a-de67ee76e295",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/collection/runValidationRules.js",
        "uuid": "211a2d88-de49-4cea-8b3a-de67ee76e295",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/collection/runValidationRules.js",
        "passes": [
          "[Circular ~.suites.suites.5.tests.0]",
          "[Circular ~.suites.suites.5.tests.1]",
          "[Circular ~.suites.suites.5.tests.2]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 6
      },
      {
        "title": "Unit suite - The promise returned by the runValidationRules method",
        "suites": [],
        "tests": [
          {
            "title": "should be fulfilled if all validation rules return either a value or an eventually fulfilled promise",
            "fullTitle": "Unit suite - The promise returned by the runValidationRules method should be fulfilled if all validation rules return either a value or an eventually fulfilled promise",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> rule_0 = sinon.stub().returns(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">var</span> rule_1 = sinon.stub().returns(<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-keyword\">var</span> rule_2 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [rule_0, rule_1, rule_2]\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.fulfilled;",
            "isRoot": false,
            "uuid": "5704f004-18c6-43e3-8ac2-a55e18c05a07",
            "parentUUID": "3c309032-33c0-435d-a0a0-d3428b197182",
            "skipped": false
          },
          {
            "title": "should be rejected if any of the validation rules either throws or returns an eventually rejected promise",
            "fullTitle": "Unit suite - The promise returned by the runValidationRules method should be rejected if any of the validation rules either throws or returns an eventually rejected promise",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> goodRule = sinon.stub().returns(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">var</span> badRule = sinon.stub().throws(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>());\n<span class=\"hljs-keyword\">var</span> eventuallyBadRule = sinon.stub().returns(BPromise.reject());\n<span class=\"hljs-keyword\">var</span> instance_0 = {\n    validationRules: {\n        insert: [goodRule, badRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> rejection_0 = Collection.prototype.runValidationRules\n    .call(instance_0, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.rejected;\n<span class=\"hljs-keyword\">var</span> instance_1 = {\n    validationRules: {\n        insert: [goodRule, eventuallyBadRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> rejection_1 = Collection.prototype.runValidationRules\n    .call(instance_1, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.rejected;\n<span class=\"hljs-keyword\">return</span> BPromise.all([rejection_0, rejection_1]);",
            "isRoot": false,
            "uuid": "71b7b6de-b539-4978-b8e2-c37b059edda0",
            "parentUUID": "3c309032-33c0-435d-a0a0-d3428b197182",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/collection/runValidationRules.js",
        "uuid": "3c309032-33c0-435d-a0a0-d3428b197182",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/collection/runValidationRules.js",
        "passes": [
          "[Circular ~.suites.suites.6.tests.0]",
          "[Circular ~.suites.suites.6.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 4
      },
      {
        "title": "Unit suite - The insert method",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "Unit suite - The insert method should return a promise",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> promise = methods.insert();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
            "isRoot": false,
            "uuid": "12ff7015-d60a-4aef-a961-b14a6e2406c0",
            "parentUUID": "f11f02af-fd02-4deb-8a9b-9b248987495d",
            "skipped": false
          },
          {
            "title": "should run validation insert rules",
            "fullTitle": "Unit suite - The insert method should run validation insert rules",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy()\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"insert\"</span>);\n    });",
            "isRoot": false,
            "uuid": "3508203b-4a42-445c-bbd4-dc4f57b00092",
            "parentUUID": "f11f02af-fd02-4deb-8a9b-9b248987495d",
            "skipped": false
          },
          {
            "title": "should give the document a random _id if it doesn't have one",
            "fullTitle": "Unit suite - The insert method should give the document a random _id if it doesn't have one",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> insertedDocument = collection.dbCollection.insert.firstCall.args[<span class=\"hljs-number\">0</span>];\n        insertedDocument._id.should.be.a.String;\n        insertedDocument._id.length.should.equal(<span class=\"hljs-number\">32</span>);\n    });",
            "isRoot": false,
            "uuid": "d3bbf8d1-041d-4a30-9890-b005b6de089f",
            "parentUUID": "f11f02af-fd02-4deb-8a9b-9b248987495d",
            "skipped": false
          },
          {
            "title": "should call dbCollection.insert with the new document",
            "fullTitle": "Unit suite - The insert method should call dbCollection.insert with the new document",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {_id: <span class=\"hljs-string\">\"_id\"</span>, a: <span class=\"hljs-number\">1</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.dbCollection.insert.calledWith({\n            _id: <span class=\"hljs-string\">\"_id\"</span>,\n            a: <span class=\"hljs-number\">1</span>\n        }).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "360a0087-c80d-402d-8b2c-a44d09970e41",
            "parentUUID": "f11f02af-fd02-4deb-8a9b-9b248987495d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/insert.js",
        "uuid": "f11f02af-fd02-4deb-8a9b-9b248987495d",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/methods/insert.js",
        "passes": [
          "[Circular ~.suites.suites.7.tests.0]",
          "[Circular ~.suites.suites.7.tests.1]",
          "[Circular ~.suites.suites.7.tests.2]",
          "[Circular ~.suites.suites.7.tests.3]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 3
      },
      {
        "title": "Unit suite - The promise returned by the insert method",
        "suites": [],
        "tests": [
          {
            "title": "should be rejected if the remote argument `newDocument` is not an object",
            "fullTitle": "Unit suite - The promise returned by the insert method should be rejected if the remote argument `newDocument` is not an object",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> methods.insert().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `newDocument` must be an object\"</span>\n});",
            "isRoot": false,
            "uuid": "3c7aa725-4838-48dd-bcda-abd19b7c7016",
            "parentUUID": "f51b60dd-b09c-4571-b553-cdf8e0973615",
            "skipped": false
          },
          {
            "title": "should be rejected if running validation rules fails",
            "fullTitle": "Unit suite - The promise returned by the insert method should be rejected if running validation rules fails",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    ))\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {}).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
            "isRoot": false,
            "uuid": "d2c6cf7d-6cf2-4eaf-b39e-8095eb352d6d",
            "parentUUID": "f51b60dd-b09c-4571-b553-cdf8e0973615",
            "skipped": false
          },
          {
            "title": "should be rejected if inserting fails",
            "fullTitle": "Unit suite - The promise returned by the insert method should be rejected if inserting fails",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Insert error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {}).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Insert error\"</span>\n});",
            "isRoot": false,
            "uuid": "c5a67760-3755-4b1b-a241-0489843b31ff",
            "parentUUID": "f51b60dd-b09c-4571-b553-cdf8e0973615",
            "skipped": false
          },
          {
            "title": "should be resolved with null if nothing fails",
            "fullTitle": "Unit suite - The promise returned by the insert method should be resolved with null if nothing fails",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "2acebf32-cc50-474e-b857-781a4cc21945",
            "parentUUID": "f51b60dd-b09c-4571-b553-cdf8e0973615",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/insert.js",
        "uuid": "f51b60dd-b09c-4571-b553-cdf8e0973615",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/methods/insert.js",
        "passes": [
          "[Circular ~.suites.suites.8.tests.0]",
          "[Circular ~.suites.suites.8.tests.1]",
          "[Circular ~.suites.suites.8.tests.2]",
          "[Circular ~.suites.suites.8.tests.3]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      {
        "title": "Unit suite - The remove method",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "Unit suite - The remove method should return a promise",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> promise = methods.remove();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
            "isRoot": false,
            "uuid": "c34d38f7-0096-489b-9db1-53af42987832",
            "parentUUID": "cba2068e-dd62-46bd-ba38-86a1cf01bc3f",
            "skipped": false
          },
          {
            "title": "should run validation remove rules",
            "fullTitle": "Unit suite - The remove method should run validation remove rules",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy(),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({}))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>)\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"remove\"</span>);\n    });",
            "isRoot": false,
            "uuid": "67f7ccaf-22bf-4a5f-8110-a9f9bbc0e696",
            "parentUUID": "cba2068e-dd62-46bd-ba38-86a1cf01bc3f",
            "skipped": false
          },
          {
            "title": "should call dbCollection.remove to remove the old document",
            "fullTitle": "Unit suite - The remove method should call dbCollection.remove to remove the old document",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({_id: <span class=\"hljs-string\">\"_id\"</span>})),\n        remove: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"_id\"</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.dbCollection.remove.calledWith({\n            _id: <span class=\"hljs-string\">\"_id\"</span>\n        }).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "024683ff-8a43-4dc5-987b-6152f1221922",
            "parentUUID": "cba2068e-dd62-46bd-ba38-86a1cf01bc3f",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/remove.js",
        "uuid": "cba2068e-dd62-46bd-ba38-86a1cf01bc3f",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/methods/remove.js",
        "passes": [
          "[Circular ~.suites.suites.9.tests.0]",
          "[Circular ~.suites.suites.9.tests.1]",
          "[Circular ~.suites.suites.9.tests.2]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      {
        "title": "Unit suite - The promise returned by the remove method",
        "suites": [],
        "tests": [
          {
            "title": "should be rejected if the remote argument `documentId` is not a string",
            "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if the remote argument `documentId` is not a string",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> methods.remove().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>\n});",
            "isRoot": false,
            "uuid": "99cfa156-cbab-4b50-9e1b-6f1c777adfa7",
            "parentUUID": "492a6893-a77b-41d0-99bf-db3541d1583f",
            "skipped": false
          },
          {
            "title": "should be rejected if no document with the given id is found",
            "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if no document with the given id is found",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">404</span>,\n    message: <span class=\"hljs-string\">\"Document not found\"</span>\n});",
            "isRoot": false,
            "uuid": "3f3aa423-ec98-4756-a799-90efc24bb667",
            "parentUUID": "492a6893-a77b-41d0-99bf-db3541d1583f",
            "skipped": false
          },
          {
            "title": "should be rejected if running validation rules fails",
            "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if running validation rules fails",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    )),\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
            "isRoot": false,
            "uuid": "3f891c96-93e5-4044-b626-2cff27c2c4bf",
            "parentUUID": "492a6893-a77b-41d0-99bf-db3541d1583f",
            "skipped": false
          },
          {
            "title": "should be rejected if removing fails",
            "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if removing fails",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        remove: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Remove error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Remove error\"</span>\n});",
            "isRoot": false,
            "uuid": "d5a76b44-e213-4cdc-9fa6-9a532eb8e644",
            "parentUUID": "492a6893-a77b-41d0-99bf-db3541d1583f",
            "skipped": false
          },
          {
            "title": "should be resolved with null if nothing fails",
            "fullTitle": "Unit suite - The promise returned by the remove method should be resolved with null if nothing fails",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        remove: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "b7c8d495-f4aa-4c6c-8dcf-60de04b7f9ea",
            "parentUUID": "492a6893-a77b-41d0-99bf-db3541d1583f",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/remove.js",
        "uuid": "492a6893-a77b-41d0-99bf-db3541d1583f",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/methods/remove.js",
        "passes": [
          "[Circular ~.suites.suites.10.tests.0]",
          "[Circular ~.suites.suites.10.tests.1]",
          "[Circular ~.suites.suites.10.tests.2]",
          "[Circular ~.suites.suites.10.tests.3]",
          "[Circular ~.suites.suites.10.tests.4]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      {
        "title": "Unit suite - The update method",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "Unit suite - The update method should return a promise",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> promise = methods.update();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
            "isRoot": false,
            "uuid": "f4881e7f-67d2-4ff6-8089-8ac730dc1cbd",
            "parentUUID": "94c52b4a-f1b0-4fe1-8d92-b94965b56d81",
            "skipped": false
          },
          {
            "title": "should run validation update rules",
            "fullTitle": "Unit suite - The update method should run validation update rules",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy(),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({}))\n    }\n};\n<span class=\"hljs-keyword\">var</span> patches = [{\n    op: <span class=\"hljs-string\">\"add\"</span>,\n    path: <span class=\"hljs-string\">\"/prop\"</span>,\n    value: <span class=\"hljs-string\">\"value\"</span>\n}];\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches)\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"update\"</span>);\n    });",
            "isRoot": false,
            "uuid": "409ded20-75fb-4d27-b14b-059872291dbb",
            "parentUUID": "94c52b4a-f1b0-4fe1-8d92-b94965b56d81",
            "skipped": false
          },
          {
            "title": "should call dbCollection.update with the updated document",
            "fullTitle": "Unit suite - The update method should call dbCollection.update with the updated document",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({_id: <span class=\"hljs-string\">\"_id\"</span>})),\n        update: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare({}, {a: <span class=\"hljs-number\">1</span>});\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"_id\"</span>, patches)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.dbCollection.update.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.dbCollection.update.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql({\n            _id: <span class=\"hljs-string\">\"_id\"</span>\n        });\n        collection.dbCollection.update.firstCall.args[<span class=\"hljs-number\">1</span>].should.eql({\n            $set: {\n                a: <span class=\"hljs-number\">1</span>\n            }\n        });\n    });",
            "isRoot": false,
            "uuid": "754a487e-5e71-4a26-8e89-4aa0318b5d26",
            "parentUUID": "94c52b4a-f1b0-4fe1-8d92-b94965b56d81",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/update.js",
        "uuid": "94c52b4a-f1b0-4fe1-8d92-b94965b56d81",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/methods/update.js",
        "passes": [
          "[Circular ~.suites.suites.11.tests.0]",
          "[Circular ~.suites.suites.11.tests.1]",
          "[Circular ~.suites.suites.11.tests.2]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 3
      },
      {
        "title": "Unit suite - The promise returned by the update method",
        "suites": [],
        "tests": [
          {
            "title": "should be rejected if the remote argument `documentId` is not a string",
            "fullTitle": "Unit suite - The promise returned by the update method should be rejected if the remote argument `documentId` is not a string",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> methods.update().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>\n});",
            "isRoot": false,
            "uuid": "4de26203-ca81-4e6e-825b-d2bc89f1aaac",
            "parentUUID": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
            "skipped": false
          },
          {
            "title": "should be rejected if the remote argument `patches` is not an array of patches",
            "fullTitle": "Unit suite - The promise returned by the update method should be rejected if the remote argument `patches` is not an array of patches",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> methods.update(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"Second argument `patches` must be an array of JSON patches\"</span>\n});",
            "isRoot": false,
            "uuid": "cf54fee0-27c1-4450-9658-5ebcbb3c93ba",
            "parentUUID": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
            "skipped": false
          },
          {
            "title": "should be rejected if no document with the given id is found",
            "fullTitle": "Unit suite - The promise returned by the update method should be rejected if no document with the given id is found",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">404</span>,\n    message: <span class=\"hljs-string\">\"Document not found\"</span>\n});",
            "isRoot": false,
            "uuid": "d04afc90-92d1-4c67-953f-eb54d5257bdb",
            "parentUUID": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
            "skipped": false
          },
          {
            "title": "should be rejected if running validation rules fails",
            "fullTitle": "Unit suite - The promise returned by the update method should be rejected if running validation rules fails",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    )),\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
            "isRoot": false,
            "uuid": "f3773608-02f8-4687-bb1c-b6485a6a8127",
            "parentUUID": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
            "skipped": false
          },
          {
            "title": "should be rejected if updating fails",
            "fullTitle": "Unit suite - The promise returned by the update method should be rejected if updating fails",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        update: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Update error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Update error\"</span>\n});",
            "isRoot": false,
            "uuid": "fb4e6f53-f1d0-403e-a66f-d458b3864e34",
            "parentUUID": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
            "skipped": false
          },
          {
            "title": "should be resolved with null if nothing fails",
            "fullTitle": "Unit suite - The promise returned by the update method should be resolved with null if nothing fails",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        update: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "422ef4e5-0e65-4b95-966c-9d80c73c845a",
            "parentUUID": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/update.js",
        "uuid": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/methods/update.js",
        "passes": [
          "[Circular ~.suites.suites.12.tests.0]",
          "[Circular ~.suites.suites.12.tests.1]",
          "[Circular ~.suites.suites.12.tests.2]",
          "[Circular ~.suites.suites.12.tests.3]",
          "[Circular ~.suites.suites.12.tests.4]",
          "[Circular ~.suites.suites.12.tests.5]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 3
      },
      {
        "title": "Unit suite - The applyPatches function",
        "suites": [],
        "tests": [
          {
            "title": "should apply the supplied set of patches to the supplied object",
            "fullTitle": "Unit suite - The applyPatches function should apply the supplied set of patches to the supplied object",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> oldObj = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = {\n    a: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare(oldObj, newObj);\n<span class=\"hljs-keyword\">var</span> patchedObj = applyPatches(oldObj, patches);\npatchedObj.should.eql(newObj);",
            "isRoot": false,
            "uuid": "48ed50e7-01e9-4368-82a7-cd60823ddbc2",
            "parentUUID": "041b1a20-ed76-4300-b226-ff42d8279783",
            "skipped": false
          },
          {
            "title": "should not mutate the object to which it applies patches",
            "fullTitle": "Unit suite - The applyPatches function should not mutate the object to which it applies patches",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> oldObj = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> oldObjClone = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = {\n    a: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare(oldObj, newObj);\napplyPatches(oldObj, patches);\noldObj.should.eql(oldObjClone);",
            "isRoot": false,
            "uuid": "acb8bbb6-3ea1-45db-9a6a-8bb31fb43d64",
            "parentUUID": "041b1a20-ed76-4300-b226-ff42d8279783",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/apply-patches.js",
        "uuid": "041b1a20-ed76-4300-b226-ff42d8279783",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/apply-patches.js",
        "passes": [
          "[Circular ~.suites.suites.13.tests.0]",
          "[Circular ~.suites.suites.13.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Unit suite - The argMatches function",
        "suites": [],
        "tests": [
          {
            "title": "should return true the argument is of the correct type",
            "fullTitle": "Unit suite - The argMatches function should return true the argument is of the correct type",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "argMatches(t.Str, <span class=\"hljs-string\">\"I'm a string\"</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "591e8769-bcd3-4466-baa9-200d3a80e77f",
            "parentUUID": "d98c9bf1-9c3a-4d4e-b019-ce2700900684",
            "skipped": false
          },
          {
            "title": "should throw an MW.Error if the argument is of the incorrect type",
            "fullTitle": "Unit suite - The argMatches function should throw an MW.Error if the argument is of the incorrect type",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "argMatches(t.Num, <span class=\"hljs-string\">\"I'm a string, not a number\"</span>).should.equal(<span class=\"hljs-literal\">false</span>);",
            "isRoot": false,
            "uuid": "4097de22-9551-44d2-af9b-2ffd8c5e20de",
            "parentUUID": "d98c9bf1-9c3a-4d4e-b019-ce2700900684",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/arg-matches.js",
        "uuid": "d98c9bf1-9c3a-4d4e-b019-ce2700900684",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/arg-matches.js",
        "passes": [
          "[Circular ~.suites.suites.14.tests.0]",
          "[Circular ~.suites.suites.14.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Unit suite - The ensure function",
        "suites": [],
        "tests": [
          {
            "title": "should not throw if the condition is truthy",
            "fullTitle": "Unit suite - The ensure function should not throw if the condition is truthy",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> peacefulFella = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    ensure(error, <span class=\"hljs-literal\">true</span>);\n};\npeacefulFella.should.not.throw();",
            "isRoot": false,
            "uuid": "8ba750db-d06c-4352-93ff-004eecdaa69a",
            "parentUUID": "1adf6777-ff56-4eb5-b19c-3dc36ceb1bc4",
            "skipped": false
          },
          {
            "title": "should throw if the condition is falsy",
            "fullTitle": "Unit suite - The ensure function should throw if the condition is falsy",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> troublemaker = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    ensure(error, <span class=\"hljs-literal\">false</span>);\n};\ntroublemaker.should.throw(<span class=\"hljs-built_in\">Error</span>);",
            "isRoot": false,
            "uuid": "1b1bc9ec-92c9-49de-acdc-42bfc07faf77",
            "parentUUID": "1adf6777-ff56-4eb5-b19c-3dc36ceb1bc4",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/ensure.js",
        "uuid": "1adf6777-ff56-4eb5-b19c-3dc36ceb1bc4",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/ensure.js",
        "passes": [
          "[Circular ~.suites.suites.15.tests.0]",
          "[Circular ~.suites.suites.15.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Unit suite - The getOldDocument function",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "Unit suite - The getOldDocument function should return a promise",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.a.Promise;",
            "isRoot": false,
            "uuid": "0e8c2b47-506b-4a5f-9152-007642c444ce",
            "parentUUID": "f3e1d07b-bba4-4d34-a840-26a9552db720",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/get-old-document.js",
        "uuid": "f3e1d07b-bba4-4d34-a840-26a9552db720",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/get-old-document.js",
        "passes": [
          "[Circular ~.suites.suites.16.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Unit suite - The promise returned by the getOldDocument function",
        "suites": [],
        "tests": [
          {
            "title": "should be fulfilled if a document is found",
            "fullTitle": "Unit suite - The promise returned by the getOldDocument function should be fulfilled if a document is found",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.fulfilledWith({});",
            "isRoot": false,
            "uuid": "d78d6769-5e4f-49b7-91bd-7da43e7d410e",
            "parentUUID": "c9cdae59-26e6-4355-ab39-f6a8f7583af5",
            "skipped": false
          },
          {
            "title": "should be rejected with a MW.Error if no document is found",
            "fullTitle": "Unit suite - The promise returned by the getOldDocument function should be rejected with a MW.Error if no document is found",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.rejectedWith(MW.Error);",
            "isRoot": false,
            "uuid": "5da92f13-cb0d-4e1c-8d37-2b4edd3a3660",
            "parentUUID": "c9cdae59-26e6-4355-ab39-f6a8f7583af5",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/get-old-document.js",
        "uuid": "c9cdae59-26e6-4355-ab39-f6a8f7583af5",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/get-old-document.js",
        "passes": [
          "[Circular ~.suites.suites.17.tests.0]",
          "[Circular ~.suites.suites.17.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Unit suite - The PatchesType object",
        "suites": [],
        "tests": [
          {
            "title": "should be a tcomb type",
            "fullTitle": "Unit suite - The PatchesType object should be a tcomb type",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "t.Type.is(PatchesType).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "7aeb5a4b-a28d-4321-87bc-651804799122",
            "parentUUID": "1f94b530-eb51-4e86-b11c-0ab00f9d3a85",
            "skipped": false
          },
          {
            "title": "should match valid JSON patches, unless they're an empty array",
            "fullTitle": "Unit suite - The PatchesType object should match valid JSON patches, unless they're an empty array",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> validPatches_0 = [{\n    op: <span class=\"hljs-string\">\"add\"</span>,\n    path: <span class=\"hljs-string\">\"/prop\"</span>,\n    value: <span class=\"hljs-string\">\"value\"</span>\n}];\n<span class=\"hljs-keyword\">var</span> validPatches_1 = jp.compare({a: <span class=\"hljs-number\">1</span>}, {b: <span class=\"hljs-number\">1</span>});\nt.validate(validPatches_0, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">true</span>);\nt.validate(validPatches_1, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "d94c0487-45d9-4a25-a618-1100a6f68cb7",
            "parentUUID": "1f94b530-eb51-4e86-b11c-0ab00f9d3a85",
            "skipped": false
          },
          {
            "title": "should not match invalid JSON patches and empty arrays",
            "fullTitle": "Unit suite - The PatchesType object should not match invalid JSON patches and empty arrays",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> invalidPatches_0 = [{a: <span class=\"hljs-number\">2</span>}];\nt.validate(invalidPatches_0, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-keyword\">var</span> invalidPatches_1 = [];\nt.validate(invalidPatches_1, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">false</span>);",
            "isRoot": false,
            "uuid": "fd972c26-e731-47a1-bcbd-c28e0294c38f",
            "parentUUID": "1f94b530-eb51-4e86-b11c-0ab00f9d3a85",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/patches-type.js",
        "uuid": "1f94b530-eb51-4e86-b11c-0ab00f9d3a85",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/patches-type.js",
        "passes": [
          "[Circular ~.suites.suites.18.tests.0]",
          "[Circular ~.suites.suites.18.tests.1]",
          "[Circular ~.suites.suites.18.tests.2]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "Unit suite - The randomId function",
        "suites": [],
        "tests": [
          {
            "title": "should generate a random 16-bytes string (32 characters long)",
            "fullTitle": "Unit suite - The randomId function should generate a random 16-bytes string (32 characters long)",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> string = randomId();\nstring.should.be.a.String;\nstring.length.should.equal(<span class=\"hljs-number\">32</span>);",
            "isRoot": false,
            "uuid": "7291d138-85ea-4dbb-9852-97ffa3e46d50",
            "parentUUID": "b53f103f-bb44-4da0-a384-2fcea03d549e",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/random-id.js",
        "uuid": "b53f103f-bb44-4da0-a384-2fcea03d549e",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/random-id.js",
        "passes": [
          "[Circular ~.suites.suites.19.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Integration suite - Inserting a document",
        "suites": [],
        "tests": [
          {
            "title": "400 on calling the api with the wrong arguments",
            "fullTitle": "Integration suite - Inserting a document 400 on calling the api with the wrong arguments",
            "timedOut": false,
            "duration": 61,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [<span class=\"hljs-string\">\"myDocument\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"First argument `newDocument` must be an object\"</span>});",
            "isRoot": false,
            "uuid": "e1252e1b-3697-4c54-847a-220870d5cde1",
            "parentUUID": "72a527a3-bb7c-42da-87b6-fe053bdf5c43",
            "skipped": false
          },
          {
            "title": "error if validation rules fail [throwing]",
            "fullTitle": "Integration suite - Inserting a document error if validation rules fail [throwing]",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Validation error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"Validation error\"</span>});",
            "isRoot": false,
            "uuid": "0cd05216-528d-4b41-be8b-3efde69a9ed6",
            "parentUUID": "72a527a3-bb7c-42da-87b6-fe053bdf5c43",
            "skipped": false
          },
          {
            "title": "error if validation rules fail [returning an eventually rejected promise]",
            "fullTitle": "Integration suite - Inserting a document error if validation rules fail [returning an eventually rejected promise]",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> BPromise.reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">489</span>, <span class=\"hljs-string\">\"Another validation error\"</span>));\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">489</span>)\n    .expect({error: <span class=\"hljs-string\">\"Another validation error\"</span>});",
            "isRoot": false,
            "uuid": "4e378fb1-5fe6-4da0-a90c-8f54c58e999b",
            "parentUUID": "72a527a3-bb7c-42da-87b6-fe053bdf5c43",
            "skipped": false
          },
          {
            "title": "inserting the document successful (after multiple validation rules pass)",
            "fullTitle": "Integration suite - Inserting a document inserting the document successful (after multiple validation rules pass)",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements\n    .addValidationRules({\n        insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n    })\n    .addValidationRules({\n        insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.resolve(<span class=\"hljs-literal\">null</span>);\n        }\n    });\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> cursor = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>).find({});\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(cursor.count, cursor)();\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(count)</span> </span>{\n        count.should.equal(<span class=\"hljs-number\">1</span>);\n    });",
            "isRoot": false,
            "uuid": "a96501c9-da12-4ccf-8394-14ab9dbe9b33",
            "parentUUID": "72a527a3-bb7c-42da-87b6-fe053bdf5c43",
            "skipped": false
          },
          {
            "title": "automatic assignment of a string _id",
            "fullTitle": "Integration suite - Inserting a document automatic assignment of a string _id",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> collection = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>);\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(collection.findOne, collection)({});\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(element)</span> </span>{\n        element._id.should.be.a.String;\n        element._id.length.should.equal(<span class=\"hljs-number\">32</span>);\n    });",
            "isRoot": false,
            "uuid": "4fd2abbd-ed1d-4c4f-980c-16787ad55fb3",
            "parentUUID": "72a527a3-bb7c-42da-87b6-fe053bdf5c43",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/integration/insert.js",
        "uuid": "72a527a3-bb7c-42da-87b6-fe053bdf5c43",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/integration/insert.js",
        "passes": [
          "[Circular ~.suites.suites.20.tests.0]",
          "[Circular ~.suites.suites.20.tests.1]",
          "[Circular ~.suites.suites.20.tests.2]",
          "[Circular ~.suites.suites.20.tests.3]",
          "[Circular ~.suites.suites.20.tests.4]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 85
      },
      {
        "title": "Integration suite - Removing a document",
        "suites": [],
        "tests": [
          {
            "title": "400 on calling the api with the wrong arguments",
            "fullTitle": "Integration suite - Removing a document 400 on calling the api with the wrong arguments",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>});",
            "isRoot": false,
            "uuid": "35bb7146-9dee-4a56-bf97-adfe314e24d4",
            "parentUUID": "4836db2d-f43b-43c7-b3f5-07323c98e19f",
            "skipped": false
          },
          {
            "title": "404 on document not found",
            "fullTitle": "Integration suite - Removing a document 404 on document not found",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"idNotInDatabase\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">404</span>)\n    .expect({error: <span class=\"hljs-string\">\"Document not found\"</span>});",
            "isRoot": false,
            "uuid": "d7f78845-4ac3-4d4a-a845-3745924b36dc",
            "parentUUID": "4836db2d-f43b-43c7-b3f5-07323c98e19f",
            "skipped": false
          },
          {
            "title": "error if validation rules fail [throwing]",
            "fullTitle": "Integration suite - Removing a document error if validation rules fail [throwing]",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Validation error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"Validation error\"</span>});",
            "isRoot": false,
            "uuid": "e5453e76-8ea5-49ff-abee-056186715d54",
            "parentUUID": "4836db2d-f43b-43c7-b3f5-07323c98e19f",
            "skipped": false
          },
          {
            "title": "error if validation rules fail [returning an eventually rejected promise]",
            "fullTitle": "Integration suite - Removing a document error if validation rules fail [returning an eventually rejected promise]",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> BPromise.reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">489</span>, <span class=\"hljs-string\">\"Another validation error\"</span>));\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">489</span>)\n    .expect({error: <span class=\"hljs-string\">\"Another validation error\"</span>});",
            "isRoot": false,
            "uuid": "9876a7c8-6264-47f8-988f-55bb78690401",
            "parentUUID": "4836db2d-f43b-43c7-b3f5-07323c98e19f",
            "skipped": false
          },
          {
            "title": "removing the document successful (after multiple validation rules pass)",
            "fullTitle": "Integration suite - Removing a document removing the document successful (after multiple validation rules pass)",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements\n    .addValidationRules({\n        remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n    })\n    .addValidationRules({\n        remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.resolve(<span class=\"hljs-literal\">null</span>);\n        }\n    });\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> collection = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>);\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(collection.findOne, collection)({\n            _id: <span class=\"hljs-string\">\"elementId\"</span>\n        });\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(element)</span> </span>{\n        (element === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "f01242bb-efff-4382-b573-8ee79cd5f476",
            "parentUUID": "4836db2d-f43b-43c7-b3f5-07323c98e19f",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/integration/remove.js",
        "uuid": "4836db2d-f43b-43c7-b3f5-07323c98e19f",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/integration/remove.js",
        "passes": [
          "[Circular ~.suites.suites.21.tests.0]",
          "[Circular ~.suites.suites.21.tests.1]",
          "[Circular ~.suites.suites.21.tests.2]",
          "[Circular ~.suites.suites.21.tests.3]",
          "[Circular ~.suites.suites.21.tests.4]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 20
      },
      {
        "title": "Integration suite - Updating a document",
        "suites": [],
        "tests": [
          {
            "title": "400 on calling the api with the wrong arguments [first argument]",
            "fullTitle": "Integration suite - Updating a document 400 on calling the api with the wrong arguments [first argument]",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [{}, <span class=\"hljs-string\">\"previous-arg-not-a-string\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>});",
            "isRoot": false,
            "uuid": "ffe5db91-6e29-4a97-9c5f-4c689b285dc2",
            "parentUUID": "419e8c14-28f1-423c-adc2-c3fafeb08922",
            "skipped": false
          },
          {
            "title": "400 on calling the api with the wrong arguments [second argument]",
            "fullTitle": "Integration suite - Updating a document 400 on calling the api with the wrong arguments [second argument]",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"second-arg-not-array-of-patches\"</span>, {}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"Second argument `patches` must be an array of JSON patches\"</span>});",
            "isRoot": false,
            "uuid": "a60da70e-fe0f-4b2b-a176-62b94e5b0080",
            "parentUUID": "419e8c14-28f1-423c-adc2-c3fafeb08922",
            "skipped": false
          },
          {
            "title": "404 on document not found",
            "fullTitle": "Integration suite - Updating a document 404 on document not found",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"idNotInDatabase\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">404</span>)\n    .expect({error: <span class=\"hljs-string\">\"Document not found\"</span>});",
            "isRoot": false,
            "uuid": "0d960033-d60e-470d-abca-aac5413eae6e",
            "parentUUID": "419e8c14-28f1-423c-adc2-c3fafeb08922",
            "skipped": false
          },
          {
            "title": "error if validation rules fail [throwing]",
            "fullTitle": "Integration suite - Updating a document error if validation rules fail [throwing]",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Validation error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"Validation error\"</span>});",
            "isRoot": false,
            "uuid": "d88a2559-b695-498a-b815-c4e02cd74752",
            "parentUUID": "419e8c14-28f1-423c-adc2-c3fafeb08922",
            "skipped": false
          },
          {
            "title": "error if validation rules fail [returning an eventually rejected promise]",
            "fullTitle": "Integration suite - Updating a document error if validation rules fail [returning an eventually rejected promise]",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> BPromise.reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">489</span>, <span class=\"hljs-string\">\"Another validation error\"</span>));\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">489</span>)\n    .expect({error: <span class=\"hljs-string\">\"Another validation error\"</span>});",
            "isRoot": false,
            "uuid": "700d5802-51fc-4328-8d14-0fd46a669243",
            "parentUUID": "419e8c14-28f1-423c-adc2-c3fafeb08922",
            "skipped": false
          },
          {
            "title": "updating the document successful (after multiple validation rules pass)",
            "fullTitle": "Integration suite - Updating a document updating the document successful (after multiple validation rules pass)",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements\n    .addValidationRules({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n    })\n    .addValidationRules({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.resolve(<span class=\"hljs-literal\">null</span>);\n        }\n    });\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> collection = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>);\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(collection.findOne, collection)({\n            _id: <span class=\"hljs-string\">\"elementId\"</span>\n        });\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(element)</span> </span>{\n        element.should.eql({\n            _id: <span class=\"hljs-string\">\"elementId\"</span>,\n            prop: <span class=\"hljs-string\">\"value\"</span>\n        });\n    });",
            "isRoot": false,
            "uuid": "36ad132f-eba4-417e-9836-e149e00c8d67",
            "parentUUID": "419e8c14-28f1-423c-adc2-c3fafeb08922",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/integration/update.js",
        "uuid": "419e8c14-28f1-423c-adc2-c3fafeb08922",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/integration/update.js",
        "passes": [
          "[Circular ~.suites.suites.22.tests.0]",
          "[Circular ~.suites.suites.22.tests.1]",
          "[Circular ~.suites.suites.22.tests.2]",
          "[Circular ~.suites.suites.22.tests.3]",
          "[Circular ~.suites.suites.22.tests.4]",
          "[Circular ~.suites.suites.22.tests.5]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 22
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "0faf4a8e-397b-4b7a-a1fd-5f6c0ba89aac",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should add validation rules to the collection instance",
      "fullTitle": "Unit suite - The addValidationRules method should add validation rules to the collection instance",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [],\n        update: [],\n        remove: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> insert = sinon.spy();\n<span class=\"hljs-keyword\">var</span> update = sinon.spy();\n<span class=\"hljs-keyword\">var</span> remove = sinon.spy();\nCollection.prototype.addValidationRules.call(instance, {\n    insert: insert,\n    update: update,\n    remove: remove\n});\ninstance.validationRules.insert[<span class=\"hljs-number\">0</span>].should.equal(insert);\ninstance.validationRules.update[<span class=\"hljs-number\">0</span>].should.equal(update);\ninstance.validationRules.remove[<span class=\"hljs-number\">0</span>].should.equal(remove);",
      "isRoot": false,
      "uuid": "6466e920-4746-4bf6-a1fc-a761ed6f9ae3",
      "parentUUID": "4dabfc63-60f1-440d-8161-ba9d92e1b5a5",
      "skipped": false
    },
    {
      "title": "should return the collection instance to allow method chaining",
      "fullTitle": "Unit suite - The addValidationRules method should return the collection instance to allow method chaining",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [],\n        update: [],\n        remove: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> insert = sinon.spy();\n<span class=\"hljs-keyword\">var</span> update = sinon.spy();\n<span class=\"hljs-keyword\">var</span> remove = sinon.spy();\n<span class=\"hljs-keyword\">var</span> ret = Collection.prototype.addValidationRules.call(instance, {});\nret.should.equal(instance);",
      "isRoot": false,
      "uuid": "dbc60903-f6fe-4c02-9263-1efa355292ad",
      "parentUUID": "4dabfc63-60f1-440d-8161-ba9d92e1b5a5",
      "skipped": false
    },
    {
      "title": "should attach methods to the collection's mw instance",
      "fullTitle": "Unit suite - The attachMethods method should attach methods to the collection's mw instance",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    name: <span class=\"hljs-string\">\"elements\"</span>,\n    mw: {\n        methods: sinon.spy()\n    }\n};\nCollection.prototype.attachMethods.call(instance);\n<span class=\"hljs-keyword\">var</span> methods = instance.mw.methods.firstCall.args[<span class=\"hljs-number\">0</span>];\nR.keys(methods).should.eql([\n    <span class=\"hljs-string\">\"/elements/insert\"</span>,\n    <span class=\"hljs-string\">\"/elements/update\"</span>,\n    <span class=\"hljs-string\">\"/elements/remove\"</span>\n]);",
      "isRoot": false,
      "uuid": "a0bf8bc5-ffc6-4a13-af7a-c5f008320158",
      "parentUUID": "2958f1a3-dd75-448a-a0d9-1233dc6af203",
      "skipped": false
    },
    {
      "title": "should save the mw instance, the name, and init the collection instance",
      "fullTitle": "Unit suite - The Collection constructor should save the mw instance, the name, and init the collection instance",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = {};\n<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.mw.should.equal(mw);\nElements.name.should.equal(<span class=\"hljs-string\">\"elements\"</span>);\nCollection.prototype.createDbProxy.called.should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.createDbProxy.calledOn(Elements).should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.attachMethods.called.should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.attachMethods.calledOn(Elements).should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.initValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.initValidationRules.calledOn(Elements).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "7d4aab58-7ef9-40f3-b25e-04eebf83c2a0",
      "parentUUID": "9c75fe75-8089-4340-98a7-807828a5c8d8",
      "skipped": false
    },
    {
      "title": "should create the dbCollection proxy as a property of to the collection instance",
      "fullTitle": "Unit suite - The createDbProxy method should create the dbCollection proxy as a property of to the collection instance",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    name: <span class=\"hljs-string\">\"elements\"</span>,\n    mw: {\n        db: {\n            collection: R.always({\n                findOne: R.always(),\n                insert: R.always(),\n                update: R.always(),\n                remove: R.always()\n            })\n        }\n    }\n};\nCollection.prototype.createDbProxy.call(instance);\ninstance.dbCollection.should.be.a.Object;\ninstance.dbCollection.findOne.should.be.a.Function;\ninstance.dbCollection.insert.should.be.a.Function;\ninstance.dbCollection.update.should.be.a.Function;\ninstance.dbCollection.remove.should.be.a.Function;",
      "isRoot": false,
      "uuid": "c2aed760-e317-4c92-b0de-acc1a9633d68",
      "parentUUID": "380a4497-e0d4-4bd9-a355-d740f0474de2",
      "skipped": false
    },
    {
      "title": "should create the validationRules store as a property of to the collection instance",
      "fullTitle": "Unit suite - The initValidationRules method should create the validationRules store as a property of to the collection instance",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {};\nCollection.prototype.initValidationRules.call(instance);\ninstance.validationRules.should.eql({\n    insert: [],\n    update: [],\n    remove: []\n});",
      "isRoot": false,
      "uuid": "ef6d7ead-3fbf-411c-9a1e-89b74cb3cb5a",
      "parentUUID": "7a62778f-4194-4f32-b696-eafac74f74da",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The runValidationRules method should return a promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: []\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, {}, {})\n    .should.be.a.Promise;",
      "isRoot": false,
      "uuid": "935bb8b7-6fa4-4a5a-af15-d79e097d2723",
      "parentUUID": "211a2d88-de49-4cea-8b3a-de67ee76e295",
      "skipped": false
    },
    {
      "title": "should run all validation rules for the specified method",
      "fullTitle": "Unit suite - The runValidationRules method should run all validation rules for the specified method",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> rule_0 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> rule_1 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> rule_2 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [rule_0, rule_1, rule_2]\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, {}, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        rule_0.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        rule_1.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        rule_2.called.should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "a46475f0-cccd-4159-b161-b5cd70fb84fa",
      "parentUUID": "211a2d88-de49-4cea-8b3a-de67ee76e295",
      "skipped": false
    },
    {
      "title": "should call rules with the correct context and arguments",
      "fullTitle": "Unit suite - The runValidationRules method should call rules with the correct context and arguments",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> insertRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> updateRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> removeRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [insertRule],\n        update: [updateRule],\n        remove: [removeRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> context = {context: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> oldDocument = {oldDocument: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> newDocument = {newDocument: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> insertResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, newDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        insertRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        insertRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">1</span>);\n        insertRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(newDocument);\n    });\n<span class=\"hljs-keyword\">var</span> updateResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"update\"</span>, oldDocument, newDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        updateRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        updateRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">2</span>);\n        updateRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(oldDocument);\n        updateRule.firstCall.args[<span class=\"hljs-number\">1</span>].should.eql(newDocument);\n    });\n<span class=\"hljs-keyword\">var</span> removeResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"remove\"</span>, oldDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        removeRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        removeRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">1</span>);\n        removeRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(oldDocument);\n    });\n<span class=\"hljs-keyword\">return</span> BPromise.all([\n    insertResult,\n    updateResult,\n    removeResult\n]);",
      "isRoot": false,
      "uuid": "e7574ff5-958b-4d46-b341-732428f1e92e",
      "parentUUID": "211a2d88-de49-4cea-8b3a-de67ee76e295",
      "skipped": false
    },
    {
      "title": "should be fulfilled if all validation rules return either a value or an eventually fulfilled promise",
      "fullTitle": "Unit suite - The promise returned by the runValidationRules method should be fulfilled if all validation rules return either a value or an eventually fulfilled promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> rule_0 = sinon.stub().returns(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">var</span> rule_1 = sinon.stub().returns(<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-keyword\">var</span> rule_2 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [rule_0, rule_1, rule_2]\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.fulfilled;",
      "isRoot": false,
      "uuid": "778e25e8-d8e6-4dea-b57e-f331b5640329",
      "parentUUID": "3c309032-33c0-435d-a0a0-d3428b197182",
      "skipped": false
    },
    {
      "title": "should be rejected if any of the validation rules either throws or returns an eventually rejected promise",
      "fullTitle": "Unit suite - The promise returned by the runValidationRules method should be rejected if any of the validation rules either throws or returns an eventually rejected promise",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> goodRule = sinon.stub().returns(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">var</span> badRule = sinon.stub().throws(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>());\n<span class=\"hljs-keyword\">var</span> eventuallyBadRule = sinon.stub().returns(BPromise.reject());\n<span class=\"hljs-keyword\">var</span> instance_0 = {\n    validationRules: {\n        insert: [goodRule, badRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> rejection_0 = Collection.prototype.runValidationRules\n    .call(instance_0, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.rejected;\n<span class=\"hljs-keyword\">var</span> instance_1 = {\n    validationRules: {\n        insert: [goodRule, eventuallyBadRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> rejection_1 = Collection.prototype.runValidationRules\n    .call(instance_1, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.rejected;\n<span class=\"hljs-keyword\">return</span> BPromise.all([rejection_0, rejection_1]);",
      "isRoot": false,
      "uuid": "db65087f-a22f-48d0-a7e2-02229d1b4862",
      "parentUUID": "3c309032-33c0-435d-a0a0-d3428b197182",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The insert method should return a promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = methods.insert();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "64234bf4-98d3-4395-8e5d-ffb75a9ca2f2",
      "parentUUID": "f11f02af-fd02-4deb-8a9b-9b248987495d",
      "skipped": false
    },
    {
      "title": "should run validation insert rules",
      "fullTitle": "Unit suite - The insert method should run validation insert rules",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy()\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"insert\"</span>);\n    });",
      "isRoot": false,
      "uuid": "8cf53ac0-9ece-4cb7-9129-ca28c7f654f5",
      "parentUUID": "f11f02af-fd02-4deb-8a9b-9b248987495d",
      "skipped": false
    },
    {
      "title": "should give the document a random _id if it doesn't have one",
      "fullTitle": "Unit suite - The insert method should give the document a random _id if it doesn't have one",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> insertedDocument = collection.dbCollection.insert.firstCall.args[<span class=\"hljs-number\">0</span>];\n        insertedDocument._id.should.be.a.String;\n        insertedDocument._id.length.should.equal(<span class=\"hljs-number\">32</span>);\n    });",
      "isRoot": false,
      "uuid": "ed3e506d-6aaa-4e1b-b9a8-77cb42beccfe",
      "parentUUID": "f11f02af-fd02-4deb-8a9b-9b248987495d",
      "skipped": false
    },
    {
      "title": "should call dbCollection.insert with the new document",
      "fullTitle": "Unit suite - The insert method should call dbCollection.insert with the new document",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {_id: <span class=\"hljs-string\">\"_id\"</span>, a: <span class=\"hljs-number\">1</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.dbCollection.insert.calledWith({\n            _id: <span class=\"hljs-string\">\"_id\"</span>,\n            a: <span class=\"hljs-number\">1</span>\n        }).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "6388a17b-ee0b-476b-8e11-85a4f919a92c",
      "parentUUID": "f11f02af-fd02-4deb-8a9b-9b248987495d",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `newDocument` is not an object",
      "fullTitle": "Unit suite - The promise returned by the insert method should be rejected if the remote argument `newDocument` is not an object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.insert().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `newDocument` must be an object\"</span>\n});",
      "isRoot": false,
      "uuid": "08c1e193-eeba-471c-81f8-d1245be6c6ff",
      "parentUUID": "f51b60dd-b09c-4571-b553-cdf8e0973615",
      "skipped": false
    },
    {
      "title": "should be rejected if running validation rules fails",
      "fullTitle": "Unit suite - The promise returned by the insert method should be rejected if running validation rules fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    ))\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {}).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
      "isRoot": false,
      "uuid": "81373415-dbd5-469a-a206-0944951c6edc",
      "parentUUID": "f51b60dd-b09c-4571-b553-cdf8e0973615",
      "skipped": false
    },
    {
      "title": "should be rejected if inserting fails",
      "fullTitle": "Unit suite - The promise returned by the insert method should be rejected if inserting fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Insert error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {}).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Insert error\"</span>\n});",
      "isRoot": false,
      "uuid": "938cfbdd-6a68-4e40-86c2-36671c7ef22e",
      "parentUUID": "f51b60dd-b09c-4571-b553-cdf8e0973615",
      "skipped": false
    },
    {
      "title": "should be resolved with null if nothing fails",
      "fullTitle": "Unit suite - The promise returned by the insert method should be resolved with null if nothing fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "5be76174-765b-4894-a865-5489c07ff922",
      "parentUUID": "f51b60dd-b09c-4571-b553-cdf8e0973615",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The remove method should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = methods.remove();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "3c9fc642-ac57-43de-9f0f-48b56cef34d2",
      "parentUUID": "cba2068e-dd62-46bd-ba38-86a1cf01bc3f",
      "skipped": false
    },
    {
      "title": "should run validation remove rules",
      "fullTitle": "Unit suite - The remove method should run validation remove rules",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy(),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({}))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>)\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"remove\"</span>);\n    });",
      "isRoot": false,
      "uuid": "f7fb37bc-5dcf-4623-87eb-7cb418e5097f",
      "parentUUID": "cba2068e-dd62-46bd-ba38-86a1cf01bc3f",
      "skipped": false
    },
    {
      "title": "should call dbCollection.remove to remove the old document",
      "fullTitle": "Unit suite - The remove method should call dbCollection.remove to remove the old document",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({_id: <span class=\"hljs-string\">\"_id\"</span>})),\n        remove: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"_id\"</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.dbCollection.remove.calledWith({\n            _id: <span class=\"hljs-string\">\"_id\"</span>\n        }).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "90fb853d-4baf-49f0-aba3-aa1105b41a55",
      "parentUUID": "cba2068e-dd62-46bd-ba38-86a1cf01bc3f",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `documentId` is not a string",
      "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if the remote argument `documentId` is not a string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.remove().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>\n});",
      "isRoot": false,
      "uuid": "600208b2-ed5e-49c6-8c40-38f8f86ec42e",
      "parentUUID": "492a6893-a77b-41d0-99bf-db3541d1583f",
      "skipped": false
    },
    {
      "title": "should be rejected if no document with the given id is found",
      "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if no document with the given id is found",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">404</span>,\n    message: <span class=\"hljs-string\">\"Document not found\"</span>\n});",
      "isRoot": false,
      "uuid": "212882f4-2244-49a8-9528-c2588c9bc75d",
      "parentUUID": "492a6893-a77b-41d0-99bf-db3541d1583f",
      "skipped": false
    },
    {
      "title": "should be rejected if running validation rules fails",
      "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if running validation rules fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    )),\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
      "isRoot": false,
      "uuid": "50a3edcd-8e53-4263-9e81-4354b01e33a2",
      "parentUUID": "492a6893-a77b-41d0-99bf-db3541d1583f",
      "skipped": false
    },
    {
      "title": "should be rejected if removing fails",
      "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if removing fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        remove: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Remove error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Remove error\"</span>\n});",
      "isRoot": false,
      "uuid": "2adf18bb-8939-4f20-9427-2bb4a9678935",
      "parentUUID": "492a6893-a77b-41d0-99bf-db3541d1583f",
      "skipped": false
    },
    {
      "title": "should be resolved with null if nothing fails",
      "fullTitle": "Unit suite - The promise returned by the remove method should be resolved with null if nothing fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        remove: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "5caa6fa8-35da-4cc8-96af-bed4ddf9c794",
      "parentUUID": "492a6893-a77b-41d0-99bf-db3541d1583f",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The update method should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = methods.update();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "d52e0992-5092-4c5e-bb1d-d5abbc7f9a2d",
      "parentUUID": "94c52b4a-f1b0-4fe1-8d92-b94965b56d81",
      "skipped": false
    },
    {
      "title": "should run validation update rules",
      "fullTitle": "Unit suite - The update method should run validation update rules",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy(),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({}))\n    }\n};\n<span class=\"hljs-keyword\">var</span> patches = [{\n    op: <span class=\"hljs-string\">\"add\"</span>,\n    path: <span class=\"hljs-string\">\"/prop\"</span>,\n    value: <span class=\"hljs-string\">\"value\"</span>\n}];\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches)\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"update\"</span>);\n    });",
      "isRoot": false,
      "uuid": "993472e3-cfea-47f3-92dc-94cc561c97a2",
      "parentUUID": "94c52b4a-f1b0-4fe1-8d92-b94965b56d81",
      "skipped": false
    },
    {
      "title": "should call dbCollection.update with the updated document",
      "fullTitle": "Unit suite - The update method should call dbCollection.update with the updated document",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({_id: <span class=\"hljs-string\">\"_id\"</span>})),\n        update: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare({}, {a: <span class=\"hljs-number\">1</span>});\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"_id\"</span>, patches)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.dbCollection.update.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.dbCollection.update.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql({\n            _id: <span class=\"hljs-string\">\"_id\"</span>\n        });\n        collection.dbCollection.update.firstCall.args[<span class=\"hljs-number\">1</span>].should.eql({\n            $set: {\n                a: <span class=\"hljs-number\">1</span>\n            }\n        });\n    });",
      "isRoot": false,
      "uuid": "b37b2a5f-677c-478c-863c-b001a3445b00",
      "parentUUID": "94c52b4a-f1b0-4fe1-8d92-b94965b56d81",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `documentId` is not a string",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if the remote argument `documentId` is not a string",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.update().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>\n});",
      "isRoot": false,
      "uuid": "b7f89109-c619-47c2-837e-e3b445a20501",
      "parentUUID": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `patches` is not an array of patches",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if the remote argument `patches` is not an array of patches",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.update(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"Second argument `patches` must be an array of JSON patches\"</span>\n});",
      "isRoot": false,
      "uuid": "aaa5eaff-43ee-43f2-aec6-114f05fe1ce2",
      "parentUUID": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
      "skipped": false
    },
    {
      "title": "should be rejected if no document with the given id is found",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if no document with the given id is found",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">404</span>,\n    message: <span class=\"hljs-string\">\"Document not found\"</span>\n});",
      "isRoot": false,
      "uuid": "4470c8e5-2fdb-44aa-9b95-af32370801d0",
      "parentUUID": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
      "skipped": false
    },
    {
      "title": "should be rejected if running validation rules fails",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if running validation rules fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    )),\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
      "isRoot": false,
      "uuid": "f4a25fb4-b61a-4bb4-92b0-5990f39ac68d",
      "parentUUID": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
      "skipped": false
    },
    {
      "title": "should be rejected if updating fails",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if updating fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        update: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Update error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Update error\"</span>\n});",
      "isRoot": false,
      "uuid": "45a1ca36-b54c-4ded-b6a1-284b6baa9c7c",
      "parentUUID": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
      "skipped": false
    },
    {
      "title": "should be resolved with null if nothing fails",
      "fullTitle": "Unit suite - The promise returned by the update method should be resolved with null if nothing fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        update: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "d370b547-ad56-4e70-9a1c-be0d0f8c78fa",
      "parentUUID": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
      "skipped": false
    },
    {
      "title": "should apply the supplied set of patches to the supplied object",
      "fullTitle": "Unit suite - The applyPatches function should apply the supplied set of patches to the supplied object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> oldObj = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = {\n    a: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare(oldObj, newObj);\n<span class=\"hljs-keyword\">var</span> patchedObj = applyPatches(oldObj, patches);\npatchedObj.should.eql(newObj);",
      "isRoot": false,
      "uuid": "49f25773-f2be-4a9e-aef9-875f54ce8e21",
      "parentUUID": "041b1a20-ed76-4300-b226-ff42d8279783",
      "skipped": false
    },
    {
      "title": "should not mutate the object to which it applies patches",
      "fullTitle": "Unit suite - The applyPatches function should not mutate the object to which it applies patches",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> oldObj = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> oldObjClone = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = {\n    a: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare(oldObj, newObj);\napplyPatches(oldObj, patches);\noldObj.should.eql(oldObjClone);",
      "isRoot": false,
      "uuid": "706d4c59-5457-432f-b04f-1bbef3abc61e",
      "parentUUID": "041b1a20-ed76-4300-b226-ff42d8279783",
      "skipped": false
    },
    {
      "title": "should return true the argument is of the correct type",
      "fullTitle": "Unit suite - The argMatches function should return true the argument is of the correct type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "argMatches(t.Str, <span class=\"hljs-string\">\"I'm a string\"</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "56636191-457f-4506-963b-e5e911fe1620",
      "parentUUID": "d98c9bf1-9c3a-4d4e-b019-ce2700900684",
      "skipped": false
    },
    {
      "title": "should throw an MW.Error if the argument is of the incorrect type",
      "fullTitle": "Unit suite - The argMatches function should throw an MW.Error if the argument is of the incorrect type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "argMatches(t.Num, <span class=\"hljs-string\">\"I'm a string, not a number\"</span>).should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "71e6cd0d-aaa3-4a04-b842-581ccb392a3f",
      "parentUUID": "d98c9bf1-9c3a-4d4e-b019-ce2700900684",
      "skipped": false
    },
    {
      "title": "should not throw if the condition is truthy",
      "fullTitle": "Unit suite - The ensure function should not throw if the condition is truthy",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> peacefulFella = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    ensure(error, <span class=\"hljs-literal\">true</span>);\n};\npeacefulFella.should.not.throw();",
      "isRoot": false,
      "uuid": "e609d8a7-f08f-4040-850f-cde23f4abe93",
      "parentUUID": "1adf6777-ff56-4eb5-b19c-3dc36ceb1bc4",
      "skipped": false
    },
    {
      "title": "should throw if the condition is falsy",
      "fullTitle": "Unit suite - The ensure function should throw if the condition is falsy",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> troublemaker = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    ensure(error, <span class=\"hljs-literal\">false</span>);\n};\ntroublemaker.should.throw(<span class=\"hljs-built_in\">Error</span>);",
      "isRoot": false,
      "uuid": "50ec09ae-b116-4366-a763-2b0e8cf6aef4",
      "parentUUID": "1adf6777-ff56-4eb5-b19c-3dc36ceb1bc4",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The getOldDocument function should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.a.Promise;",
      "isRoot": false,
      "uuid": "c617a9ba-4aab-4ead-83ee-9e039afebef1",
      "parentUUID": "f3e1d07b-bba4-4d34-a840-26a9552db720",
      "skipped": false
    },
    {
      "title": "should be fulfilled if a document is found",
      "fullTitle": "Unit suite - The promise returned by the getOldDocument function should be fulfilled if a document is found",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.fulfilledWith({});",
      "isRoot": false,
      "uuid": "d993a2d4-a043-4dec-8710-f59c05a93bb0",
      "parentUUID": "c9cdae59-26e6-4355-ab39-f6a8f7583af5",
      "skipped": false
    },
    {
      "title": "should be rejected with a MW.Error if no document is found",
      "fullTitle": "Unit suite - The promise returned by the getOldDocument function should be rejected with a MW.Error if no document is found",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.rejectedWith(MW.Error);",
      "isRoot": false,
      "uuid": "172c8806-c764-4c2e-be5e-34b387da4045",
      "parentUUID": "c9cdae59-26e6-4355-ab39-f6a8f7583af5",
      "skipped": false
    },
    {
      "title": "should be a tcomb type",
      "fullTitle": "Unit suite - The PatchesType object should be a tcomb type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t.Type.is(PatchesType).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "acc6cd72-d1b7-4375-8b64-9f06f4ee8c72",
      "parentUUID": "1f94b530-eb51-4e86-b11c-0ab00f9d3a85",
      "skipped": false
    },
    {
      "title": "should match valid JSON patches, unless they're an empty array",
      "fullTitle": "Unit suite - The PatchesType object should match valid JSON patches, unless they're an empty array",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> validPatches_0 = [{\n    op: <span class=\"hljs-string\">\"add\"</span>,\n    path: <span class=\"hljs-string\">\"/prop\"</span>,\n    value: <span class=\"hljs-string\">\"value\"</span>\n}];\n<span class=\"hljs-keyword\">var</span> validPatches_1 = jp.compare({a: <span class=\"hljs-number\">1</span>}, {b: <span class=\"hljs-number\">1</span>});\nt.validate(validPatches_0, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">true</span>);\nt.validate(validPatches_1, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "ef7afa81-d262-4f54-bbed-74fc31cf3549",
      "parentUUID": "1f94b530-eb51-4e86-b11c-0ab00f9d3a85",
      "skipped": false
    },
    {
      "title": "should not match invalid JSON patches and empty arrays",
      "fullTitle": "Unit suite - The PatchesType object should not match invalid JSON patches and empty arrays",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> invalidPatches_0 = [{a: <span class=\"hljs-number\">2</span>}];\nt.validate(invalidPatches_0, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-keyword\">var</span> invalidPatches_1 = [];\nt.validate(invalidPatches_1, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "0f113a38-08e4-4019-a710-5834615fb594",
      "parentUUID": "1f94b530-eb51-4e86-b11c-0ab00f9d3a85",
      "skipped": false
    },
    {
      "title": "should generate a random 16-bytes string (32 characters long)",
      "fullTitle": "Unit suite - The randomId function should generate a random 16-bytes string (32 characters long)",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> string = randomId();\nstring.should.be.a.String;\nstring.length.should.equal(<span class=\"hljs-number\">32</span>);",
      "isRoot": false,
      "uuid": "52b82c72-6fef-413f-800c-37b191a73041",
      "parentUUID": "b53f103f-bb44-4da0-a384-2fcea03d549e",
      "skipped": false
    },
    {
      "title": "400 on calling the api with the wrong arguments",
      "fullTitle": "Integration suite - Inserting a document 400 on calling the api with the wrong arguments",
      "timedOut": false,
      "duration": 61,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [<span class=\"hljs-string\">\"myDocument\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"First argument `newDocument` must be an object\"</span>});",
      "isRoot": false,
      "uuid": "86516153-7c2e-4d6b-99fe-664239b16f89",
      "parentUUID": "72a527a3-bb7c-42da-87b6-fe053bdf5c43",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [throwing]",
      "fullTitle": "Integration suite - Inserting a document error if validation rules fail [throwing]",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Validation error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"Validation error\"</span>});",
      "isRoot": false,
      "uuid": "2350f679-54f2-43d1-a8d1-d7f99a06055e",
      "parentUUID": "72a527a3-bb7c-42da-87b6-fe053bdf5c43",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [returning an eventually rejected promise]",
      "fullTitle": "Integration suite - Inserting a document error if validation rules fail [returning an eventually rejected promise]",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> BPromise.reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">489</span>, <span class=\"hljs-string\">\"Another validation error\"</span>));\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">489</span>)\n    .expect({error: <span class=\"hljs-string\">\"Another validation error\"</span>});",
      "isRoot": false,
      "uuid": "6fcbe208-40e4-4ab6-8111-ddfd2b0a4cb5",
      "parentUUID": "72a527a3-bb7c-42da-87b6-fe053bdf5c43",
      "skipped": false
    },
    {
      "title": "inserting the document successful (after multiple validation rules pass)",
      "fullTitle": "Integration suite - Inserting a document inserting the document successful (after multiple validation rules pass)",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements\n    .addValidationRules({\n        insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n    })\n    .addValidationRules({\n        insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.resolve(<span class=\"hljs-literal\">null</span>);\n        }\n    });\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> cursor = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>).find({});\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(cursor.count, cursor)();\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(count)</span> </span>{\n        count.should.equal(<span class=\"hljs-number\">1</span>);\n    });",
      "isRoot": false,
      "uuid": "3b657ff4-efba-42fa-a155-3f0cfce3f9c1",
      "parentUUID": "72a527a3-bb7c-42da-87b6-fe053bdf5c43",
      "skipped": false
    },
    {
      "title": "automatic assignment of a string _id",
      "fullTitle": "Integration suite - Inserting a document automatic assignment of a string _id",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> collection = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>);\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(collection.findOne, collection)({});\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(element)</span> </span>{\n        element._id.should.be.a.String;\n        element._id.length.should.equal(<span class=\"hljs-number\">32</span>);\n    });",
      "isRoot": false,
      "uuid": "61725c72-64fa-4580-8933-dc1f70c0fefb",
      "parentUUID": "72a527a3-bb7c-42da-87b6-fe053bdf5c43",
      "skipped": false
    },
    {
      "title": "400 on calling the api with the wrong arguments",
      "fullTitle": "Integration suite - Removing a document 400 on calling the api with the wrong arguments",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>});",
      "isRoot": false,
      "uuid": "020be7c3-6010-459c-96bd-eb3bc22b0e2c",
      "parentUUID": "4836db2d-f43b-43c7-b3f5-07323c98e19f",
      "skipped": false
    },
    {
      "title": "404 on document not found",
      "fullTitle": "Integration suite - Removing a document 404 on document not found",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"idNotInDatabase\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">404</span>)\n    .expect({error: <span class=\"hljs-string\">\"Document not found\"</span>});",
      "isRoot": false,
      "uuid": "847d80d2-d3d3-4e7f-98d8-cd0c95b30fb1",
      "parentUUID": "4836db2d-f43b-43c7-b3f5-07323c98e19f",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [throwing]",
      "fullTitle": "Integration suite - Removing a document error if validation rules fail [throwing]",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Validation error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"Validation error\"</span>});",
      "isRoot": false,
      "uuid": "27f2f731-4ca7-4832-85e6-8ff62cd56e19",
      "parentUUID": "4836db2d-f43b-43c7-b3f5-07323c98e19f",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [returning an eventually rejected promise]",
      "fullTitle": "Integration suite - Removing a document error if validation rules fail [returning an eventually rejected promise]",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> BPromise.reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">489</span>, <span class=\"hljs-string\">\"Another validation error\"</span>));\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">489</span>)\n    .expect({error: <span class=\"hljs-string\">\"Another validation error\"</span>});",
      "isRoot": false,
      "uuid": "39b11945-a138-4d8d-822e-38a8c41e0ebf",
      "parentUUID": "4836db2d-f43b-43c7-b3f5-07323c98e19f",
      "skipped": false
    },
    {
      "title": "removing the document successful (after multiple validation rules pass)",
      "fullTitle": "Integration suite - Removing a document removing the document successful (after multiple validation rules pass)",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements\n    .addValidationRules({\n        remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n    })\n    .addValidationRules({\n        remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.resolve(<span class=\"hljs-literal\">null</span>);\n        }\n    });\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> collection = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>);\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(collection.findOne, collection)({\n            _id: <span class=\"hljs-string\">\"elementId\"</span>\n        });\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(element)</span> </span>{\n        (element === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "58f84b1a-726d-4a02-998f-0876be4d34e8",
      "parentUUID": "4836db2d-f43b-43c7-b3f5-07323c98e19f",
      "skipped": false
    },
    {
      "title": "400 on calling the api with the wrong arguments [first argument]",
      "fullTitle": "Integration suite - Updating a document 400 on calling the api with the wrong arguments [first argument]",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [{}, <span class=\"hljs-string\">\"previous-arg-not-a-string\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>});",
      "isRoot": false,
      "uuid": "1314d01e-a617-425d-a91e-d62668969c4d",
      "parentUUID": "419e8c14-28f1-423c-adc2-c3fafeb08922",
      "skipped": false
    },
    {
      "title": "400 on calling the api with the wrong arguments [second argument]",
      "fullTitle": "Integration suite - Updating a document 400 on calling the api with the wrong arguments [second argument]",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"second-arg-not-array-of-patches\"</span>, {}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"Second argument `patches` must be an array of JSON patches\"</span>});",
      "isRoot": false,
      "uuid": "cf41b70b-bfc2-4c27-b675-811941fb6e46",
      "parentUUID": "419e8c14-28f1-423c-adc2-c3fafeb08922",
      "skipped": false
    },
    {
      "title": "404 on document not found",
      "fullTitle": "Integration suite - Updating a document 404 on document not found",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"idNotInDatabase\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">404</span>)\n    .expect({error: <span class=\"hljs-string\">\"Document not found\"</span>});",
      "isRoot": false,
      "uuid": "ebdf485e-1e95-4046-9e87-5030ecd3b8b5",
      "parentUUID": "419e8c14-28f1-423c-adc2-c3fafeb08922",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [throwing]",
      "fullTitle": "Integration suite - Updating a document error if validation rules fail [throwing]",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Validation error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"Validation error\"</span>});",
      "isRoot": false,
      "uuid": "4cf85a72-b70e-4af0-a085-81046da2a477",
      "parentUUID": "419e8c14-28f1-423c-adc2-c3fafeb08922",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [returning an eventually rejected promise]",
      "fullTitle": "Integration suite - Updating a document error if validation rules fail [returning an eventually rejected promise]",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> BPromise.reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">489</span>, <span class=\"hljs-string\">\"Another validation error\"</span>));\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">489</span>)\n    .expect({error: <span class=\"hljs-string\">\"Another validation error\"</span>});",
      "isRoot": false,
      "uuid": "cd39b541-b560-40da-989a-b32925391419",
      "parentUUID": "419e8c14-28f1-423c-adc2-c3fafeb08922",
      "skipped": false
    },
    {
      "title": "updating the document successful (after multiple validation rules pass)",
      "fullTitle": "Integration suite - Updating a document updating the document successful (after multiple validation rules pass)",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements\n    .addValidationRules({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n    })\n    .addValidationRules({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.resolve(<span class=\"hljs-literal\">null</span>);\n        }\n    });\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> collection = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>);\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(collection.findOne, collection)({\n            _id: <span class=\"hljs-string\">\"elementId\"</span>\n        });\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(element)</span> </span>{\n        element.should.eql({\n            _id: <span class=\"hljs-string\">\"elementId\"</span>,\n            prop: <span class=\"hljs-string\">\"value\"</span>\n        });\n    });",
      "isRoot": false,
      "uuid": "8697114a-32a6-4480-bb9f-b862b32b55de",
      "parentUUID": "419e8c14-28f1-423c-adc2-c3fafeb08922",
      "skipped": false
    }
  ],
  "allHooks": [
    {
      "title": "\"before all\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.2]",
      "ctx": {
        "_runnable": {
          "title": "\"after all\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": "[Circular ~.suites.suites.2]",
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "duration": 0,
          "_error": null
        },
        "test": "[Circular ~.allHooks.0.ctx._runnable]"
      },
      "_events": {},
      "_eventsCount": 0,
      "duration": 3,
      "_error": null
    },
    "[Circular ~.allHooks.0.ctx._runnable]",
    {
      "title": "\"before all\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.20]",
      "ctx": {
        "_runnable": {
          "title": "\"after all\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": "[Circular ~.suites.suites.20]",
          "ctx": "[Circular ~.allHooks.2.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 100276429,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 0,
          "_error": null
        },
        "test": "[Circular ~.allHooks.2.ctx._runnable]"
      },
      "_events": {},
      "_eventsCount": 0,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 100276316,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 21,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.20]",
      "ctx": "[Circular ~.allHooks.2.ctx]",
      "_events": {},
      "_eventsCount": 0,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 100276421,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 1,
      "_error": null
    },
    "[Circular ~.allHooks.3]",
    "[Circular ~.allHooks.3]",
    "[Circular ~.allHooks.3]",
    "[Circular ~.allHooks.3]",
    "[Circular ~.allHooks.2.ctx._runnable]",
    {
      "title": "\"before all\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.21]",
      "ctx": {
        "_runnable": {
          "title": "\"after all\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": "[Circular ~.suites.suites.21]",
          "ctx": "[Circular ~.allHooks.9.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 100276464,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 1,
          "_error": null
        },
        "test": "[Circular ~.allHooks.9.ctx._runnable]"
      },
      "_events": {},
      "_eventsCount": 0,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 100276430,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 7,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.21]",
      "ctx": "[Circular ~.allHooks.9.ctx]",
      "_events": {},
      "_eventsCount": 0,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 100276460,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 1,
      "_error": null
    },
    "[Circular ~.allHooks.10]",
    "[Circular ~.allHooks.10]",
    "[Circular ~.allHooks.10]",
    "[Circular ~.allHooks.10]",
    "[Circular ~.allHooks.9.ctx._runnable]",
    {
      "title": "\"before all\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.22]",
      "ctx": {
        "_runnable": {
          "title": "\"after all\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": "[Circular ~.suites.suites.22]",
          "ctx": "[Circular ~.allHooks.16.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 100276497,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 1,
          "_error": null
        },
        "test": "[Circular ~.allHooks.16.ctx._runnable]"
      },
      "_events": {},
      "_eventsCount": 0,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 100276465,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 4,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.22]",
      "ctx": "[Circular ~.allHooks.16.ctx]",
      "_events": {},
      "_eventsCount": 0,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 100276491,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 1,
      "_error": null
    },
    "[Circular ~.allHooks.17]",
    "[Circular ~.allHooks.17]",
    "[Circular ~.allHooks.17]",
    "[Circular ~.allHooks.17]",
    "[Circular ~.allHooks.17]",
    "[Circular ~.allHooks.16.ctx._runnable]"
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should add validation rules to the collection instance",
      "fullTitle": "Unit suite - The addValidationRules method should add validation rules to the collection instance",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [],\n        update: [],\n        remove: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> insert = sinon.spy();\n<span class=\"hljs-keyword\">var</span> update = sinon.spy();\n<span class=\"hljs-keyword\">var</span> remove = sinon.spy();\nCollection.prototype.addValidationRules.call(instance, {\n    insert: insert,\n    update: update,\n    remove: remove\n});\ninstance.validationRules.insert[<span class=\"hljs-number\">0</span>].should.equal(insert);\ninstance.validationRules.update[<span class=\"hljs-number\">0</span>].should.equal(update);\ninstance.validationRules.remove[<span class=\"hljs-number\">0</span>].should.equal(remove);",
      "isRoot": false,
      "uuid": "aaf6aee1-60e4-4ec9-8436-5a16f81c3a6e",
      "parentUUID": "4dabfc63-60f1-440d-8161-ba9d92e1b5a5",
      "skipped": false
    },
    {
      "title": "should return the collection instance to allow method chaining",
      "fullTitle": "Unit suite - The addValidationRules method should return the collection instance to allow method chaining",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [],\n        update: [],\n        remove: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> insert = sinon.spy();\n<span class=\"hljs-keyword\">var</span> update = sinon.spy();\n<span class=\"hljs-keyword\">var</span> remove = sinon.spy();\n<span class=\"hljs-keyword\">var</span> ret = Collection.prototype.addValidationRules.call(instance, {});\nret.should.equal(instance);",
      "isRoot": false,
      "uuid": "7980123f-f8d1-4f24-b0e7-cca9214993c7",
      "parentUUID": "4dabfc63-60f1-440d-8161-ba9d92e1b5a5",
      "skipped": false
    },
    {
      "title": "should attach methods to the collection's mw instance",
      "fullTitle": "Unit suite - The attachMethods method should attach methods to the collection's mw instance",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    name: <span class=\"hljs-string\">\"elements\"</span>,\n    mw: {\n        methods: sinon.spy()\n    }\n};\nCollection.prototype.attachMethods.call(instance);\n<span class=\"hljs-keyword\">var</span> methods = instance.mw.methods.firstCall.args[<span class=\"hljs-number\">0</span>];\nR.keys(methods).should.eql([\n    <span class=\"hljs-string\">\"/elements/insert\"</span>,\n    <span class=\"hljs-string\">\"/elements/update\"</span>,\n    <span class=\"hljs-string\">\"/elements/remove\"</span>\n]);",
      "isRoot": false,
      "uuid": "f310e021-eccc-4805-9bd6-8230eb8e4765",
      "parentUUID": "2958f1a3-dd75-448a-a0d9-1233dc6af203",
      "skipped": false
    },
    {
      "title": "should save the mw instance, the name, and init the collection instance",
      "fullTitle": "Unit suite - The Collection constructor should save the mw instance, the name, and init the collection instance",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = {};\n<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.mw.should.equal(mw);\nElements.name.should.equal(<span class=\"hljs-string\">\"elements\"</span>);\nCollection.prototype.createDbProxy.called.should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.createDbProxy.calledOn(Elements).should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.attachMethods.called.should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.attachMethods.calledOn(Elements).should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.initValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.initValidationRules.calledOn(Elements).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "4e47dafb-9d6f-48ef-9e3f-b961c43664d5",
      "parentUUID": "9c75fe75-8089-4340-98a7-807828a5c8d8",
      "skipped": false
    },
    {
      "title": "should create the dbCollection proxy as a property of to the collection instance",
      "fullTitle": "Unit suite - The createDbProxy method should create the dbCollection proxy as a property of to the collection instance",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    name: <span class=\"hljs-string\">\"elements\"</span>,\n    mw: {\n        db: {\n            collection: R.always({\n                findOne: R.always(),\n                insert: R.always(),\n                update: R.always(),\n                remove: R.always()\n            })\n        }\n    }\n};\nCollection.prototype.createDbProxy.call(instance);\ninstance.dbCollection.should.be.a.Object;\ninstance.dbCollection.findOne.should.be.a.Function;\ninstance.dbCollection.insert.should.be.a.Function;\ninstance.dbCollection.update.should.be.a.Function;\ninstance.dbCollection.remove.should.be.a.Function;",
      "isRoot": false,
      "uuid": "47dada23-0396-413e-9cb2-8b5d5b3ce344",
      "parentUUID": "380a4497-e0d4-4bd9-a355-d740f0474de2",
      "skipped": false
    },
    {
      "title": "should create the validationRules store as a property of to the collection instance",
      "fullTitle": "Unit suite - The initValidationRules method should create the validationRules store as a property of to the collection instance",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {};\nCollection.prototype.initValidationRules.call(instance);\ninstance.validationRules.should.eql({\n    insert: [],\n    update: [],\n    remove: []\n});",
      "isRoot": false,
      "uuid": "f05546c5-7c61-47fb-96ec-47fd43869183",
      "parentUUID": "7a62778f-4194-4f32-b696-eafac74f74da",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The runValidationRules method should return a promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: []\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, {}, {})\n    .should.be.a.Promise;",
      "isRoot": false,
      "uuid": "cc46fc73-6915-4ae2-8100-54cc7d9c6602",
      "parentUUID": "211a2d88-de49-4cea-8b3a-de67ee76e295",
      "skipped": false
    },
    {
      "title": "should run all validation rules for the specified method",
      "fullTitle": "Unit suite - The runValidationRules method should run all validation rules for the specified method",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> rule_0 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> rule_1 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> rule_2 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [rule_0, rule_1, rule_2]\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, {}, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        rule_0.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        rule_1.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        rule_2.called.should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "457f0b24-935b-437f-9687-74d8aefbe3dc",
      "parentUUID": "211a2d88-de49-4cea-8b3a-de67ee76e295",
      "skipped": false
    },
    {
      "title": "should call rules with the correct context and arguments",
      "fullTitle": "Unit suite - The runValidationRules method should call rules with the correct context and arguments",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> insertRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> updateRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> removeRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [insertRule],\n        update: [updateRule],\n        remove: [removeRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> context = {context: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> oldDocument = {oldDocument: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> newDocument = {newDocument: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> insertResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, newDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        insertRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        insertRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">1</span>);\n        insertRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(newDocument);\n    });\n<span class=\"hljs-keyword\">var</span> updateResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"update\"</span>, oldDocument, newDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        updateRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        updateRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">2</span>);\n        updateRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(oldDocument);\n        updateRule.firstCall.args[<span class=\"hljs-number\">1</span>].should.eql(newDocument);\n    });\n<span class=\"hljs-keyword\">var</span> removeResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"remove\"</span>, oldDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        removeRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        removeRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">1</span>);\n        removeRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(oldDocument);\n    });\n<span class=\"hljs-keyword\">return</span> BPromise.all([\n    insertResult,\n    updateResult,\n    removeResult\n]);",
      "isRoot": false,
      "uuid": "91661637-722f-49ec-9ecf-a5259122e38b",
      "parentUUID": "211a2d88-de49-4cea-8b3a-de67ee76e295",
      "skipped": false
    },
    {
      "title": "should be fulfilled if all validation rules return either a value or an eventually fulfilled promise",
      "fullTitle": "Unit suite - The promise returned by the runValidationRules method should be fulfilled if all validation rules return either a value or an eventually fulfilled promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> rule_0 = sinon.stub().returns(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">var</span> rule_1 = sinon.stub().returns(<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-keyword\">var</span> rule_2 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [rule_0, rule_1, rule_2]\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.fulfilled;",
      "isRoot": false,
      "uuid": "9732e537-6fc3-42c8-90b5-7c2cceb18c3c",
      "parentUUID": "3c309032-33c0-435d-a0a0-d3428b197182",
      "skipped": false
    },
    {
      "title": "should be rejected if any of the validation rules either throws or returns an eventually rejected promise",
      "fullTitle": "Unit suite - The promise returned by the runValidationRules method should be rejected if any of the validation rules either throws or returns an eventually rejected promise",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> goodRule = sinon.stub().returns(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">var</span> badRule = sinon.stub().throws(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>());\n<span class=\"hljs-keyword\">var</span> eventuallyBadRule = sinon.stub().returns(BPromise.reject());\n<span class=\"hljs-keyword\">var</span> instance_0 = {\n    validationRules: {\n        insert: [goodRule, badRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> rejection_0 = Collection.prototype.runValidationRules\n    .call(instance_0, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.rejected;\n<span class=\"hljs-keyword\">var</span> instance_1 = {\n    validationRules: {\n        insert: [goodRule, eventuallyBadRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> rejection_1 = Collection.prototype.runValidationRules\n    .call(instance_1, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.rejected;\n<span class=\"hljs-keyword\">return</span> BPromise.all([rejection_0, rejection_1]);",
      "isRoot": false,
      "uuid": "a1336558-5621-4eaa-a629-55fea46d4eb5",
      "parentUUID": "3c309032-33c0-435d-a0a0-d3428b197182",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The insert method should return a promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = methods.insert();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "9e4f7c81-a7c5-49bd-a82e-3da127f8402a",
      "parentUUID": "f11f02af-fd02-4deb-8a9b-9b248987495d",
      "skipped": false
    },
    {
      "title": "should run validation insert rules",
      "fullTitle": "Unit suite - The insert method should run validation insert rules",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy()\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"insert\"</span>);\n    });",
      "isRoot": false,
      "uuid": "2cd2dcd3-0780-473c-aee9-0bbd56e6464d",
      "parentUUID": "f11f02af-fd02-4deb-8a9b-9b248987495d",
      "skipped": false
    },
    {
      "title": "should give the document a random _id if it doesn't have one",
      "fullTitle": "Unit suite - The insert method should give the document a random _id if it doesn't have one",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> insertedDocument = collection.dbCollection.insert.firstCall.args[<span class=\"hljs-number\">0</span>];\n        insertedDocument._id.should.be.a.String;\n        insertedDocument._id.length.should.equal(<span class=\"hljs-number\">32</span>);\n    });",
      "isRoot": false,
      "uuid": "f35c168c-9a51-464a-994c-be04c9a83212",
      "parentUUID": "f11f02af-fd02-4deb-8a9b-9b248987495d",
      "skipped": false
    },
    {
      "title": "should call dbCollection.insert with the new document",
      "fullTitle": "Unit suite - The insert method should call dbCollection.insert with the new document",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {_id: <span class=\"hljs-string\">\"_id\"</span>, a: <span class=\"hljs-number\">1</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.dbCollection.insert.calledWith({\n            _id: <span class=\"hljs-string\">\"_id\"</span>,\n            a: <span class=\"hljs-number\">1</span>\n        }).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "a675ca7e-4c00-4dbb-8a21-f7e2c561cc43",
      "parentUUID": "f11f02af-fd02-4deb-8a9b-9b248987495d",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `newDocument` is not an object",
      "fullTitle": "Unit suite - The promise returned by the insert method should be rejected if the remote argument `newDocument` is not an object",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.insert().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `newDocument` must be an object\"</span>\n});",
      "isRoot": false,
      "uuid": "b8fc1928-9e5e-4523-9d3d-6ede85b000b1",
      "parentUUID": "f51b60dd-b09c-4571-b553-cdf8e0973615",
      "skipped": false
    },
    {
      "title": "should be rejected if running validation rules fails",
      "fullTitle": "Unit suite - The promise returned by the insert method should be rejected if running validation rules fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    ))\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {}).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
      "isRoot": false,
      "uuid": "2a59314b-cd95-40e5-a1f3-2f4d49b76743",
      "parentUUID": "f51b60dd-b09c-4571-b553-cdf8e0973615",
      "skipped": false
    },
    {
      "title": "should be rejected if inserting fails",
      "fullTitle": "Unit suite - The promise returned by the insert method should be rejected if inserting fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Insert error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {}).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Insert error\"</span>\n});",
      "isRoot": false,
      "uuid": "3bc67e35-97e5-4f82-818a-e90facfa12b0",
      "parentUUID": "f51b60dd-b09c-4571-b553-cdf8e0973615",
      "skipped": false
    },
    {
      "title": "should be resolved with null if nothing fails",
      "fullTitle": "Unit suite - The promise returned by the insert method should be resolved with null if nothing fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "d1de1c98-2081-4834-9173-698590598d17",
      "parentUUID": "f51b60dd-b09c-4571-b553-cdf8e0973615",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The remove method should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = methods.remove();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "65fd4ad1-f2f0-4630-b282-a81b6d0e78df",
      "parentUUID": "cba2068e-dd62-46bd-ba38-86a1cf01bc3f",
      "skipped": false
    },
    {
      "title": "should run validation remove rules",
      "fullTitle": "Unit suite - The remove method should run validation remove rules",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy(),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({}))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>)\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"remove\"</span>);\n    });",
      "isRoot": false,
      "uuid": "27842bdd-222c-4407-be84-b15f93503e86",
      "parentUUID": "cba2068e-dd62-46bd-ba38-86a1cf01bc3f",
      "skipped": false
    },
    {
      "title": "should call dbCollection.remove to remove the old document",
      "fullTitle": "Unit suite - The remove method should call dbCollection.remove to remove the old document",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({_id: <span class=\"hljs-string\">\"_id\"</span>})),\n        remove: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"_id\"</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.dbCollection.remove.calledWith({\n            _id: <span class=\"hljs-string\">\"_id\"</span>\n        }).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "0807f7bc-bc8f-40e1-93b8-dc48df8073b4",
      "parentUUID": "cba2068e-dd62-46bd-ba38-86a1cf01bc3f",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `documentId` is not a string",
      "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if the remote argument `documentId` is not a string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.remove().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>\n});",
      "isRoot": false,
      "uuid": "4db3750f-4723-4bd3-84cd-3a55ca8439b5",
      "parentUUID": "492a6893-a77b-41d0-99bf-db3541d1583f",
      "skipped": false
    },
    {
      "title": "should be rejected if no document with the given id is found",
      "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if no document with the given id is found",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">404</span>,\n    message: <span class=\"hljs-string\">\"Document not found\"</span>\n});",
      "isRoot": false,
      "uuid": "a48af08b-2c68-4bf2-81c8-59306ced175f",
      "parentUUID": "492a6893-a77b-41d0-99bf-db3541d1583f",
      "skipped": false
    },
    {
      "title": "should be rejected if running validation rules fails",
      "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if running validation rules fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    )),\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
      "isRoot": false,
      "uuid": "42922f33-00a3-4bf2-812d-2e13dc957114",
      "parentUUID": "492a6893-a77b-41d0-99bf-db3541d1583f",
      "skipped": false
    },
    {
      "title": "should be rejected if removing fails",
      "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if removing fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        remove: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Remove error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Remove error\"</span>\n});",
      "isRoot": false,
      "uuid": "e750d5b3-4873-4589-abf6-5f3daa688d7e",
      "parentUUID": "492a6893-a77b-41d0-99bf-db3541d1583f",
      "skipped": false
    },
    {
      "title": "should be resolved with null if nothing fails",
      "fullTitle": "Unit suite - The promise returned by the remove method should be resolved with null if nothing fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        remove: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "971878ff-fa40-40b8-a954-88bfb8d329af",
      "parentUUID": "492a6893-a77b-41d0-99bf-db3541d1583f",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The update method should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = methods.update();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "15864fae-0b46-42b0-a636-902a19bd55da",
      "parentUUID": "94c52b4a-f1b0-4fe1-8d92-b94965b56d81",
      "skipped": false
    },
    {
      "title": "should run validation update rules",
      "fullTitle": "Unit suite - The update method should run validation update rules",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy(),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({}))\n    }\n};\n<span class=\"hljs-keyword\">var</span> patches = [{\n    op: <span class=\"hljs-string\">\"add\"</span>,\n    path: <span class=\"hljs-string\">\"/prop\"</span>,\n    value: <span class=\"hljs-string\">\"value\"</span>\n}];\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches)\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"update\"</span>);\n    });",
      "isRoot": false,
      "uuid": "ccbd3b1a-5703-4ba3-80b9-3181a2310316",
      "parentUUID": "94c52b4a-f1b0-4fe1-8d92-b94965b56d81",
      "skipped": false
    },
    {
      "title": "should call dbCollection.update with the updated document",
      "fullTitle": "Unit suite - The update method should call dbCollection.update with the updated document",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({_id: <span class=\"hljs-string\">\"_id\"</span>})),\n        update: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare({}, {a: <span class=\"hljs-number\">1</span>});\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"_id\"</span>, patches)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.dbCollection.update.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.dbCollection.update.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql({\n            _id: <span class=\"hljs-string\">\"_id\"</span>\n        });\n        collection.dbCollection.update.firstCall.args[<span class=\"hljs-number\">1</span>].should.eql({\n            $set: {\n                a: <span class=\"hljs-number\">1</span>\n            }\n        });\n    });",
      "isRoot": false,
      "uuid": "3ae4d56a-c957-442b-af92-fc4ecc9645e4",
      "parentUUID": "94c52b4a-f1b0-4fe1-8d92-b94965b56d81",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `documentId` is not a string",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if the remote argument `documentId` is not a string",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.update().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>\n});",
      "isRoot": false,
      "uuid": "22ec6009-024f-4d86-860d-2a2a08e4edbe",
      "parentUUID": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `patches` is not an array of patches",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if the remote argument `patches` is not an array of patches",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.update(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"Second argument `patches` must be an array of JSON patches\"</span>\n});",
      "isRoot": false,
      "uuid": "a00e6fe3-4280-4848-92c3-a296fb847a19",
      "parentUUID": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
      "skipped": false
    },
    {
      "title": "should be rejected if no document with the given id is found",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if no document with the given id is found",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">404</span>,\n    message: <span class=\"hljs-string\">\"Document not found\"</span>\n});",
      "isRoot": false,
      "uuid": "2129dd77-8db9-48f5-8882-89a1f33d8922",
      "parentUUID": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
      "skipped": false
    },
    {
      "title": "should be rejected if running validation rules fails",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if running validation rules fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    )),\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
      "isRoot": false,
      "uuid": "05624f79-ff26-42c3-a2a5-5b48b13fdf2e",
      "parentUUID": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
      "skipped": false
    },
    {
      "title": "should be rejected if updating fails",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if updating fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        update: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Update error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Update error\"</span>\n});",
      "isRoot": false,
      "uuid": "2c0dba31-fa4a-4146-b867-7ca1034fc35e",
      "parentUUID": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
      "skipped": false
    },
    {
      "title": "should be resolved with null if nothing fails",
      "fullTitle": "Unit suite - The promise returned by the update method should be resolved with null if nothing fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        update: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "e1523736-dbba-446f-9302-4246b327175b",
      "parentUUID": "b1f40f16-1d3b-409f-ad18-11588eaa0ca9",
      "skipped": false
    },
    {
      "title": "should apply the supplied set of patches to the supplied object",
      "fullTitle": "Unit suite - The applyPatches function should apply the supplied set of patches to the supplied object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> oldObj = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = {\n    a: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare(oldObj, newObj);\n<span class=\"hljs-keyword\">var</span> patchedObj = applyPatches(oldObj, patches);\npatchedObj.should.eql(newObj);",
      "isRoot": false,
      "uuid": "dff93681-db02-4362-87e8-56ae3b6bfc87",
      "parentUUID": "041b1a20-ed76-4300-b226-ff42d8279783",
      "skipped": false
    },
    {
      "title": "should not mutate the object to which it applies patches",
      "fullTitle": "Unit suite - The applyPatches function should not mutate the object to which it applies patches",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> oldObj = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> oldObjClone = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = {\n    a: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare(oldObj, newObj);\napplyPatches(oldObj, patches);\noldObj.should.eql(oldObjClone);",
      "isRoot": false,
      "uuid": "82ae3e86-cfef-4dc8-972e-84a8f678c1b7",
      "parentUUID": "041b1a20-ed76-4300-b226-ff42d8279783",
      "skipped": false
    },
    {
      "title": "should return true the argument is of the correct type",
      "fullTitle": "Unit suite - The argMatches function should return true the argument is of the correct type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "argMatches(t.Str, <span class=\"hljs-string\">\"I'm a string\"</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "0a174ae9-5657-49ac-853f-6ca491f4d25d",
      "parentUUID": "d98c9bf1-9c3a-4d4e-b019-ce2700900684",
      "skipped": false
    },
    {
      "title": "should throw an MW.Error if the argument is of the incorrect type",
      "fullTitle": "Unit suite - The argMatches function should throw an MW.Error if the argument is of the incorrect type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "argMatches(t.Num, <span class=\"hljs-string\">\"I'm a string, not a number\"</span>).should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "290378e9-c7e5-4f3b-a730-0dbddd4bebd9",
      "parentUUID": "d98c9bf1-9c3a-4d4e-b019-ce2700900684",
      "skipped": false
    },
    {
      "title": "should not throw if the condition is truthy",
      "fullTitle": "Unit suite - The ensure function should not throw if the condition is truthy",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> peacefulFella = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    ensure(error, <span class=\"hljs-literal\">true</span>);\n};\npeacefulFella.should.not.throw();",
      "isRoot": false,
      "uuid": "f388fc18-7606-4ce0-a753-a7c82443721f",
      "parentUUID": "1adf6777-ff56-4eb5-b19c-3dc36ceb1bc4",
      "skipped": false
    },
    {
      "title": "should throw if the condition is falsy",
      "fullTitle": "Unit suite - The ensure function should throw if the condition is falsy",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> troublemaker = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    ensure(error, <span class=\"hljs-literal\">false</span>);\n};\ntroublemaker.should.throw(<span class=\"hljs-built_in\">Error</span>);",
      "isRoot": false,
      "uuid": "f4f830e6-f381-4611-9a89-68cff8247093",
      "parentUUID": "1adf6777-ff56-4eb5-b19c-3dc36ceb1bc4",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The getOldDocument function should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.a.Promise;",
      "isRoot": false,
      "uuid": "0ff72f33-01da-4200-8685-716d30b9c3ec",
      "parentUUID": "f3e1d07b-bba4-4d34-a840-26a9552db720",
      "skipped": false
    },
    {
      "title": "should be fulfilled if a document is found",
      "fullTitle": "Unit suite - The promise returned by the getOldDocument function should be fulfilled if a document is found",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.fulfilledWith({});",
      "isRoot": false,
      "uuid": "2640e52b-0d18-49bb-8551-f1161e4d26f5",
      "parentUUID": "c9cdae59-26e6-4355-ab39-f6a8f7583af5",
      "skipped": false
    },
    {
      "title": "should be rejected with a MW.Error if no document is found",
      "fullTitle": "Unit suite - The promise returned by the getOldDocument function should be rejected with a MW.Error if no document is found",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.rejectedWith(MW.Error);",
      "isRoot": false,
      "uuid": "4aafa3c0-dab0-4b9b-8b8c-d9a5861e04c4",
      "parentUUID": "c9cdae59-26e6-4355-ab39-f6a8f7583af5",
      "skipped": false
    },
    {
      "title": "should be a tcomb type",
      "fullTitle": "Unit suite - The PatchesType object should be a tcomb type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t.Type.is(PatchesType).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "1a34587f-e20f-4dfd-96c1-3ed8fb9a7224",
      "parentUUID": "1f94b530-eb51-4e86-b11c-0ab00f9d3a85",
      "skipped": false
    },
    {
      "title": "should match valid JSON patches, unless they're an empty array",
      "fullTitle": "Unit suite - The PatchesType object should match valid JSON patches, unless they're an empty array",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> validPatches_0 = [{\n    op: <span class=\"hljs-string\">\"add\"</span>,\n    path: <span class=\"hljs-string\">\"/prop\"</span>,\n    value: <span class=\"hljs-string\">\"value\"</span>\n}];\n<span class=\"hljs-keyword\">var</span> validPatches_1 = jp.compare({a: <span class=\"hljs-number\">1</span>}, {b: <span class=\"hljs-number\">1</span>});\nt.validate(validPatches_0, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">true</span>);\nt.validate(validPatches_1, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "de2d7a10-7b07-437a-935b-f2134329acdf",
      "parentUUID": "1f94b530-eb51-4e86-b11c-0ab00f9d3a85",
      "skipped": false
    },
    {
      "title": "should not match invalid JSON patches and empty arrays",
      "fullTitle": "Unit suite - The PatchesType object should not match invalid JSON patches and empty arrays",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> invalidPatches_0 = [{a: <span class=\"hljs-number\">2</span>}];\nt.validate(invalidPatches_0, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-keyword\">var</span> invalidPatches_1 = [];\nt.validate(invalidPatches_1, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "ffcf6429-ddd6-415e-b9e5-d1ec55dccd01",
      "parentUUID": "1f94b530-eb51-4e86-b11c-0ab00f9d3a85",
      "skipped": false
    },
    {
      "title": "should generate a random 16-bytes string (32 characters long)",
      "fullTitle": "Unit suite - The randomId function should generate a random 16-bytes string (32 characters long)",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> string = randomId();\nstring.should.be.a.String;\nstring.length.should.equal(<span class=\"hljs-number\">32</span>);",
      "isRoot": false,
      "uuid": "97b03d15-39da-45ce-bef4-9d5547d754f0",
      "parentUUID": "b53f103f-bb44-4da0-a384-2fcea03d549e",
      "skipped": false
    },
    {
      "title": "400 on calling the api with the wrong arguments",
      "fullTitle": "Integration suite - Inserting a document 400 on calling the api with the wrong arguments",
      "timedOut": false,
      "duration": 61,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [<span class=\"hljs-string\">\"myDocument\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"First argument `newDocument` must be an object\"</span>});",
      "isRoot": false,
      "uuid": "52c6a553-12f1-4451-8170-bbfea622a3ac",
      "parentUUID": "72a527a3-bb7c-42da-87b6-fe053bdf5c43",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [throwing]",
      "fullTitle": "Integration suite - Inserting a document error if validation rules fail [throwing]",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Validation error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"Validation error\"</span>});",
      "isRoot": false,
      "uuid": "69d51e06-9cab-4304-9e9b-39f65cfab263",
      "parentUUID": "72a527a3-bb7c-42da-87b6-fe053bdf5c43",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [returning an eventually rejected promise]",
      "fullTitle": "Integration suite - Inserting a document error if validation rules fail [returning an eventually rejected promise]",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> BPromise.reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">489</span>, <span class=\"hljs-string\">\"Another validation error\"</span>));\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">489</span>)\n    .expect({error: <span class=\"hljs-string\">\"Another validation error\"</span>});",
      "isRoot": false,
      "uuid": "60c739c6-9a53-4bdd-a25a-82d39b7be9aa",
      "parentUUID": "72a527a3-bb7c-42da-87b6-fe053bdf5c43",
      "skipped": false
    },
    {
      "title": "inserting the document successful (after multiple validation rules pass)",
      "fullTitle": "Integration suite - Inserting a document inserting the document successful (after multiple validation rules pass)",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements\n    .addValidationRules({\n        insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n    })\n    .addValidationRules({\n        insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.resolve(<span class=\"hljs-literal\">null</span>);\n        }\n    });\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> cursor = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>).find({});\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(cursor.count, cursor)();\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(count)</span> </span>{\n        count.should.equal(<span class=\"hljs-number\">1</span>);\n    });",
      "isRoot": false,
      "uuid": "b3154e60-25dc-49e4-aa27-5cc3a9466758",
      "parentUUID": "72a527a3-bb7c-42da-87b6-fe053bdf5c43",
      "skipped": false
    },
    {
      "title": "automatic assignment of a string _id",
      "fullTitle": "Integration suite - Inserting a document automatic assignment of a string _id",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> collection = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>);\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(collection.findOne, collection)({});\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(element)</span> </span>{\n        element._id.should.be.a.String;\n        element._id.length.should.equal(<span class=\"hljs-number\">32</span>);\n    });",
      "isRoot": false,
      "uuid": "8d21015c-b13a-40e6-86b5-cfbf11f56d44",
      "parentUUID": "72a527a3-bb7c-42da-87b6-fe053bdf5c43",
      "skipped": false
    },
    {
      "title": "400 on calling the api with the wrong arguments",
      "fullTitle": "Integration suite - Removing a document 400 on calling the api with the wrong arguments",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>});",
      "isRoot": false,
      "uuid": "5e7a9b69-cc9a-4dd5-b382-e39fbda24100",
      "parentUUID": "4836db2d-f43b-43c7-b3f5-07323c98e19f",
      "skipped": false
    },
    {
      "title": "404 on document not found",
      "fullTitle": "Integration suite - Removing a document 404 on document not found",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"idNotInDatabase\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">404</span>)\n    .expect({error: <span class=\"hljs-string\">\"Document not found\"</span>});",
      "isRoot": false,
      "uuid": "3f59eb0d-a466-4c3d-9c8b-fc86e23c13f9",
      "parentUUID": "4836db2d-f43b-43c7-b3f5-07323c98e19f",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [throwing]",
      "fullTitle": "Integration suite - Removing a document error if validation rules fail [throwing]",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Validation error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"Validation error\"</span>});",
      "isRoot": false,
      "uuid": "73674c5d-8340-4e23-9660-6fcb6aed5fcd",
      "parentUUID": "4836db2d-f43b-43c7-b3f5-07323c98e19f",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [returning an eventually rejected promise]",
      "fullTitle": "Integration suite - Removing a document error if validation rules fail [returning an eventually rejected promise]",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> BPromise.reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">489</span>, <span class=\"hljs-string\">\"Another validation error\"</span>));\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">489</span>)\n    .expect({error: <span class=\"hljs-string\">\"Another validation error\"</span>});",
      "isRoot": false,
      "uuid": "ad36c970-e242-4ea4-8aad-6baa54f355a9",
      "parentUUID": "4836db2d-f43b-43c7-b3f5-07323c98e19f",
      "skipped": false
    },
    {
      "title": "removing the document successful (after multiple validation rules pass)",
      "fullTitle": "Integration suite - Removing a document removing the document successful (after multiple validation rules pass)",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements\n    .addValidationRules({\n        remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n    })\n    .addValidationRules({\n        remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.resolve(<span class=\"hljs-literal\">null</span>);\n        }\n    });\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> collection = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>);\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(collection.findOne, collection)({\n            _id: <span class=\"hljs-string\">\"elementId\"</span>\n        });\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(element)</span> </span>{\n        (element === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "586f682f-5bb4-46fd-a268-1e05af3b92ac",
      "parentUUID": "4836db2d-f43b-43c7-b3f5-07323c98e19f",
      "skipped": false
    },
    {
      "title": "400 on calling the api with the wrong arguments [first argument]",
      "fullTitle": "Integration suite - Updating a document 400 on calling the api with the wrong arguments [first argument]",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [{}, <span class=\"hljs-string\">\"previous-arg-not-a-string\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>});",
      "isRoot": false,
      "uuid": "85252414-3855-42ae-a289-865d048fb503",
      "parentUUID": "419e8c14-28f1-423c-adc2-c3fafeb08922",
      "skipped": false
    },
    {
      "title": "400 on calling the api with the wrong arguments [second argument]",
      "fullTitle": "Integration suite - Updating a document 400 on calling the api with the wrong arguments [second argument]",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"second-arg-not-array-of-patches\"</span>, {}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"Second argument `patches` must be an array of JSON patches\"</span>});",
      "isRoot": false,
      "uuid": "ff35812f-44e6-43b0-99d0-7b5065066567",
      "parentUUID": "419e8c14-28f1-423c-adc2-c3fafeb08922",
      "skipped": false
    },
    {
      "title": "404 on document not found",
      "fullTitle": "Integration suite - Updating a document 404 on document not found",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"idNotInDatabase\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">404</span>)\n    .expect({error: <span class=\"hljs-string\">\"Document not found\"</span>});",
      "isRoot": false,
      "uuid": "f5e48a21-18bc-4e41-bf26-de3cb2d87aed",
      "parentUUID": "419e8c14-28f1-423c-adc2-c3fafeb08922",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [throwing]",
      "fullTitle": "Integration suite - Updating a document error if validation rules fail [throwing]",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Validation error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"Validation error\"</span>});",
      "isRoot": false,
      "uuid": "01172a77-a679-41f1-9052-765e2fed1c1d",
      "parentUUID": "419e8c14-28f1-423c-adc2-c3fafeb08922",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [returning an eventually rejected promise]",
      "fullTitle": "Integration suite - Updating a document error if validation rules fail [returning an eventually rejected promise]",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> BPromise.reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">489</span>, <span class=\"hljs-string\">\"Another validation error\"</span>));\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">489</span>)\n    .expect({error: <span class=\"hljs-string\">\"Another validation error\"</span>});",
      "isRoot": false,
      "uuid": "91e60544-44a7-48a0-b45c-e6d36fbee31c",
      "parentUUID": "419e8c14-28f1-423c-adc2-c3fafeb08922",
      "skipped": false
    },
    {
      "title": "updating the document successful (after multiple validation rules pass)",
      "fullTitle": "Integration suite - Updating a document updating the document successful (after multiple validation rules pass)",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements\n    .addValidationRules({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n    })\n    .addValidationRules({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.resolve(<span class=\"hljs-literal\">null</span>);\n        }\n    });\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> collection = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>);\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(collection.findOne, collection)({\n            _id: <span class=\"hljs-string\">\"elementId\"</span>\n        });\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(element)</span> </span>{\n        element.should.eql({\n            _id: <span class=\"hljs-string\">\"elementId\"</span>,\n            prop: <span class=\"hljs-string\">\"value\"</span>\n        });\n    });",
      "isRoot": false,
      "uuid": "f6bfd6b5-5287-46ad-ab0c-daceb9c883ad",
      "parentUUID": "419e8c14-28f1-423c-adc2-c3fafeb08922",
      "skipped": false
    }
  ],
  "allFailures": []
}