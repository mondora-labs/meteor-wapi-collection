{
  "reportTitle": "meteor-wapi-collection",
  "stats": {
    "suites": 23,
    "tests": 65,
    "passes": 65,
    "pending": 0,
    "failures": 0,
    "start": "2015-05-01T20:56:31.039Z",
    "end": "2015-05-01T20:56:31.312Z",
    "duration": 273,
    "testsRegistered": 65,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Unit suite - The addValidationRules method",
        "suites": [],
        "tests": [
          {
            "title": "should add validation rules to the collection instance",
            "fullTitle": "Unit suite - The addValidationRules method should add validation rules to the collection instance",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [],\n        update: [],\n        remove: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> insert = sinon.spy();\n<span class=\"hljs-keyword\">var</span> update = sinon.spy();\n<span class=\"hljs-keyword\">var</span> remove = sinon.spy();\nCollection.prototype.addValidationRules.call(instance, {\n    insert: insert,\n    update: update,\n    remove: remove\n});\ninstance.validationRules.insert[<span class=\"hljs-number\">0</span>].should.equal(insert);\ninstance.validationRules.update[<span class=\"hljs-number\">0</span>].should.equal(update);\ninstance.validationRules.remove[<span class=\"hljs-number\">0</span>].should.equal(remove);",
            "isRoot": false,
            "uuid": "5252b4ef-0568-496c-bda8-50bff2a52a32",
            "parentUUID": "e9c9bd6d-6dfe-42d7-9a1c-0c44b0ea72c0",
            "skipped": false
          },
          {
            "title": "should return the collection instance to allow method chaining",
            "fullTitle": "Unit suite - The addValidationRules method should return the collection instance to allow method chaining",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [],\n        update: [],\n        remove: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> insert = sinon.spy();\n<span class=\"hljs-keyword\">var</span> update = sinon.spy();\n<span class=\"hljs-keyword\">var</span> remove = sinon.spy();\n<span class=\"hljs-keyword\">var</span> ret = Collection.prototype.addValidationRules.call(instance, {});\nret.should.equal(instance);",
            "isRoot": false,
            "uuid": "4d8fae3e-3174-4190-af88-8cd592dbed31",
            "parentUUID": "e9c9bd6d-6dfe-42d7-9a1c-0c44b0ea72c0",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/collection/addValidationRules.js",
        "uuid": "e9c9bd6d-6dfe-42d7-9a1c-0c44b0ea72c0",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/collection/addValidationRules.js",
        "passes": [
          "[Circular ~.suites.suites.0.tests.0]",
          "[Circular ~.suites.suites.0.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "Unit suite - The attachMethods method",
        "suites": [],
        "tests": [
          {
            "title": "should attach methods to the collection's mw instance",
            "fullTitle": "Unit suite - The attachMethods method should attach methods to the collection's mw instance",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    name: <span class=\"hljs-string\">\"elements\"</span>,\n    mw: {\n        methods: sinon.spy()\n    }\n};\nCollection.prototype.attachMethods.call(instance);\n<span class=\"hljs-keyword\">var</span> methods = instance.mw.methods.firstCall.args[<span class=\"hljs-number\">0</span>];\nR.keys(methods).should.eql([\n    <span class=\"hljs-string\">\"/elements/insert\"</span>,\n    <span class=\"hljs-string\">\"/elements/update\"</span>,\n    <span class=\"hljs-string\">\"/elements/remove\"</span>\n]);",
            "isRoot": false,
            "uuid": "b57f158f-d75a-464e-b97a-71ed9f641602",
            "parentUUID": "207c967c-fc64-409a-a171-e682c0493f4d",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/collection/attachMethods.js",
        "uuid": "207c967c-fc64-409a-a171-e682c0493f4d",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/collection/attachMethods.js",
        "passes": [
          "[Circular ~.suites.suites.1.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      {
        "title": "Unit suite - The Collection constructor",
        "suites": [],
        "tests": [
          {
            "title": "should save the mw instance, the name, and init the collection instance",
            "fullTitle": "Unit suite - The Collection constructor should save the mw instance, the name, and init the collection instance",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> mw = {};\n<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.mw.should.equal(mw);\nElements.name.should.equal(<span class=\"hljs-string\">\"elements\"</span>);\nCollection.prototype.createDbProxy.called.should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.createDbProxy.calledOn(Elements).should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.attachMethods.called.should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.attachMethods.calledOn(Elements).should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.initValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.initValidationRules.calledOn(Elements).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "ff4d56a3-67eb-41c2-bea9-3d3638cf9a31",
            "parentUUID": "29fac72a-93e3-45cc-a894-ca7a08dff136",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/collection/constructor.js",
        "uuid": "29fac72a-93e3-45cc-a894-ca7a08dff136",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/collection/constructor.js",
        "passes": [
          "[Circular ~.suites.suites.2.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "Unit suite - The createDbProxy method",
        "suites": [],
        "tests": [
          {
            "title": "should create the dbCollection proxy as a property of to the collection instance",
            "fullTitle": "Unit suite - The createDbProxy method should create the dbCollection proxy as a property of to the collection instance",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    name: <span class=\"hljs-string\">\"elements\"</span>,\n    mw: {\n        db: {\n            collection: R.always({\n                findOne: R.always(),\n                insert: R.always(),\n                update: R.always(),\n                remove: R.always()\n            })\n        }\n    }\n};\nCollection.prototype.createDbProxy.call(instance);\ninstance.dbCollection.should.be.a.Object;\ninstance.dbCollection.findOne.should.be.a.Function;\ninstance.dbCollection.insert.should.be.a.Function;\ninstance.dbCollection.update.should.be.a.Function;\ninstance.dbCollection.remove.should.be.a.Function;",
            "isRoot": false,
            "uuid": "fcf5c9aa-dc25-4c97-bfd1-8497f2a67f5c",
            "parentUUID": "70dd187b-d447-4581-9e32-23f793e5cae6",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/collection/createDbProxy.js",
        "uuid": "70dd187b-d447-4581-9e32-23f793e5cae6",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/collection/createDbProxy.js",
        "passes": [
          "[Circular ~.suites.suites.3.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      {
        "title": "Unit suite - The initValidationRules method",
        "suites": [],
        "tests": [
          {
            "title": "should create the validationRules store as a property of to the collection instance",
            "fullTitle": "Unit suite - The initValidationRules method should create the validationRules store as a property of to the collection instance",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> instance = {};\nCollection.prototype.initValidationRules.call(instance);\ninstance.validationRules.should.eql({\n    insert: [],\n    update: [],\n    remove: []\n});",
            "isRoot": false,
            "uuid": "0f012d21-6c46-4fc3-a5a2-d293a6c72326",
            "parentUUID": "b70f41a2-3cc0-4097-b9a1-e37711b72fbf",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/collection/initValidationRules.js.js",
        "uuid": "b70f41a2-3cc0-4097-b9a1-e37711b72fbf",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/collection/initValidationRules.js.js",
        "passes": [
          "[Circular ~.suites.suites.4.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Unit suite - The runValidationRules method",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "Unit suite - The runValidationRules method should return a promise",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: []\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, {}, {})\n    .should.be.a.Promise;",
            "isRoot": false,
            "uuid": "53aa4eac-99f7-41a3-95fd-15e90878f811",
            "parentUUID": "f99eb51d-c0b4-444c-ad7c-6465abbef3fd",
            "skipped": false
          },
          {
            "title": "should run all validation rules for the specified method",
            "fullTitle": "Unit suite - The runValidationRules method should run all validation rules for the specified method",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> rule_0 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> rule_1 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> rule_2 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [rule_0, rule_1, rule_2]\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, {}, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        rule_0.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        rule_1.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        rule_2.called.should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "784ab0c8-ee4e-4160-a069-845b267f4985",
            "parentUUID": "f99eb51d-c0b4-444c-ad7c-6465abbef3fd",
            "skipped": false
          },
          {
            "title": "should call rules with the correct context and arguments",
            "fullTitle": "Unit suite - The runValidationRules method should call rules with the correct context and arguments",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> insertRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> updateRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> removeRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [insertRule],\n        update: [updateRule],\n        remove: [removeRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> context = {context: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> oldDocument = {oldDocument: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> newDocument = {newDocument: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> insertResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, newDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        insertRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        insertRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">1</span>);\n        insertRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(newDocument);\n    });\n<span class=\"hljs-keyword\">var</span> updateResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"update\"</span>, oldDocument, newDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        updateRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        updateRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">2</span>);\n        updateRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(oldDocument);\n        updateRule.firstCall.args[<span class=\"hljs-number\">1</span>].should.eql(newDocument);\n    });\n<span class=\"hljs-keyword\">var</span> removeResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"remove\"</span>, oldDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        removeRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        removeRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">1</span>);\n        removeRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(oldDocument);\n    });\n<span class=\"hljs-keyword\">return</span> BPromise.all([\n    insertResult,\n    updateResult,\n    removeResult\n]);",
            "isRoot": false,
            "uuid": "2bc28b54-5c1b-457a-8466-a84c5341dc01",
            "parentUUID": "f99eb51d-c0b4-444c-ad7c-6465abbef3fd",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/collection/runValidationRules.js",
        "uuid": "f99eb51d-c0b4-444c-ad7c-6465abbef3fd",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/collection/runValidationRules.js",
        "passes": [
          "[Circular ~.suites.suites.5.tests.0]",
          "[Circular ~.suites.suites.5.tests.1]",
          "[Circular ~.suites.suites.5.tests.2]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 7
      },
      {
        "title": "Unit suite - The promise returned by the runValidationRules method",
        "suites": [],
        "tests": [
          {
            "title": "should be fulfilled if all validation rules return either a value or an eventually fulfilled promise",
            "fullTitle": "Unit suite - The promise returned by the runValidationRules method should be fulfilled if all validation rules return either a value or an eventually fulfilled promise",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> rule_0 = sinon.stub().returns(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">var</span> rule_1 = sinon.stub().returns(<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-keyword\">var</span> rule_2 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [rule_0, rule_1, rule_2]\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.fulfilled;",
            "isRoot": false,
            "uuid": "d1cd7c0d-ed4e-41d4-8f23-c396ed172a54",
            "parentUUID": "bbb49f09-8c75-459c-9f5c-2ba446959f77",
            "skipped": false
          },
          {
            "title": "should be rejected if any of the validation rules either throws or returns an eventually rejected promise",
            "fullTitle": "Unit suite - The promise returned by the runValidationRules method should be rejected if any of the validation rules either throws or returns an eventually rejected promise",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> goodRule = sinon.stub().returns(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">var</span> badRule = sinon.stub().throws(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>());\n<span class=\"hljs-keyword\">var</span> eventuallyBadRule = sinon.stub().returns(BPromise.reject());\n<span class=\"hljs-keyword\">var</span> instance_0 = {\n    validationRules: {\n        insert: [goodRule, badRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> rejection_0 = Collection.prototype.runValidationRules\n    .call(instance_0, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.rejected;\n<span class=\"hljs-keyword\">var</span> instance_1 = {\n    validationRules: {\n        insert: [goodRule, eventuallyBadRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> rejection_1 = Collection.prototype.runValidationRules\n    .call(instance_1, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.rejected;\n<span class=\"hljs-keyword\">return</span> BPromise.all([rejection_0, rejection_1]);",
            "isRoot": false,
            "uuid": "203486cf-9f6e-4be6-9eec-717f342b08e8",
            "parentUUID": "bbb49f09-8c75-459c-9f5c-2ba446959f77",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/collection/runValidationRules.js",
        "uuid": "bbb49f09-8c75-459c-9f5c-2ba446959f77",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/collection/runValidationRules.js",
        "passes": [
          "[Circular ~.suites.suites.6.tests.0]",
          "[Circular ~.suites.suites.6.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 4
      },
      {
        "title": "Unit suite - The applyPatches function",
        "suites": [],
        "tests": [
          {
            "title": "should apply the supplied set of patches to the supplied object",
            "fullTitle": "Unit suite - The applyPatches function should apply the supplied set of patches to the supplied object",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> oldObj = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = {\n    a: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare(oldObj, newObj);\n<span class=\"hljs-keyword\">var</span> patchedObj = applyPatches(oldObj, patches);\npatchedObj.should.eql(newObj);",
            "isRoot": false,
            "uuid": "074495b9-194a-419b-a19a-9c1ad525ef41",
            "parentUUID": "ce7d7f06-dd91-48c4-9c6a-79d644cc0674",
            "skipped": false
          },
          {
            "title": "should not mutate the object to which it applies patches",
            "fullTitle": "Unit suite - The applyPatches function should not mutate the object to which it applies patches",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> oldObj = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> oldObjClone = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = {\n    a: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare(oldObj, newObj);\napplyPatches(oldObj, patches);\noldObj.should.eql(oldObjClone);",
            "isRoot": false,
            "uuid": "97ab04b6-4666-4b5f-81b3-2d449a69b5b3",
            "parentUUID": "ce7d7f06-dd91-48c4-9c6a-79d644cc0674",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/apply-patches.js",
        "uuid": "ce7d7f06-dd91-48c4-9c6a-79d644cc0674",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/apply-patches.js",
        "passes": [
          "[Circular ~.suites.suites.7.tests.0]",
          "[Circular ~.suites.suites.7.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Unit suite - The argMatches function",
        "suites": [],
        "tests": [
          {
            "title": "should return true the argument is of the correct type",
            "fullTitle": "Unit suite - The argMatches function should return true the argument is of the correct type",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "argMatches(t.Str, <span class=\"hljs-string\">\"I'm a string\"</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "0ec6f55a-952f-4846-96c3-b6c99dcd9283",
            "parentUUID": "6c5587c8-de04-4245-be0f-273a2d23ddb9",
            "skipped": false
          },
          {
            "title": "should throw an MW.Error if the argument is of the incorrect type",
            "fullTitle": "Unit suite - The argMatches function should throw an MW.Error if the argument is of the incorrect type",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "argMatches(t.Num, <span class=\"hljs-string\">\"I'm a string, not a number\"</span>).should.equal(<span class=\"hljs-literal\">false</span>);",
            "isRoot": false,
            "uuid": "dd133aac-a2e9-4e01-a6fe-46dee05562a6",
            "parentUUID": "6c5587c8-de04-4245-be0f-273a2d23ddb9",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/arg-matches.js",
        "uuid": "6c5587c8-de04-4245-be0f-273a2d23ddb9",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/arg-matches.js",
        "passes": [
          "[Circular ~.suites.suites.8.tests.0]",
          "[Circular ~.suites.suites.8.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "Unit suite - The ensure function",
        "suites": [],
        "tests": [
          {
            "title": "should not throw if the condition is truthy",
            "fullTitle": "Unit suite - The ensure function should not throw if the condition is truthy",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> peacefulFella = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    ensure(error, <span class=\"hljs-literal\">true</span>);\n};\npeacefulFella.should.not.throw();",
            "isRoot": false,
            "uuid": "3639cf4c-5be7-4dd4-9834-375cda940ae4",
            "parentUUID": "86c84287-67cf-4258-9c72-d24fbb1c7bd0",
            "skipped": false
          },
          {
            "title": "should throw if the condition is falsy",
            "fullTitle": "Unit suite - The ensure function should throw if the condition is falsy",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> troublemaker = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    ensure(error, <span class=\"hljs-literal\">false</span>);\n};\ntroublemaker.should.throw(<span class=\"hljs-built_in\">Error</span>);",
            "isRoot": false,
            "uuid": "15cbaad1-946f-48d1-8376-9e0d6c709b47",
            "parentUUID": "86c84287-67cf-4258-9c72-d24fbb1c7bd0",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/ensure.js",
        "uuid": "86c84287-67cf-4258-9c72-d24fbb1c7bd0",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/ensure.js",
        "passes": [
          "[Circular ~.suites.suites.9.tests.0]",
          "[Circular ~.suites.suites.9.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Unit suite - The getOldDocument function",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "Unit suite - The getOldDocument function should return a promise",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.a.Promise;",
            "isRoot": false,
            "uuid": "7ff68cdb-75d4-4cdc-897f-4e168aa23a26",
            "parentUUID": "021f592a-3d17-419b-83e9-34f3d6833ee3",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/get-old-document.js",
        "uuid": "021f592a-3d17-419b-83e9-34f3d6833ee3",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/get-old-document.js",
        "passes": [
          "[Circular ~.suites.suites.10.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Unit suite - The promise returned by the getOldDocument function",
        "suites": [],
        "tests": [
          {
            "title": "should be fulfilled if a document is found",
            "fullTitle": "Unit suite - The promise returned by the getOldDocument function should be fulfilled if a document is found",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.fulfilledWith({});",
            "isRoot": false,
            "uuid": "8274eba4-2805-472b-a1df-619471178453",
            "parentUUID": "43920f4f-2b09-461c-a545-74cb5931cf2b",
            "skipped": false
          },
          {
            "title": "should be rejected with a MW.Error if no document is found",
            "fullTitle": "Unit suite - The promise returned by the getOldDocument function should be rejected with a MW.Error if no document is found",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.rejectedWith(MW.Error);",
            "isRoot": false,
            "uuid": "37ab8a23-c836-4618-9d58-db9b4cc7c7e0",
            "parentUUID": "43920f4f-2b09-461c-a545-74cb5931cf2b",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/get-old-document.js",
        "uuid": "43920f4f-2b09-461c-a545-74cb5931cf2b",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/get-old-document.js",
        "passes": [
          "[Circular ~.suites.suites.11.tests.0]",
          "[Circular ~.suites.suites.11.tests.1]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 2,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "Unit suite - The PatchesType object",
        "suites": [],
        "tests": [
          {
            "title": "should be a tcomb type",
            "fullTitle": "Unit suite - The PatchesType object should be a tcomb type",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "t.Type.is(PatchesType).should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "9a7c2d77-b319-4bbf-b580-030cbca80e30",
            "parentUUID": "28b0622a-d430-433f-93aa-13f896a7c1db",
            "skipped": false
          },
          {
            "title": "should match valid JSON patches, unless they're an empty array",
            "fullTitle": "Unit suite - The PatchesType object should match valid JSON patches, unless they're an empty array",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> validPatches_0 = [{\n    op: <span class=\"hljs-string\">\"add\"</span>,\n    path: <span class=\"hljs-string\">\"/prop\"</span>,\n    value: <span class=\"hljs-string\">\"value\"</span>\n}];\n<span class=\"hljs-keyword\">var</span> validPatches_1 = jp.compare({a: <span class=\"hljs-number\">1</span>}, {b: <span class=\"hljs-number\">1</span>});\nt.validate(validPatches_0, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">true</span>);\nt.validate(validPatches_1, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">true</span>);",
            "isRoot": false,
            "uuid": "b63d527d-d50e-4452-ad08-5248d3b2eb95",
            "parentUUID": "28b0622a-d430-433f-93aa-13f896a7c1db",
            "skipped": false
          },
          {
            "title": "should not match invalid JSON patches and empty arrays",
            "fullTitle": "Unit suite - The PatchesType object should not match invalid JSON patches and empty arrays",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> invalidPatches_0 = [{a: <span class=\"hljs-number\">2</span>}];\nt.validate(invalidPatches_0, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-keyword\">var</span> invalidPatches_1 = [];\nt.validate(invalidPatches_1, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">false</span>);",
            "isRoot": false,
            "uuid": "270ddfc0-dfb9-4003-a2b3-f0e58b50f76d",
            "parentUUID": "28b0622a-d430-433f-93aa-13f896a7c1db",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/patches-type.js",
        "uuid": "28b0622a-d430-433f-93aa-13f896a7c1db",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/patches-type.js",
        "passes": [
          "[Circular ~.suites.suites.12.tests.0]",
          "[Circular ~.suites.suites.12.tests.1]",
          "[Circular ~.suites.suites.12.tests.2]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Unit suite - The randomId function",
        "suites": [],
        "tests": [
          {
            "title": "should generate a random 16-bytes string (32 characters long)",
            "fullTitle": "Unit suite - The randomId function should generate a random 16-bytes string (32 characters long)",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> string = randomId();\nstring.should.be.a.String;\nstring.length.should.equal(<span class=\"hljs-number\">32</span>);",
            "isRoot": false,
            "uuid": "99b58062-59c0-465d-b15a-2d8a5a4922c7",
            "parentUUID": "7c9e6409-4bee-497f-a946-13433d5d2a27",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/lib/random-id.js",
        "uuid": "7c9e6409-4bee-497f-a946-13433d5d2a27",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/lib/random-id.js",
        "passes": [
          "[Circular ~.suites.suites.13.tests.0]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "Unit suite - The insert method",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "Unit suite - The insert method should return a promise",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> promise = methods.insert();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
            "isRoot": false,
            "uuid": "d8256296-8a12-4f91-b34f-1138208574e5",
            "parentUUID": "37e99f02-efc0-4bd1-9515-523cf316c390",
            "skipped": false
          },
          {
            "title": "should run validation insert rules",
            "fullTitle": "Unit suite - The insert method should run validation insert rules",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy()\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"insert\"</span>);\n    });",
            "isRoot": false,
            "uuid": "39c7445f-7911-48c6-83ab-056416deb78e",
            "parentUUID": "37e99f02-efc0-4bd1-9515-523cf316c390",
            "skipped": false
          },
          {
            "title": "should give the document a random _id if it doesn't have one",
            "fullTitle": "Unit suite - The insert method should give the document a random _id if it doesn't have one",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> insertedDocument = collection.dbCollection.insert.firstCall.args[<span class=\"hljs-number\">0</span>];\n        insertedDocument._id.should.be.a.String;\n        insertedDocument._id.length.should.equal(<span class=\"hljs-number\">32</span>);\n    });",
            "isRoot": false,
            "uuid": "7dd72678-8c2f-472b-bbb9-f025c5921ef9",
            "parentUUID": "37e99f02-efc0-4bd1-9515-523cf316c390",
            "skipped": false
          },
          {
            "title": "should call dbCollection.insert with the new document",
            "fullTitle": "Unit suite - The insert method should call dbCollection.insert with the new document",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {_id: <span class=\"hljs-string\">\"_id\"</span>, a: <span class=\"hljs-number\">1</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.dbCollection.insert.calledWith({\n            _id: <span class=\"hljs-string\">\"_id\"</span>,\n            a: <span class=\"hljs-number\">1</span>\n        }).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "b66b5349-71e0-4378-9bdb-16acae8c8516",
            "parentUUID": "37e99f02-efc0-4bd1-9515-523cf316c390",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/insert.js",
        "uuid": "37e99f02-efc0-4bd1-9515-523cf316c390",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/methods/insert.js",
        "passes": [
          "[Circular ~.suites.suites.14.tests.0]",
          "[Circular ~.suites.suites.14.tests.1]",
          "[Circular ~.suites.suites.14.tests.2]",
          "[Circular ~.suites.suites.14.tests.3]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 4
      },
      {
        "title": "Unit suite - The promise returned by the insert method",
        "suites": [],
        "tests": [
          {
            "title": "should be rejected if the remote argument `newDocument` is not an object",
            "fullTitle": "Unit suite - The promise returned by the insert method should be rejected if the remote argument `newDocument` is not an object",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> methods.insert().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `newDocument` must be an object\"</span>\n});",
            "isRoot": false,
            "uuid": "57cde43f-80a9-43d4-95f9-7d687a733a4e",
            "parentUUID": "f70e7e3a-ab62-469c-94b0-0bc15ce4bc1f",
            "skipped": false
          },
          {
            "title": "should be rejected if running validation rules fails",
            "fullTitle": "Unit suite - The promise returned by the insert method should be rejected if running validation rules fails",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    ))\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {}).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
            "isRoot": false,
            "uuid": "b089ab95-54ba-4f26-9ffa-bfa4d26fcc0e",
            "parentUUID": "f70e7e3a-ab62-469c-94b0-0bc15ce4bc1f",
            "skipped": false
          },
          {
            "title": "should be rejected if inserting fails",
            "fullTitle": "Unit suite - The promise returned by the insert method should be rejected if inserting fails",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Insert error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {}).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Insert error\"</span>\n});",
            "isRoot": false,
            "uuid": "3a8afb50-de90-4c71-8799-af9197058992",
            "parentUUID": "f70e7e3a-ab62-469c-94b0-0bc15ce4bc1f",
            "skipped": false
          },
          {
            "title": "should be resolved with null if nothing fails",
            "fullTitle": "Unit suite - The promise returned by the insert method should be resolved with null if nothing fails",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "4291f294-39b7-4c54-9188-a22994e0cd46",
            "parentUUID": "f70e7e3a-ab62-469c-94b0-0bc15ce4bc1f",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/insert.js",
        "uuid": "f70e7e3a-ab62-469c-94b0-0bc15ce4bc1f",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/methods/insert.js",
        "passes": [
          "[Circular ~.suites.suites.15.tests.0]",
          "[Circular ~.suites.suites.15.tests.1]",
          "[Circular ~.suites.suites.15.tests.2]",
          "[Circular ~.suites.suites.15.tests.3]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 4,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 3
      },
      {
        "title": "Unit suite - The remove method",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "Unit suite - The remove method should return a promise",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> promise = methods.remove();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
            "isRoot": false,
            "uuid": "e0ff7f89-9373-4704-a2a7-5666a422217e",
            "parentUUID": "99a98a85-701e-4630-9cdb-d13d27e439c3",
            "skipped": false
          },
          {
            "title": "should run validation remove rules",
            "fullTitle": "Unit suite - The remove method should run validation remove rules",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy(),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({}))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>)\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"remove\"</span>);\n    });",
            "isRoot": false,
            "uuid": "d4d35554-7e35-499d-ac48-b13b39784f37",
            "parentUUID": "99a98a85-701e-4630-9cdb-d13d27e439c3",
            "skipped": false
          },
          {
            "title": "should call dbCollection.remove to remove the old document",
            "fullTitle": "Unit suite - The remove method should call dbCollection.remove to remove the old document",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({_id: <span class=\"hljs-string\">\"_id\"</span>})),\n        remove: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"_id\"</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.dbCollection.remove.calledWith({\n            _id: <span class=\"hljs-string\">\"_id\"</span>\n        }).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "17885e6e-4005-4b2f-8574-f7f403693ad9",
            "parentUUID": "99a98a85-701e-4630-9cdb-d13d27e439c3",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/remove.js",
        "uuid": "99a98a85-701e-4630-9cdb-d13d27e439c3",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/methods/remove.js",
        "passes": [
          "[Circular ~.suites.suites.16.tests.0]",
          "[Circular ~.suites.suites.16.tests.1]",
          "[Circular ~.suites.suites.16.tests.2]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 3
      },
      {
        "title": "Unit suite - The promise returned by the remove method",
        "suites": [],
        "tests": [
          {
            "title": "should be rejected if the remote argument `documentId` is not a string",
            "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if the remote argument `documentId` is not a string",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> methods.remove().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>\n});",
            "isRoot": false,
            "uuid": "fbd77617-3cd3-488c-b1dd-84cd81da6e8d",
            "parentUUID": "ad035076-320d-43f2-958b-96bd8e1711bd",
            "skipped": false
          },
          {
            "title": "should be rejected if no document with the given id is found",
            "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if no document with the given id is found",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">404</span>,\n    message: <span class=\"hljs-string\">\"Document not found\"</span>\n});",
            "isRoot": false,
            "uuid": "d3abce11-cda4-4d21-8249-bc2fc96efaf3",
            "parentUUID": "ad035076-320d-43f2-958b-96bd8e1711bd",
            "skipped": false
          },
          {
            "title": "should be rejected if running validation rules fails",
            "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if running validation rules fails",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    )),\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
            "isRoot": false,
            "uuid": "a0a98d3e-1ed1-45b1-bd04-fbeabcd1bdca",
            "parentUUID": "ad035076-320d-43f2-958b-96bd8e1711bd",
            "skipped": false
          },
          {
            "title": "should be rejected if removing fails",
            "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if removing fails",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        remove: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Remove error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Remove error\"</span>\n});",
            "isRoot": false,
            "uuid": "ecc8db0b-1b9f-4131-aae3-f1f73a40467d",
            "parentUUID": "ad035076-320d-43f2-958b-96bd8e1711bd",
            "skipped": false
          },
          {
            "title": "should be resolved with null if nothing fails",
            "fullTitle": "Unit suite - The promise returned by the remove method should be resolved with null if nothing fails",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        remove: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "13784a3c-0614-4346-b2da-6093cda994a6",
            "parentUUID": "ad035076-320d-43f2-958b-96bd8e1711bd",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/remove.js",
        "uuid": "ad035076-320d-43f2-958b-96bd8e1711bd",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/methods/remove.js",
        "passes": [
          "[Circular ~.suites.suites.17.tests.0]",
          "[Circular ~.suites.suites.17.tests.1]",
          "[Circular ~.suites.suites.17.tests.2]",
          "[Circular ~.suites.suites.17.tests.3]",
          "[Circular ~.suites.suites.17.tests.4]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 2
      },
      {
        "title": "Unit suite - The update method",
        "suites": [],
        "tests": [
          {
            "title": "should return a promise",
            "fullTitle": "Unit suite - The update method should return a promise",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> promise = methods.update();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
            "isRoot": false,
            "uuid": "f04a6248-32e4-47e8-87e2-8b1c5874c085",
            "parentUUID": "2a702334-0301-4e26-8159-bc757b467909",
            "skipped": false
          },
          {
            "title": "should run validation update rules",
            "fullTitle": "Unit suite - The update method should run validation update rules",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy(),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({}))\n    }\n};\n<span class=\"hljs-keyword\">var</span> patches = [{\n    op: <span class=\"hljs-string\">\"add\"</span>,\n    path: <span class=\"hljs-string\">\"/prop\"</span>,\n    value: <span class=\"hljs-string\">\"value\"</span>\n}];\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches)\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"update\"</span>);\n    });",
            "isRoot": false,
            "uuid": "05b85a00-ae8b-48e7-ac92-a845d702de1d",
            "parentUUID": "2a702334-0301-4e26-8159-bc757b467909",
            "skipped": false
          },
          {
            "title": "should call dbCollection.update with the updated document",
            "fullTitle": "Unit suite - The update method should call dbCollection.update with the updated document",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({_id: <span class=\"hljs-string\">\"_id\"</span>})),\n        update: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare({}, {a: <span class=\"hljs-number\">1</span>});\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"_id\"</span>, patches)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.dbCollection.update.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.dbCollection.update.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql({\n            _id: <span class=\"hljs-string\">\"_id\"</span>\n        });\n        collection.dbCollection.update.firstCall.args[<span class=\"hljs-number\">1</span>].should.eql({\n            $set: {\n                a: <span class=\"hljs-number\">1</span>\n            }\n        });\n    });",
            "isRoot": false,
            "uuid": "a46c8e9c-ded0-4b21-96c8-6c9418018c57",
            "parentUUID": "2a702334-0301-4e26-8159-bc757b467909",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/update.js",
        "uuid": "2a702334-0301-4e26-8159-bc757b467909",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/methods/update.js",
        "passes": [
          "[Circular ~.suites.suites.18.tests.0]",
          "[Circular ~.suites.suites.18.tests.1]",
          "[Circular ~.suites.suites.18.tests.2]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 3,
        "totalPasses": 3,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 1
      },
      {
        "title": "Unit suite - The promise returned by the update method",
        "suites": [],
        "tests": [
          {
            "title": "should be rejected if the remote argument `documentId` is not a string",
            "fullTitle": "Unit suite - The promise returned by the update method should be rejected if the remote argument `documentId` is not a string",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> methods.update().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>\n});",
            "isRoot": false,
            "uuid": "543bcee1-7299-4171-b931-6db0f09614bc",
            "parentUUID": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
            "skipped": false
          },
          {
            "title": "should be rejected if the remote argument `patches` is not an array of patches",
            "fullTitle": "Unit suite - The promise returned by the update method should be rejected if the remote argument `patches` is not an array of patches",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">return</span> methods.update(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"Second argument `patches` must be an array of JSON patches\"</span>\n});",
            "isRoot": false,
            "uuid": "34042179-794e-4c45-8042-bbb4443e96dd",
            "parentUUID": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
            "skipped": false
          },
          {
            "title": "should be rejected if no document with the given id is found",
            "fullTitle": "Unit suite - The promise returned by the update method should be rejected if no document with the given id is found",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">404</span>,\n    message: <span class=\"hljs-string\">\"Document not found\"</span>\n});",
            "isRoot": false,
            "uuid": "1fef2c6c-d6a6-4ebf-a954-26436e271d73",
            "parentUUID": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
            "skipped": false
          },
          {
            "title": "should be rejected if running validation rules fails",
            "fullTitle": "Unit suite - The promise returned by the update method should be rejected if running validation rules fails",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    )),\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
            "isRoot": false,
            "uuid": "e03bef76-1ea5-4d94-94bb-ae4e5858958b",
            "parentUUID": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
            "skipped": false
          },
          {
            "title": "should be rejected if updating fails",
            "fullTitle": "Unit suite - The promise returned by the update method should be rejected if updating fails",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        update: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Update error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Update error\"</span>\n});",
            "isRoot": false,
            "uuid": "a025abcd-76a0-4047-9f45-d55abb584c59",
            "parentUUID": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
            "skipped": false
          },
          {
            "title": "should be resolved with null if nothing fails",
            "fullTitle": "Unit suite - The promise returned by the update method should be resolved with null if nothing fails",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        update: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "f9bba53f-2e5b-478f-a7af-a4402e49f0c5",
            "parentUUID": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/methods/update.js",
        "uuid": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/unit/methods/update.js",
        "passes": [
          "[Circular ~.suites.suites.19.tests.0]",
          "[Circular ~.suites.suites.19.tests.1]",
          "[Circular ~.suites.suites.19.tests.2]",
          "[Circular ~.suites.suites.19.tests.3]",
          "[Circular ~.suites.suites.19.tests.4]",
          "[Circular ~.suites.suites.19.tests.5]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 5
      },
      {
        "title": "Integration suite - Inserting a document",
        "suites": [],
        "tests": [
          {
            "title": "400 on calling the api with the wrong arguments",
            "fullTitle": "Integration suite - Inserting a document 400 on calling the api with the wrong arguments",
            "timedOut": false,
            "duration": 73,
            "state": "passed",
            "speed": "medium",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [<span class=\"hljs-string\">\"myDocument\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"First argument `newDocument` must be an object\"</span>});",
            "isRoot": false,
            "uuid": "d61783bd-9fa3-406b-a999-63979d72143c",
            "parentUUID": "1847e8be-20d2-44ae-ba57-fddf52dd9e9c",
            "skipped": false
          },
          {
            "title": "error if validation rules fail [throwing]",
            "fullTitle": "Integration suite - Inserting a document error if validation rules fail [throwing]",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Validation error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"Validation error\"</span>});",
            "isRoot": false,
            "uuid": "13a93e72-7249-4b1b-a29f-e88d608e2971",
            "parentUUID": "1847e8be-20d2-44ae-ba57-fddf52dd9e9c",
            "skipped": false
          },
          {
            "title": "error if validation rules fail [returning an eventually rejected promise]",
            "fullTitle": "Integration suite - Inserting a document error if validation rules fail [returning an eventually rejected promise]",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> BPromise.reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">489</span>, <span class=\"hljs-string\">\"Another validation error\"</span>));\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">489</span>)\n    .expect({error: <span class=\"hljs-string\">\"Another validation error\"</span>});",
            "isRoot": false,
            "uuid": "24bfa8fc-14f6-419f-869a-50e04617346e",
            "parentUUID": "1847e8be-20d2-44ae-ba57-fddf52dd9e9c",
            "skipped": false
          },
          {
            "title": "inserting the document successful (after multiple validation rules pass)",
            "fullTitle": "Integration suite - Inserting a document inserting the document successful (after multiple validation rules pass)",
            "timedOut": false,
            "duration": 6,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements\n    .addValidationRules({\n        insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n    })\n    .addValidationRules({\n        insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.resolve(<span class=\"hljs-literal\">null</span>);\n        }\n    });\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> cursor = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>).find({});\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(cursor.count, cursor)();\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(count)</span> </span>{\n        count.should.equal(<span class=\"hljs-number\">1</span>);\n    });",
            "isRoot": false,
            "uuid": "99420ed0-e26d-4558-8357-c36b77b817b8",
            "parentUUID": "1847e8be-20d2-44ae-ba57-fddf52dd9e9c",
            "skipped": false
          },
          {
            "title": "automatic assignment of a string _id",
            "fullTitle": "Integration suite - Inserting a document automatic assignment of a string _id",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> collection = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>);\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(collection.findOne, collection)({});\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(element)</span> </span>{\n        element._id.should.be.a.String;\n        element._id.length.should.equal(<span class=\"hljs-number\">32</span>);\n    });",
            "isRoot": false,
            "uuid": "08ca8781-56c5-47c4-bdc2-644d566a12cf",
            "parentUUID": "1847e8be-20d2-44ae-ba57-fddf52dd9e9c",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/integration/insert.js",
        "uuid": "1847e8be-20d2-44ae-ba57-fddf52dd9e9c",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/integration/insert.js",
        "passes": [
          "[Circular ~.suites.suites.20.tests.0]",
          "[Circular ~.suites.suites.20.tests.1]",
          "[Circular ~.suites.suites.20.tests.2]",
          "[Circular ~.suites.suites.20.tests.3]",
          "[Circular ~.suites.suites.20.tests.4]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 99
      },
      {
        "title": "Integration suite - Removing a document",
        "suites": [],
        "tests": [
          {
            "title": "400 on calling the api with the wrong arguments",
            "fullTitle": "Integration suite - Removing a document 400 on calling the api with the wrong arguments",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>});",
            "isRoot": false,
            "uuid": "8f31c3bb-fe24-4722-a328-0af6393be17d",
            "parentUUID": "d86a06fb-948e-4bb9-b9f6-c9008eac6a7f",
            "skipped": false
          },
          {
            "title": "404 on document not found",
            "fullTitle": "Integration suite - Removing a document 404 on document not found",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"idNotInDatabase\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">404</span>)\n    .expect({error: <span class=\"hljs-string\">\"Document not found\"</span>});",
            "isRoot": false,
            "uuid": "05715ee0-754c-453f-be6b-e0af0f3c96e3",
            "parentUUID": "d86a06fb-948e-4bb9-b9f6-c9008eac6a7f",
            "skipped": false
          },
          {
            "title": "error if validation rules fail [throwing]",
            "fullTitle": "Integration suite - Removing a document error if validation rules fail [throwing]",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Validation error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"Validation error\"</span>});",
            "isRoot": false,
            "uuid": "ee4ed6fe-7f61-4042-9d99-fc3f64889878",
            "parentUUID": "d86a06fb-948e-4bb9-b9f6-c9008eac6a7f",
            "skipped": false
          },
          {
            "title": "error if validation rules fail [returning an eventually rejected promise]",
            "fullTitle": "Integration suite - Removing a document error if validation rules fail [returning an eventually rejected promise]",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> BPromise.reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">489</span>, <span class=\"hljs-string\">\"Another validation error\"</span>));\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">489</span>)\n    .expect({error: <span class=\"hljs-string\">\"Another validation error\"</span>});",
            "isRoot": false,
            "uuid": "ab87ea72-1322-497d-93f6-1bbb43cb30ea",
            "parentUUID": "d86a06fb-948e-4bb9-b9f6-c9008eac6a7f",
            "skipped": false
          },
          {
            "title": "removing the document successful (after multiple validation rules pass)",
            "fullTitle": "Integration suite - Removing a document removing the document successful (after multiple validation rules pass)",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements\n    .addValidationRules({\n        remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n    })\n    .addValidationRules({\n        remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.resolve(<span class=\"hljs-literal\">null</span>);\n        }\n    });\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> collection = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>);\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(collection.findOne, collection)({\n            _id: <span class=\"hljs-string\">\"elementId\"</span>\n        });\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(element)</span> </span>{\n        (element === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
            "isRoot": false,
            "uuid": "6e9919f4-c740-4bf9-acd8-a115968ebb95",
            "parentUUID": "d86a06fb-948e-4bb9-b9f6-c9008eac6a7f",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/integration/remove.js",
        "uuid": "d86a06fb-948e-4bb9-b9f6-c9008eac6a7f",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/integration/remove.js",
        "passes": [
          "[Circular ~.suites.suites.21.tests.0]",
          "[Circular ~.suites.suites.21.tests.1]",
          "[Circular ~.suites.suites.21.tests.2]",
          "[Circular ~.suites.suites.21.tests.3]",
          "[Circular ~.suites.suites.21.tests.4]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 5,
        "totalPasses": 5,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 19
      },
      {
        "title": "Integration suite - Updating a document",
        "suites": [],
        "tests": [
          {
            "title": "400 on calling the api with the wrong arguments [first argument]",
            "fullTitle": "Integration suite - Updating a document 400 on calling the api with the wrong arguments [first argument]",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [{}, <span class=\"hljs-string\">\"previous-arg-not-a-string\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>});",
            "isRoot": false,
            "uuid": "9b8ed0c7-f40f-4bd9-861b-7280f6b2de98",
            "parentUUID": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
            "skipped": false
          },
          {
            "title": "400 on calling the api with the wrong arguments [second argument]",
            "fullTitle": "Integration suite - Updating a document 400 on calling the api with the wrong arguments [second argument]",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"second-arg-not-array-of-patches\"</span>, {}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"Second argument `patches` must be an array of JSON patches\"</span>});",
            "isRoot": false,
            "uuid": "6cd6ba86-3f17-4ae9-8c71-7c0ac979a7a9",
            "parentUUID": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
            "skipped": false
          },
          {
            "title": "404 on document not found",
            "fullTitle": "Integration suite - Updating a document 404 on document not found",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"idNotInDatabase\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">404</span>)\n    .expect({error: <span class=\"hljs-string\">\"Document not found\"</span>});",
            "isRoot": false,
            "uuid": "a243a492-2522-4409-94f7-d0edb6c4e311",
            "parentUUID": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
            "skipped": false
          },
          {
            "title": "error if validation rules fail [throwing]",
            "fullTitle": "Integration suite - Updating a document error if validation rules fail [throwing]",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Validation error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"Validation error\"</span>});",
            "isRoot": false,
            "uuid": "2a9af702-314a-4ed5-9055-d4606a0db5cd",
            "parentUUID": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
            "skipped": false
          },
          {
            "title": "error if validation rules fail [returning an eventually rejected promise]",
            "fullTitle": "Integration suite - Updating a document error if validation rules fail [returning an eventually rejected promise]",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> BPromise.reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">489</span>, <span class=\"hljs-string\">\"Another validation error\"</span>));\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">489</span>)\n    .expect({error: <span class=\"hljs-string\">\"Another validation error\"</span>});",
            "isRoot": false,
            "uuid": "765069fc-f767-4563-b2c1-379ba7cc10d7",
            "parentUUID": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
            "skipped": false
          },
          {
            "title": "updating the document successful (after multiple validation rules pass)",
            "fullTitle": "Integration suite - Updating a document updating the document successful (after multiple validation rules pass)",
            "timedOut": false,
            "duration": 5,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements\n    .addValidationRules({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n    })\n    .addValidationRules({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.resolve(<span class=\"hljs-literal\">null</span>);\n        }\n    });\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> collection = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>);\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(collection.findOne, collection)({\n            _id: <span class=\"hljs-string\">\"elementId\"</span>\n        });\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(element)</span> </span>{\n        element.should.eql({\n            _id: <span class=\"hljs-string\">\"elementId\"</span>,\n            prop: <span class=\"hljs-string\">\"value\"</span>\n        });\n    });",
            "isRoot": false,
            "uuid": "c24d93f3-0478-4416-81a5-1bd39cb5be1d",
            "parentUUID": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/integration/update.js",
        "uuid": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
        "fullFile": "/Users/pscanf/mondora/meteor-wapi-collection/test/integration/update.js",
        "passes": [
          "[Circular ~.suites.suites.22.tests.0]",
          "[Circular ~.suites.suites.22.tests.1]",
          "[Circular ~.suites.suites.22.tests.2]",
          "[Circular ~.suites.suites.22.tests.3]",
          "[Circular ~.suites.suites.22.tests.4]",
          "[Circular ~.suites.suites.22.tests.5]"
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 6,
        "totalPasses": 6,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 23
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "55d97cee-0c6b-4d65-8522-b2d6f0345a08",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should add validation rules to the collection instance",
      "fullTitle": "Unit suite - The addValidationRules method should add validation rules to the collection instance",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [],\n        update: [],\n        remove: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> insert = sinon.spy();\n<span class=\"hljs-keyword\">var</span> update = sinon.spy();\n<span class=\"hljs-keyword\">var</span> remove = sinon.spy();\nCollection.prototype.addValidationRules.call(instance, {\n    insert: insert,\n    update: update,\n    remove: remove\n});\ninstance.validationRules.insert[<span class=\"hljs-number\">0</span>].should.equal(insert);\ninstance.validationRules.update[<span class=\"hljs-number\">0</span>].should.equal(update);\ninstance.validationRules.remove[<span class=\"hljs-number\">0</span>].should.equal(remove);",
      "isRoot": false,
      "uuid": "589ab8f5-8a34-4eed-ab83-3d28c64e7b39",
      "parentUUID": "e9c9bd6d-6dfe-42d7-9a1c-0c44b0ea72c0",
      "skipped": false
    },
    {
      "title": "should return the collection instance to allow method chaining",
      "fullTitle": "Unit suite - The addValidationRules method should return the collection instance to allow method chaining",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [],\n        update: [],\n        remove: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> insert = sinon.spy();\n<span class=\"hljs-keyword\">var</span> update = sinon.spy();\n<span class=\"hljs-keyword\">var</span> remove = sinon.spy();\n<span class=\"hljs-keyword\">var</span> ret = Collection.prototype.addValidationRules.call(instance, {});\nret.should.equal(instance);",
      "isRoot": false,
      "uuid": "7cf9ec5f-4b40-48cf-bf1b-73745cdb6cb4",
      "parentUUID": "e9c9bd6d-6dfe-42d7-9a1c-0c44b0ea72c0",
      "skipped": false
    },
    {
      "title": "should attach methods to the collection's mw instance",
      "fullTitle": "Unit suite - The attachMethods method should attach methods to the collection's mw instance",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    name: <span class=\"hljs-string\">\"elements\"</span>,\n    mw: {\n        methods: sinon.spy()\n    }\n};\nCollection.prototype.attachMethods.call(instance);\n<span class=\"hljs-keyword\">var</span> methods = instance.mw.methods.firstCall.args[<span class=\"hljs-number\">0</span>];\nR.keys(methods).should.eql([\n    <span class=\"hljs-string\">\"/elements/insert\"</span>,\n    <span class=\"hljs-string\">\"/elements/update\"</span>,\n    <span class=\"hljs-string\">\"/elements/remove\"</span>\n]);",
      "isRoot": false,
      "uuid": "3ec8712e-2b7d-410c-98f7-d5aff353e0ce",
      "parentUUID": "207c967c-fc64-409a-a171-e682c0493f4d",
      "skipped": false
    },
    {
      "title": "should save the mw instance, the name, and init the collection instance",
      "fullTitle": "Unit suite - The Collection constructor should save the mw instance, the name, and init the collection instance",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = {};\n<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.mw.should.equal(mw);\nElements.name.should.equal(<span class=\"hljs-string\">\"elements\"</span>);\nCollection.prototype.createDbProxy.called.should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.createDbProxy.calledOn(Elements).should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.attachMethods.called.should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.attachMethods.calledOn(Elements).should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.initValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.initValidationRules.calledOn(Elements).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "56aa9f54-a16c-4c0f-9f7e-100bfe671125",
      "parentUUID": "29fac72a-93e3-45cc-a894-ca7a08dff136",
      "skipped": false
    },
    {
      "title": "should create the dbCollection proxy as a property of to the collection instance",
      "fullTitle": "Unit suite - The createDbProxy method should create the dbCollection proxy as a property of to the collection instance",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    name: <span class=\"hljs-string\">\"elements\"</span>,\n    mw: {\n        db: {\n            collection: R.always({\n                findOne: R.always(),\n                insert: R.always(),\n                update: R.always(),\n                remove: R.always()\n            })\n        }\n    }\n};\nCollection.prototype.createDbProxy.call(instance);\ninstance.dbCollection.should.be.a.Object;\ninstance.dbCollection.findOne.should.be.a.Function;\ninstance.dbCollection.insert.should.be.a.Function;\ninstance.dbCollection.update.should.be.a.Function;\ninstance.dbCollection.remove.should.be.a.Function;",
      "isRoot": false,
      "uuid": "53ce5996-b48a-40fa-b798-7c65cdac2ec8",
      "parentUUID": "70dd187b-d447-4581-9e32-23f793e5cae6",
      "skipped": false
    },
    {
      "title": "should create the validationRules store as a property of to the collection instance",
      "fullTitle": "Unit suite - The initValidationRules method should create the validationRules store as a property of to the collection instance",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {};\nCollection.prototype.initValidationRules.call(instance);\ninstance.validationRules.should.eql({\n    insert: [],\n    update: [],\n    remove: []\n});",
      "isRoot": false,
      "uuid": "f285afb3-bc71-4446-abb1-a7fa4b4f1671",
      "parentUUID": "b70f41a2-3cc0-4097-b9a1-e37711b72fbf",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The runValidationRules method should return a promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: []\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, {}, {})\n    .should.be.a.Promise;",
      "isRoot": false,
      "uuid": "fc1969e0-1795-4a42-9725-a98e897ad694",
      "parentUUID": "f99eb51d-c0b4-444c-ad7c-6465abbef3fd",
      "skipped": false
    },
    {
      "title": "should run all validation rules for the specified method",
      "fullTitle": "Unit suite - The runValidationRules method should run all validation rules for the specified method",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> rule_0 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> rule_1 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> rule_2 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [rule_0, rule_1, rule_2]\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, {}, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        rule_0.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        rule_1.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        rule_2.called.should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "1d67339f-04e0-4c82-8e5b-548edc051844",
      "parentUUID": "f99eb51d-c0b4-444c-ad7c-6465abbef3fd",
      "skipped": false
    },
    {
      "title": "should call rules with the correct context and arguments",
      "fullTitle": "Unit suite - The runValidationRules method should call rules with the correct context and arguments",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> insertRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> updateRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> removeRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [insertRule],\n        update: [updateRule],\n        remove: [removeRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> context = {context: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> oldDocument = {oldDocument: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> newDocument = {newDocument: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> insertResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, newDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        insertRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        insertRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">1</span>);\n        insertRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(newDocument);\n    });\n<span class=\"hljs-keyword\">var</span> updateResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"update\"</span>, oldDocument, newDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        updateRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        updateRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">2</span>);\n        updateRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(oldDocument);\n        updateRule.firstCall.args[<span class=\"hljs-number\">1</span>].should.eql(newDocument);\n    });\n<span class=\"hljs-keyword\">var</span> removeResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"remove\"</span>, oldDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        removeRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        removeRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">1</span>);\n        removeRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(oldDocument);\n    });\n<span class=\"hljs-keyword\">return</span> BPromise.all([\n    insertResult,\n    updateResult,\n    removeResult\n]);",
      "isRoot": false,
      "uuid": "065b78f9-c4b8-4b14-bc3b-dc7e56a81db0",
      "parentUUID": "f99eb51d-c0b4-444c-ad7c-6465abbef3fd",
      "skipped": false
    },
    {
      "title": "should be fulfilled if all validation rules return either a value or an eventually fulfilled promise",
      "fullTitle": "Unit suite - The promise returned by the runValidationRules method should be fulfilled if all validation rules return either a value or an eventually fulfilled promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> rule_0 = sinon.stub().returns(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">var</span> rule_1 = sinon.stub().returns(<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-keyword\">var</span> rule_2 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [rule_0, rule_1, rule_2]\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.fulfilled;",
      "isRoot": false,
      "uuid": "f88c5cbd-adb0-4bb5-ba16-f207b43b0dc8",
      "parentUUID": "bbb49f09-8c75-459c-9f5c-2ba446959f77",
      "skipped": false
    },
    {
      "title": "should be rejected if any of the validation rules either throws or returns an eventually rejected promise",
      "fullTitle": "Unit suite - The promise returned by the runValidationRules method should be rejected if any of the validation rules either throws or returns an eventually rejected promise",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> goodRule = sinon.stub().returns(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">var</span> badRule = sinon.stub().throws(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>());\n<span class=\"hljs-keyword\">var</span> eventuallyBadRule = sinon.stub().returns(BPromise.reject());\n<span class=\"hljs-keyword\">var</span> instance_0 = {\n    validationRules: {\n        insert: [goodRule, badRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> rejection_0 = Collection.prototype.runValidationRules\n    .call(instance_0, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.rejected;\n<span class=\"hljs-keyword\">var</span> instance_1 = {\n    validationRules: {\n        insert: [goodRule, eventuallyBadRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> rejection_1 = Collection.prototype.runValidationRules\n    .call(instance_1, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.rejected;\n<span class=\"hljs-keyword\">return</span> BPromise.all([rejection_0, rejection_1]);",
      "isRoot": false,
      "uuid": "82c9c585-ffe7-4f8f-8209-ffbbf16e19a9",
      "parentUUID": "bbb49f09-8c75-459c-9f5c-2ba446959f77",
      "skipped": false
    },
    {
      "title": "should apply the supplied set of patches to the supplied object",
      "fullTitle": "Unit suite - The applyPatches function should apply the supplied set of patches to the supplied object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> oldObj = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = {\n    a: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare(oldObj, newObj);\n<span class=\"hljs-keyword\">var</span> patchedObj = applyPatches(oldObj, patches);\npatchedObj.should.eql(newObj);",
      "isRoot": false,
      "uuid": "121676b2-f76b-4921-8244-970d7990062a",
      "parentUUID": "ce7d7f06-dd91-48c4-9c6a-79d644cc0674",
      "skipped": false
    },
    {
      "title": "should not mutate the object to which it applies patches",
      "fullTitle": "Unit suite - The applyPatches function should not mutate the object to which it applies patches",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> oldObj = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> oldObjClone = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = {\n    a: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare(oldObj, newObj);\napplyPatches(oldObj, patches);\noldObj.should.eql(oldObjClone);",
      "isRoot": false,
      "uuid": "6a7851b6-f954-4d88-8e2e-1e38adf36876",
      "parentUUID": "ce7d7f06-dd91-48c4-9c6a-79d644cc0674",
      "skipped": false
    },
    {
      "title": "should return true the argument is of the correct type",
      "fullTitle": "Unit suite - The argMatches function should return true the argument is of the correct type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "argMatches(t.Str, <span class=\"hljs-string\">\"I'm a string\"</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "ef5b2060-7cae-432e-b884-1cb4e551c618",
      "parentUUID": "6c5587c8-de04-4245-be0f-273a2d23ddb9",
      "skipped": false
    },
    {
      "title": "should throw an MW.Error if the argument is of the incorrect type",
      "fullTitle": "Unit suite - The argMatches function should throw an MW.Error if the argument is of the incorrect type",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "argMatches(t.Num, <span class=\"hljs-string\">\"I'm a string, not a number\"</span>).should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "cbb1a1fa-754a-4ebd-88be-175c88b52710",
      "parentUUID": "6c5587c8-de04-4245-be0f-273a2d23ddb9",
      "skipped": false
    },
    {
      "title": "should not throw if the condition is truthy",
      "fullTitle": "Unit suite - The ensure function should not throw if the condition is truthy",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> peacefulFella = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    ensure(error, <span class=\"hljs-literal\">true</span>);\n};\npeacefulFella.should.not.throw();",
      "isRoot": false,
      "uuid": "1e6018b4-b5b2-41f6-b552-79fecc06e0b1",
      "parentUUID": "86c84287-67cf-4258-9c72-d24fbb1c7bd0",
      "skipped": false
    },
    {
      "title": "should throw if the condition is falsy",
      "fullTitle": "Unit suite - The ensure function should throw if the condition is falsy",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> troublemaker = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    ensure(error, <span class=\"hljs-literal\">false</span>);\n};\ntroublemaker.should.throw(<span class=\"hljs-built_in\">Error</span>);",
      "isRoot": false,
      "uuid": "30b842f4-858f-4b31-b315-6df321cd6574",
      "parentUUID": "86c84287-67cf-4258-9c72-d24fbb1c7bd0",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The getOldDocument function should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.a.Promise;",
      "isRoot": false,
      "uuid": "a2be5ee4-28c4-49f4-b15f-f1f98058cb8e",
      "parentUUID": "021f592a-3d17-419b-83e9-34f3d6833ee3",
      "skipped": false
    },
    {
      "title": "should be fulfilled if a document is found",
      "fullTitle": "Unit suite - The promise returned by the getOldDocument function should be fulfilled if a document is found",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.fulfilledWith({});",
      "isRoot": false,
      "uuid": "9f82fd21-2335-4fef-8ac5-ebe2138f0005",
      "parentUUID": "43920f4f-2b09-461c-a545-74cb5931cf2b",
      "skipped": false
    },
    {
      "title": "should be rejected with a MW.Error if no document is found",
      "fullTitle": "Unit suite - The promise returned by the getOldDocument function should be rejected with a MW.Error if no document is found",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.rejectedWith(MW.Error);",
      "isRoot": false,
      "uuid": "f1cd6e64-8e58-443c-aaa6-19026e136dcd",
      "parentUUID": "43920f4f-2b09-461c-a545-74cb5931cf2b",
      "skipped": false
    },
    {
      "title": "should be a tcomb type",
      "fullTitle": "Unit suite - The PatchesType object should be a tcomb type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t.Type.is(PatchesType).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "fe356913-2410-4245-b9fd-f33c7bf592b5",
      "parentUUID": "28b0622a-d430-433f-93aa-13f896a7c1db",
      "skipped": false
    },
    {
      "title": "should match valid JSON patches, unless they're an empty array",
      "fullTitle": "Unit suite - The PatchesType object should match valid JSON patches, unless they're an empty array",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> validPatches_0 = [{\n    op: <span class=\"hljs-string\">\"add\"</span>,\n    path: <span class=\"hljs-string\">\"/prop\"</span>,\n    value: <span class=\"hljs-string\">\"value\"</span>\n}];\n<span class=\"hljs-keyword\">var</span> validPatches_1 = jp.compare({a: <span class=\"hljs-number\">1</span>}, {b: <span class=\"hljs-number\">1</span>});\nt.validate(validPatches_0, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">true</span>);\nt.validate(validPatches_1, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "4a6e8001-d466-44d6-abab-4115a49e1123",
      "parentUUID": "28b0622a-d430-433f-93aa-13f896a7c1db",
      "skipped": false
    },
    {
      "title": "should not match invalid JSON patches and empty arrays",
      "fullTitle": "Unit suite - The PatchesType object should not match invalid JSON patches and empty arrays",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> invalidPatches_0 = [{a: <span class=\"hljs-number\">2</span>}];\nt.validate(invalidPatches_0, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-keyword\">var</span> invalidPatches_1 = [];\nt.validate(invalidPatches_1, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "d2b127bd-9f68-47fa-86bd-4bf6fa561d9b",
      "parentUUID": "28b0622a-d430-433f-93aa-13f896a7c1db",
      "skipped": false
    },
    {
      "title": "should generate a random 16-bytes string (32 characters long)",
      "fullTitle": "Unit suite - The randomId function should generate a random 16-bytes string (32 characters long)",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> string = randomId();\nstring.should.be.a.String;\nstring.length.should.equal(<span class=\"hljs-number\">32</span>);",
      "isRoot": false,
      "uuid": "73b738d8-3b1f-4c62-af66-4410659f62b0",
      "parentUUID": "7c9e6409-4bee-497f-a946-13433d5d2a27",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The insert method should return a promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = methods.insert();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "596a959a-6b08-4c5a-a1df-af5a08681bea",
      "parentUUID": "37e99f02-efc0-4bd1-9515-523cf316c390",
      "skipped": false
    },
    {
      "title": "should run validation insert rules",
      "fullTitle": "Unit suite - The insert method should run validation insert rules",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy()\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"insert\"</span>);\n    });",
      "isRoot": false,
      "uuid": "92a98c12-91e7-4080-a0ea-faa2c089ca86",
      "parentUUID": "37e99f02-efc0-4bd1-9515-523cf316c390",
      "skipped": false
    },
    {
      "title": "should give the document a random _id if it doesn't have one",
      "fullTitle": "Unit suite - The insert method should give the document a random _id if it doesn't have one",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> insertedDocument = collection.dbCollection.insert.firstCall.args[<span class=\"hljs-number\">0</span>];\n        insertedDocument._id.should.be.a.String;\n        insertedDocument._id.length.should.equal(<span class=\"hljs-number\">32</span>);\n    });",
      "isRoot": false,
      "uuid": "d203a253-d7fe-4160-9678-1009074b7a5f",
      "parentUUID": "37e99f02-efc0-4bd1-9515-523cf316c390",
      "skipped": false
    },
    {
      "title": "should call dbCollection.insert with the new document",
      "fullTitle": "Unit suite - The insert method should call dbCollection.insert with the new document",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {_id: <span class=\"hljs-string\">\"_id\"</span>, a: <span class=\"hljs-number\">1</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.dbCollection.insert.calledWith({\n            _id: <span class=\"hljs-string\">\"_id\"</span>,\n            a: <span class=\"hljs-number\">1</span>\n        }).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "c1f9ea64-7b2a-4072-9629-23513d6ca08e",
      "parentUUID": "37e99f02-efc0-4bd1-9515-523cf316c390",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `newDocument` is not an object",
      "fullTitle": "Unit suite - The promise returned by the insert method should be rejected if the remote argument `newDocument` is not an object",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.insert().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `newDocument` must be an object\"</span>\n});",
      "isRoot": false,
      "uuid": "56cc121f-546c-496c-b821-8af1949146a3",
      "parentUUID": "f70e7e3a-ab62-469c-94b0-0bc15ce4bc1f",
      "skipped": false
    },
    {
      "title": "should be rejected if running validation rules fails",
      "fullTitle": "Unit suite - The promise returned by the insert method should be rejected if running validation rules fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    ))\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {}).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
      "isRoot": false,
      "uuid": "b908878e-00f6-4d54-abea-0c73271585ce",
      "parentUUID": "f70e7e3a-ab62-469c-94b0-0bc15ce4bc1f",
      "skipped": false
    },
    {
      "title": "should be rejected if inserting fails",
      "fullTitle": "Unit suite - The promise returned by the insert method should be rejected if inserting fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Insert error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {}).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Insert error\"</span>\n});",
      "isRoot": false,
      "uuid": "8421cc3a-130b-4944-b34d-2b92aa9450a3",
      "parentUUID": "f70e7e3a-ab62-469c-94b0-0bc15ce4bc1f",
      "skipped": false
    },
    {
      "title": "should be resolved with null if nothing fails",
      "fullTitle": "Unit suite - The promise returned by the insert method should be resolved with null if nothing fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "8ec59634-1a3b-42c9-9b4d-93626af191c4",
      "parentUUID": "f70e7e3a-ab62-469c-94b0-0bc15ce4bc1f",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The remove method should return a promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = methods.remove();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "f8cf6c37-e654-4c8e-a7a7-873063e335eb",
      "parentUUID": "99a98a85-701e-4630-9cdb-d13d27e439c3",
      "skipped": false
    },
    {
      "title": "should run validation remove rules",
      "fullTitle": "Unit suite - The remove method should run validation remove rules",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy(),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({}))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>)\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"remove\"</span>);\n    });",
      "isRoot": false,
      "uuid": "2d521f9c-ba84-47d0-a53e-f5778ccc81c2",
      "parentUUID": "99a98a85-701e-4630-9cdb-d13d27e439c3",
      "skipped": false
    },
    {
      "title": "should call dbCollection.remove to remove the old document",
      "fullTitle": "Unit suite - The remove method should call dbCollection.remove to remove the old document",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({_id: <span class=\"hljs-string\">\"_id\"</span>})),\n        remove: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"_id\"</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.dbCollection.remove.calledWith({\n            _id: <span class=\"hljs-string\">\"_id\"</span>\n        }).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "c2c86efa-f4ea-46e4-930f-f9b5957dee85",
      "parentUUID": "99a98a85-701e-4630-9cdb-d13d27e439c3",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `documentId` is not a string",
      "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if the remote argument `documentId` is not a string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.remove().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>\n});",
      "isRoot": false,
      "uuid": "c25a54d2-69a0-407c-830e-fd88f8e3152d",
      "parentUUID": "ad035076-320d-43f2-958b-96bd8e1711bd",
      "skipped": false
    },
    {
      "title": "should be rejected if no document with the given id is found",
      "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if no document with the given id is found",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">404</span>,\n    message: <span class=\"hljs-string\">\"Document not found\"</span>\n});",
      "isRoot": false,
      "uuid": "c308b642-94c8-4b7a-a589-f422d2b593de",
      "parentUUID": "ad035076-320d-43f2-958b-96bd8e1711bd",
      "skipped": false
    },
    {
      "title": "should be rejected if running validation rules fails",
      "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if running validation rules fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    )),\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
      "isRoot": false,
      "uuid": "c700c7de-30a8-4d60-a0fc-807cffc79d99",
      "parentUUID": "ad035076-320d-43f2-958b-96bd8e1711bd",
      "skipped": false
    },
    {
      "title": "should be rejected if removing fails",
      "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if removing fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        remove: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Remove error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Remove error\"</span>\n});",
      "isRoot": false,
      "uuid": "d005b611-22d3-478a-b9bc-010e7aba8670",
      "parentUUID": "ad035076-320d-43f2-958b-96bd8e1711bd",
      "skipped": false
    },
    {
      "title": "should be resolved with null if nothing fails",
      "fullTitle": "Unit suite - The promise returned by the remove method should be resolved with null if nothing fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        remove: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "37866e01-c065-49d0-b607-e20ecca8656a",
      "parentUUID": "ad035076-320d-43f2-958b-96bd8e1711bd",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The update method should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = methods.update();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "e1ff7e59-80e2-4905-9776-bd21f42db32e",
      "parentUUID": "2a702334-0301-4e26-8159-bc757b467909",
      "skipped": false
    },
    {
      "title": "should run validation update rules",
      "fullTitle": "Unit suite - The update method should run validation update rules",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy(),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({}))\n    }\n};\n<span class=\"hljs-keyword\">var</span> patches = [{\n    op: <span class=\"hljs-string\">\"add\"</span>,\n    path: <span class=\"hljs-string\">\"/prop\"</span>,\n    value: <span class=\"hljs-string\">\"value\"</span>\n}];\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches)\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"update\"</span>);\n    });",
      "isRoot": false,
      "uuid": "1e5c320c-3ac2-45f6-807d-e019500105a2",
      "parentUUID": "2a702334-0301-4e26-8159-bc757b467909",
      "skipped": false
    },
    {
      "title": "should call dbCollection.update with the updated document",
      "fullTitle": "Unit suite - The update method should call dbCollection.update with the updated document",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({_id: <span class=\"hljs-string\">\"_id\"</span>})),\n        update: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare({}, {a: <span class=\"hljs-number\">1</span>});\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"_id\"</span>, patches)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.dbCollection.update.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.dbCollection.update.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql({\n            _id: <span class=\"hljs-string\">\"_id\"</span>\n        });\n        collection.dbCollection.update.firstCall.args[<span class=\"hljs-number\">1</span>].should.eql({\n            $set: {\n                a: <span class=\"hljs-number\">1</span>\n            }\n        });\n    });",
      "isRoot": false,
      "uuid": "c0d04403-7d9f-4b2b-8630-20546e6cccf1",
      "parentUUID": "2a702334-0301-4e26-8159-bc757b467909",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `documentId` is not a string",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if the remote argument `documentId` is not a string",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.update().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>\n});",
      "isRoot": false,
      "uuid": "3574ccc4-e7b6-4d9a-8c36-7ac3596cd684",
      "parentUUID": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `patches` is not an array of patches",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if the remote argument `patches` is not an array of patches",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.update(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"Second argument `patches` must be an array of JSON patches\"</span>\n});",
      "isRoot": false,
      "uuid": "229fbbcd-10a2-45ac-94d2-ff20dfdf2317",
      "parentUUID": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
      "skipped": false
    },
    {
      "title": "should be rejected if no document with the given id is found",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if no document with the given id is found",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">404</span>,\n    message: <span class=\"hljs-string\">\"Document not found\"</span>\n});",
      "isRoot": false,
      "uuid": "1cb91e8c-c52a-416f-b9c3-7aba813a079b",
      "parentUUID": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
      "skipped": false
    },
    {
      "title": "should be rejected if running validation rules fails",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if running validation rules fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    )),\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
      "isRoot": false,
      "uuid": "09fd4fba-b1f9-48d2-9588-9140b7473e9e",
      "parentUUID": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
      "skipped": false
    },
    {
      "title": "should be rejected if updating fails",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if updating fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        update: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Update error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Update error\"</span>\n});",
      "isRoot": false,
      "uuid": "f7a66704-c393-4b39-aaa9-7058945506b0",
      "parentUUID": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
      "skipped": false
    },
    {
      "title": "should be resolved with null if nothing fails",
      "fullTitle": "Unit suite - The promise returned by the update method should be resolved with null if nothing fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        update: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "21b9e85e-cfae-4d68-958b-92c47958607f",
      "parentUUID": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
      "skipped": false
    },
    {
      "title": "400 on calling the api with the wrong arguments",
      "fullTitle": "Integration suite - Inserting a document 400 on calling the api with the wrong arguments",
      "timedOut": false,
      "duration": 73,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [<span class=\"hljs-string\">\"myDocument\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"First argument `newDocument` must be an object\"</span>});",
      "isRoot": false,
      "uuid": "3aa85431-b2d1-434d-a780-9cc409454038",
      "parentUUID": "1847e8be-20d2-44ae-ba57-fddf52dd9e9c",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [throwing]",
      "fullTitle": "Integration suite - Inserting a document error if validation rules fail [throwing]",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Validation error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"Validation error\"</span>});",
      "isRoot": false,
      "uuid": "68a997e1-9922-4b48-91a0-2a37bd64f443",
      "parentUUID": "1847e8be-20d2-44ae-ba57-fddf52dd9e9c",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [returning an eventually rejected promise]",
      "fullTitle": "Integration suite - Inserting a document error if validation rules fail [returning an eventually rejected promise]",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> BPromise.reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">489</span>, <span class=\"hljs-string\">\"Another validation error\"</span>));\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">489</span>)\n    .expect({error: <span class=\"hljs-string\">\"Another validation error\"</span>});",
      "isRoot": false,
      "uuid": "f4fb05fa-e7cf-47de-9fc3-2acfbe3b5abd",
      "parentUUID": "1847e8be-20d2-44ae-ba57-fddf52dd9e9c",
      "skipped": false
    },
    {
      "title": "inserting the document successful (after multiple validation rules pass)",
      "fullTitle": "Integration suite - Inserting a document inserting the document successful (after multiple validation rules pass)",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements\n    .addValidationRules({\n        insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n    })\n    .addValidationRules({\n        insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.resolve(<span class=\"hljs-literal\">null</span>);\n        }\n    });\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> cursor = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>).find({});\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(cursor.count, cursor)();\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(count)</span> </span>{\n        count.should.equal(<span class=\"hljs-number\">1</span>);\n    });",
      "isRoot": false,
      "uuid": "6ccfaa31-fff4-4407-9861-22f78c11927e",
      "parentUUID": "1847e8be-20d2-44ae-ba57-fddf52dd9e9c",
      "skipped": false
    },
    {
      "title": "automatic assignment of a string _id",
      "fullTitle": "Integration suite - Inserting a document automatic assignment of a string _id",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> collection = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>);\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(collection.findOne, collection)({});\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(element)</span> </span>{\n        element._id.should.be.a.String;\n        element._id.length.should.equal(<span class=\"hljs-number\">32</span>);\n    });",
      "isRoot": false,
      "uuid": "7a29b992-f0ac-40c4-9505-bd62eb953851",
      "parentUUID": "1847e8be-20d2-44ae-ba57-fddf52dd9e9c",
      "skipped": false
    },
    {
      "title": "400 on calling the api with the wrong arguments",
      "fullTitle": "Integration suite - Removing a document 400 on calling the api with the wrong arguments",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>});",
      "isRoot": false,
      "uuid": "adb03a51-861b-44d9-a00d-900927a6a6b7",
      "parentUUID": "d86a06fb-948e-4bb9-b9f6-c9008eac6a7f",
      "skipped": false
    },
    {
      "title": "404 on document not found",
      "fullTitle": "Integration suite - Removing a document 404 on document not found",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"idNotInDatabase\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">404</span>)\n    .expect({error: <span class=\"hljs-string\">\"Document not found\"</span>});",
      "isRoot": false,
      "uuid": "ae1df54f-186a-4c8b-9614-a7ef5f0d37ca",
      "parentUUID": "d86a06fb-948e-4bb9-b9f6-c9008eac6a7f",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [throwing]",
      "fullTitle": "Integration suite - Removing a document error if validation rules fail [throwing]",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Validation error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"Validation error\"</span>});",
      "isRoot": false,
      "uuid": "94f7902f-3ed3-4207-9610-f2d230700cd2",
      "parentUUID": "d86a06fb-948e-4bb9-b9f6-c9008eac6a7f",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [returning an eventually rejected promise]",
      "fullTitle": "Integration suite - Removing a document error if validation rules fail [returning an eventually rejected promise]",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> BPromise.reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">489</span>, <span class=\"hljs-string\">\"Another validation error\"</span>));\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">489</span>)\n    .expect({error: <span class=\"hljs-string\">\"Another validation error\"</span>});",
      "isRoot": false,
      "uuid": "c30c30c3-442b-4938-9706-d128d78753bf",
      "parentUUID": "d86a06fb-948e-4bb9-b9f6-c9008eac6a7f",
      "skipped": false
    },
    {
      "title": "removing the document successful (after multiple validation rules pass)",
      "fullTitle": "Integration suite - Removing a document removing the document successful (after multiple validation rules pass)",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements\n    .addValidationRules({\n        remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n    })\n    .addValidationRules({\n        remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.resolve(<span class=\"hljs-literal\">null</span>);\n        }\n    });\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> collection = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>);\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(collection.findOne, collection)({\n            _id: <span class=\"hljs-string\">\"elementId\"</span>\n        });\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(element)</span> </span>{\n        (element === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "9eaae4f2-6e27-4aea-9d6c-fe2c63d8af09",
      "parentUUID": "d86a06fb-948e-4bb9-b9f6-c9008eac6a7f",
      "skipped": false
    },
    {
      "title": "400 on calling the api with the wrong arguments [first argument]",
      "fullTitle": "Integration suite - Updating a document 400 on calling the api with the wrong arguments [first argument]",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [{}, <span class=\"hljs-string\">\"previous-arg-not-a-string\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>});",
      "isRoot": false,
      "uuid": "bbad930f-c3eb-44e5-bbc4-60bdf17f7ade",
      "parentUUID": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
      "skipped": false
    },
    {
      "title": "400 on calling the api with the wrong arguments [second argument]",
      "fullTitle": "Integration suite - Updating a document 400 on calling the api with the wrong arguments [second argument]",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"second-arg-not-array-of-patches\"</span>, {}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"Second argument `patches` must be an array of JSON patches\"</span>});",
      "isRoot": false,
      "uuid": "f7788528-7bd5-4b04-af03-40cc346bb244",
      "parentUUID": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
      "skipped": false
    },
    {
      "title": "404 on document not found",
      "fullTitle": "Integration suite - Updating a document 404 on document not found",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"idNotInDatabase\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">404</span>)\n    .expect({error: <span class=\"hljs-string\">\"Document not found\"</span>});",
      "isRoot": false,
      "uuid": "683aad68-21b1-4c5b-bb57-94b85e75b1e0",
      "parentUUID": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [throwing]",
      "fullTitle": "Integration suite - Updating a document error if validation rules fail [throwing]",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Validation error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"Validation error\"</span>});",
      "isRoot": false,
      "uuid": "e734d524-f4e4-474f-ab45-84eb8a5e8b60",
      "parentUUID": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [returning an eventually rejected promise]",
      "fullTitle": "Integration suite - Updating a document error if validation rules fail [returning an eventually rejected promise]",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> BPromise.reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">489</span>, <span class=\"hljs-string\">\"Another validation error\"</span>));\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">489</span>)\n    .expect({error: <span class=\"hljs-string\">\"Another validation error\"</span>});",
      "isRoot": false,
      "uuid": "0b8e85be-d7a7-4555-8f17-3086155e34e0",
      "parentUUID": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
      "skipped": false
    },
    {
      "title": "updating the document successful (after multiple validation rules pass)",
      "fullTitle": "Integration suite - Updating a document updating the document successful (after multiple validation rules pass)",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements\n    .addValidationRules({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n    })\n    .addValidationRules({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.resolve(<span class=\"hljs-literal\">null</span>);\n        }\n    });\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> collection = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>);\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(collection.findOne, collection)({\n            _id: <span class=\"hljs-string\">\"elementId\"</span>\n        });\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(element)</span> </span>{\n        element.should.eql({\n            _id: <span class=\"hljs-string\">\"elementId\"</span>,\n            prop: <span class=\"hljs-string\">\"value\"</span>\n        });\n    });",
      "isRoot": false,
      "uuid": "c37342b3-0d60-4a50-a2f6-9d51a07e7b15",
      "parentUUID": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
      "skipped": false
    }
  ],
  "allHooks": [
    {
      "title": "\"before all\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.2]",
      "ctx": {
        "_runnable": {
          "title": "\"after all\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": "[Circular ~.suites.suites.2]",
          "ctx": "[Circular ~.allHooks.0.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "duration": 0,
          "_error": null
        },
        "test": "[Circular ~.allHooks.0.ctx._runnable]"
      },
      "_events": {},
      "_eventsCount": 0,
      "duration": 2,
      "_error": null
    },
    "[Circular ~.allHooks.0.ctx._runnable]",
    {
      "title": "\"before all\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.20]",
      "ctx": {
        "_runnable": {
          "title": "\"after all\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": "[Circular ~.suites.suites.20]",
          "ctx": "[Circular ~.allHooks.2.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 101841866,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 1,
          "_error": null
        },
        "test": "[Circular ~.allHooks.2.ctx._runnable]"
      },
      "_events": {},
      "_eventsCount": 0,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 101841738,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 23,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.20]",
      "ctx": "[Circular ~.allHooks.2.ctx]",
      "_events": {},
      "_eventsCount": 0,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 101841859,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 0,
      "_error": null
    },
    "[Circular ~.allHooks.3]",
    "[Circular ~.allHooks.3]",
    "[Circular ~.allHooks.3]",
    "[Circular ~.allHooks.3]",
    "[Circular ~.allHooks.2.ctx._runnable]",
    {
      "title": "\"before all\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.21]",
      "ctx": {
        "_runnable": {
          "title": "\"after all\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": "[Circular ~.suites.suites.21]",
          "ctx": "[Circular ~.allHooks.9.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 101841900,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 0,
          "_error": null
        },
        "test": "[Circular ~.allHooks.9.ctx._runnable]"
      },
      "_events": {},
      "_eventsCount": 0,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 101841867,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 7,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.21]",
      "ctx": "[Circular ~.allHooks.9.ctx]",
      "_events": {},
      "_eventsCount": 0,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 101841895,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 1,
      "_error": null
    },
    "[Circular ~.allHooks.10]",
    "[Circular ~.allHooks.10]",
    "[Circular ~.allHooks.10]",
    "[Circular ~.allHooks.10]",
    "[Circular ~.allHooks.9.ctx._runnable]",
    {
      "title": "\"before all\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.22]",
      "ctx": {
        "_runnable": {
          "title": "\"after all\" hook",
          "async": 0,
          "sync": true,
          "_timeout": 2000,
          "_slow": 75,
          "_enableTimeouts": true,
          "timedOut": false,
          "_trace": {},
          "type": "hook",
          "parent": "[Circular ~.suites.suites.22]",
          "ctx": "[Circular ~.allHooks.16.ctx]",
          "_events": {},
          "_eventsCount": 0,
          "timer": {
            "0": null,
            "_called": false,
            "_idleTimeout": -1,
            "_idlePrev": null,
            "_idleNext": null,
            "_idleStart": 101841932,
            "_onTimeout": null,
            "_repeat": null
          },
          "duration": 0,
          "_error": null
        },
        "test": "[Circular ~.allHooks.16.ctx._runnable]"
      },
      "_events": {},
      "_eventsCount": 0,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 101841901,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 4,
      "_error": null
    },
    {
      "title": "\"before each\" hook",
      "async": 0,
      "sync": true,
      "_timeout": 2000,
      "_slow": 75,
      "_enableTimeouts": true,
      "timedOut": false,
      "_trace": {},
      "type": "hook",
      "parent": "[Circular ~.suites.suites.22]",
      "ctx": "[Circular ~.allHooks.16.ctx]",
      "_events": {},
      "_eventsCount": 0,
      "timer": {
        "0": null,
        "_called": false,
        "_idleTimeout": -1,
        "_idlePrev": null,
        "_idleNext": null,
        "_idleStart": 101841926,
        "_onTimeout": null,
        "_repeat": null
      },
      "duration": 1,
      "_error": null
    },
    "[Circular ~.allHooks.17]",
    "[Circular ~.allHooks.17]",
    "[Circular ~.allHooks.17]",
    "[Circular ~.allHooks.17]",
    "[Circular ~.allHooks.17]",
    "[Circular ~.allHooks.16.ctx._runnable]"
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should add validation rules to the collection instance",
      "fullTitle": "Unit suite - The addValidationRules method should add validation rules to the collection instance",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [],\n        update: [],\n        remove: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> insert = sinon.spy();\n<span class=\"hljs-keyword\">var</span> update = sinon.spy();\n<span class=\"hljs-keyword\">var</span> remove = sinon.spy();\nCollection.prototype.addValidationRules.call(instance, {\n    insert: insert,\n    update: update,\n    remove: remove\n});\ninstance.validationRules.insert[<span class=\"hljs-number\">0</span>].should.equal(insert);\ninstance.validationRules.update[<span class=\"hljs-number\">0</span>].should.equal(update);\ninstance.validationRules.remove[<span class=\"hljs-number\">0</span>].should.equal(remove);",
      "isRoot": false,
      "uuid": "c07a4ef3-2ea0-4ce5-9cd8-575fd7bd8000",
      "parentUUID": "e9c9bd6d-6dfe-42d7-9a1c-0c44b0ea72c0",
      "skipped": false
    },
    {
      "title": "should return the collection instance to allow method chaining",
      "fullTitle": "Unit suite - The addValidationRules method should return the collection instance to allow method chaining",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [],\n        update: [],\n        remove: []\n    }\n};\n<span class=\"hljs-keyword\">var</span> insert = sinon.spy();\n<span class=\"hljs-keyword\">var</span> update = sinon.spy();\n<span class=\"hljs-keyword\">var</span> remove = sinon.spy();\n<span class=\"hljs-keyword\">var</span> ret = Collection.prototype.addValidationRules.call(instance, {});\nret.should.equal(instance);",
      "isRoot": false,
      "uuid": "17473b51-8683-4d09-907a-0f58c15a0ef3",
      "parentUUID": "e9c9bd6d-6dfe-42d7-9a1c-0c44b0ea72c0",
      "skipped": false
    },
    {
      "title": "should attach methods to the collection's mw instance",
      "fullTitle": "Unit suite - The attachMethods method should attach methods to the collection's mw instance",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    name: <span class=\"hljs-string\">\"elements\"</span>,\n    mw: {\n        methods: sinon.spy()\n    }\n};\nCollection.prototype.attachMethods.call(instance);\n<span class=\"hljs-keyword\">var</span> methods = instance.mw.methods.firstCall.args[<span class=\"hljs-number\">0</span>];\nR.keys(methods).should.eql([\n    <span class=\"hljs-string\">\"/elements/insert\"</span>,\n    <span class=\"hljs-string\">\"/elements/update\"</span>,\n    <span class=\"hljs-string\">\"/elements/remove\"</span>\n]);",
      "isRoot": false,
      "uuid": "040e3d5c-d632-4493-ae41-f8c30bed062d",
      "parentUUID": "207c967c-fc64-409a-a171-e682c0493f4d",
      "skipped": false
    },
    {
      "title": "should save the mw instance, the name, and init the collection instance",
      "fullTitle": "Unit suite - The Collection constructor should save the mw instance, the name, and init the collection instance",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> mw = {};\n<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.mw.should.equal(mw);\nElements.name.should.equal(<span class=\"hljs-string\">\"elements\"</span>);\nCollection.prototype.createDbProxy.called.should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.createDbProxy.calledOn(Elements).should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.attachMethods.called.should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.attachMethods.calledOn(Elements).should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.initValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\nCollection.prototype.initValidationRules.calledOn(Elements).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "8f8e7e32-5e6e-4732-b974-e6ad6348baaa",
      "parentUUID": "29fac72a-93e3-45cc-a894-ca7a08dff136",
      "skipped": false
    },
    {
      "title": "should create the dbCollection proxy as a property of to the collection instance",
      "fullTitle": "Unit suite - The createDbProxy method should create the dbCollection proxy as a property of to the collection instance",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    name: <span class=\"hljs-string\">\"elements\"</span>,\n    mw: {\n        db: {\n            collection: R.always({\n                findOne: R.always(),\n                insert: R.always(),\n                update: R.always(),\n                remove: R.always()\n            })\n        }\n    }\n};\nCollection.prototype.createDbProxy.call(instance);\ninstance.dbCollection.should.be.a.Object;\ninstance.dbCollection.findOne.should.be.a.Function;\ninstance.dbCollection.insert.should.be.a.Function;\ninstance.dbCollection.update.should.be.a.Function;\ninstance.dbCollection.remove.should.be.a.Function;",
      "isRoot": false,
      "uuid": "97a2c367-c4c8-4216-9bf4-e8ef53c0f28b",
      "parentUUID": "70dd187b-d447-4581-9e32-23f793e5cae6",
      "skipped": false
    },
    {
      "title": "should create the validationRules store as a property of to the collection instance",
      "fullTitle": "Unit suite - The initValidationRules method should create the validationRules store as a property of to the collection instance",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {};\nCollection.prototype.initValidationRules.call(instance);\ninstance.validationRules.should.eql({\n    insert: [],\n    update: [],\n    remove: []\n});",
      "isRoot": false,
      "uuid": "be1bfc8f-6cad-48ec-b2f0-8c9515554ccb",
      "parentUUID": "b70f41a2-3cc0-4097-b9a1-e37711b72fbf",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The runValidationRules method should return a promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: []\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, {}, {})\n    .should.be.a.Promise;",
      "isRoot": false,
      "uuid": "883dcc4b-c7ec-4691-9430-4ea70598915f",
      "parentUUID": "f99eb51d-c0b4-444c-ad7c-6465abbef3fd",
      "skipped": false
    },
    {
      "title": "should run all validation rules for the specified method",
      "fullTitle": "Unit suite - The runValidationRules method should run all validation rules for the specified method",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> rule_0 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> rule_1 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> rule_2 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [rule_0, rule_1, rule_2]\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, {}, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        rule_0.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        rule_1.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        rule_2.called.should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "504555e4-91c3-4074-92ed-315033ff31fb",
      "parentUUID": "f99eb51d-c0b4-444c-ad7c-6465abbef3fd",
      "skipped": false
    },
    {
      "title": "should call rules with the correct context and arguments",
      "fullTitle": "Unit suite - The runValidationRules method should call rules with the correct context and arguments",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> insertRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> updateRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> removeRule = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [insertRule],\n        update: [updateRule],\n        remove: [removeRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> context = {context: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> oldDocument = {oldDocument: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> newDocument = {newDocument: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-keyword\">var</span> insertResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, newDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        insertRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        insertRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">1</span>);\n        insertRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(newDocument);\n    });\n<span class=\"hljs-keyword\">var</span> updateResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"update\"</span>, oldDocument, newDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        updateRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        updateRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">2</span>);\n        updateRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(oldDocument);\n        updateRule.firstCall.args[<span class=\"hljs-number\">1</span>].should.eql(newDocument);\n    });\n<span class=\"hljs-keyword\">var</span> removeResult = Collection.prototype.runValidationRules\n    .call(instance, context, <span class=\"hljs-string\">\"remove\"</span>, oldDocument)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        removeRule.calledOn(context).should.equal(<span class=\"hljs-literal\">true</span>);\n        removeRule.firstCall.args.length.should.equal(<span class=\"hljs-number\">1</span>);\n        removeRule.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql(oldDocument);\n    });\n<span class=\"hljs-keyword\">return</span> BPromise.all([\n    insertResult,\n    updateResult,\n    removeResult\n]);",
      "isRoot": false,
      "uuid": "eee11d6b-931a-4139-be15-c67fecd9ea1a",
      "parentUUID": "f99eb51d-c0b4-444c-ad7c-6465abbef3fd",
      "skipped": false
    },
    {
      "title": "should be fulfilled if all validation rules return either a value or an eventually fulfilled promise",
      "fullTitle": "Unit suite - The promise returned by the runValidationRules method should be fulfilled if all validation rules return either a value or an eventually fulfilled promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> rule_0 = sinon.stub().returns(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">var</span> rule_1 = sinon.stub().returns(<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-keyword\">var</span> rule_2 = sinon.stub().returns(BPromise.resolve());\n<span class=\"hljs-keyword\">var</span> instance = {\n    validationRules: {\n        insert: [rule_0, rule_1, rule_2]\n    }\n};\n<span class=\"hljs-keyword\">return</span> Collection.prototype.runValidationRules\n    .call(instance, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.fulfilled;",
      "isRoot": false,
      "uuid": "0f2eb3af-15cf-4178-98d9-2409283492e6",
      "parentUUID": "bbb49f09-8c75-459c-9f5c-2ba446959f77",
      "skipped": false
    },
    {
      "title": "should be rejected if any of the validation rules either throws or returns an eventually rejected promise",
      "fullTitle": "Unit suite - The promise returned by the runValidationRules method should be rejected if any of the validation rules either throws or returns an eventually rejected promise",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> goodRule = sinon.stub().returns(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-keyword\">var</span> badRule = sinon.stub().throws(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>());\n<span class=\"hljs-keyword\">var</span> eventuallyBadRule = sinon.stub().returns(BPromise.reject());\n<span class=\"hljs-keyword\">var</span> instance_0 = {\n    validationRules: {\n        insert: [goodRule, badRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> rejection_0 = Collection.prototype.runValidationRules\n    .call(instance_0, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.rejected;\n<span class=\"hljs-keyword\">var</span> instance_1 = {\n    validationRules: {\n        insert: [goodRule, eventuallyBadRule]\n    }\n};\n<span class=\"hljs-keyword\">var</span> rejection_1 = Collection.prototype.runValidationRules\n    .call(instance_1, {}, <span class=\"hljs-string\">\"insert\"</span>, <span class=\"hljs-literal\">null</span>, {}).should.be.rejected;\n<span class=\"hljs-keyword\">return</span> BPromise.all([rejection_0, rejection_1]);",
      "isRoot": false,
      "uuid": "275f3f01-6b14-4102-90c5-c6599413c4b7",
      "parentUUID": "bbb49f09-8c75-459c-9f5c-2ba446959f77",
      "skipped": false
    },
    {
      "title": "should apply the supplied set of patches to the supplied object",
      "fullTitle": "Unit suite - The applyPatches function should apply the supplied set of patches to the supplied object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> oldObj = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = {\n    a: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare(oldObj, newObj);\n<span class=\"hljs-keyword\">var</span> patchedObj = applyPatches(oldObj, patches);\npatchedObj.should.eql(newObj);",
      "isRoot": false,
      "uuid": "26b7eaa6-a189-4ae7-996a-179724fc7675",
      "parentUUID": "ce7d7f06-dd91-48c4-9c6a-79d644cc0674",
      "skipped": false
    },
    {
      "title": "should not mutate the object to which it applies patches",
      "fullTitle": "Unit suite - The applyPatches function should not mutate the object to which it applies patches",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> oldObj = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> oldObjClone = {\n    a: <span class=\"hljs-number\">1</span>\n};\n<span class=\"hljs-keyword\">var</span> newObj = {\n    a: <span class=\"hljs-number\">2</span>\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare(oldObj, newObj);\napplyPatches(oldObj, patches);\noldObj.should.eql(oldObjClone);",
      "isRoot": false,
      "uuid": "c1e645e6-64c3-46ef-afe6-0d9f7f479a27",
      "parentUUID": "ce7d7f06-dd91-48c4-9c6a-79d644cc0674",
      "skipped": false
    },
    {
      "title": "should return true the argument is of the correct type",
      "fullTitle": "Unit suite - The argMatches function should return true the argument is of the correct type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "argMatches(t.Str, <span class=\"hljs-string\">\"I'm a string\"</span>).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "f044ee4b-c56e-49bf-b065-816eacf305f6",
      "parentUUID": "6c5587c8-de04-4245-be0f-273a2d23ddb9",
      "skipped": false
    },
    {
      "title": "should throw an MW.Error if the argument is of the incorrect type",
      "fullTitle": "Unit suite - The argMatches function should throw an MW.Error if the argument is of the incorrect type",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "argMatches(t.Num, <span class=\"hljs-string\">\"I'm a string, not a number\"</span>).should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "e8ea8c32-9c62-4743-bfb6-4afeb7817592",
      "parentUUID": "6c5587c8-de04-4245-be0f-273a2d23ddb9",
      "skipped": false
    },
    {
      "title": "should not throw if the condition is truthy",
      "fullTitle": "Unit suite - The ensure function should not throw if the condition is truthy",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> peacefulFella = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    ensure(error, <span class=\"hljs-literal\">true</span>);\n};\npeacefulFella.should.not.throw();",
      "isRoot": false,
      "uuid": "018b3b32-95dc-45df-8697-b744640229ce",
      "parentUUID": "86c84287-67cf-4258-9c72-d24fbb1c7bd0",
      "skipped": false
    },
    {
      "title": "should throw if the condition is falsy",
      "fullTitle": "Unit suite - The ensure function should throw if the condition is falsy",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> troublemaker = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    ensure(error, <span class=\"hljs-literal\">false</span>);\n};\ntroublemaker.should.throw(<span class=\"hljs-built_in\">Error</span>);",
      "isRoot": false,
      "uuid": "7e9085de-0725-4d33-a171-2ef4ac25088e",
      "parentUUID": "86c84287-67cf-4258-9c72-d24fbb1c7bd0",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The getOldDocument function should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.a.Promise;",
      "isRoot": false,
      "uuid": "81739d7a-2905-49c4-b96e-990a0a97d099",
      "parentUUID": "021f592a-3d17-419b-83e9-34f3d6833ee3",
      "skipped": false
    },
    {
      "title": "should be fulfilled if a document is found",
      "fullTitle": "Unit suite - The promise returned by the getOldDocument function should be fulfilled if a document is found",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.fulfilledWith({});",
      "isRoot": false,
      "uuid": "b3d14afa-9e07-4cf2-9976-e3f48d84258e",
      "parentUUID": "43920f4f-2b09-461c-a545-74cb5931cf2b",
      "skipped": false
    },
    {
      "title": "should be rejected with a MW.Error if no document is found",
      "fullTitle": "Unit suite - The promise returned by the getOldDocument function should be rejected with a MW.Error if no document is found",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> getOldDocument(collection).should.be.rejectedWith(MW.Error);",
      "isRoot": false,
      "uuid": "73f04575-f099-4168-93ab-31e9a131dfb5",
      "parentUUID": "43920f4f-2b09-461c-a545-74cb5931cf2b",
      "skipped": false
    },
    {
      "title": "should be a tcomb type",
      "fullTitle": "Unit suite - The PatchesType object should be a tcomb type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "t.Type.is(PatchesType).should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "8a4bf95f-99b7-4785-9d88-692db6a5b75d",
      "parentUUID": "28b0622a-d430-433f-93aa-13f896a7c1db",
      "skipped": false
    },
    {
      "title": "should match valid JSON patches, unless they're an empty array",
      "fullTitle": "Unit suite - The PatchesType object should match valid JSON patches, unless they're an empty array",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> validPatches_0 = [{\n    op: <span class=\"hljs-string\">\"add\"</span>,\n    path: <span class=\"hljs-string\">\"/prop\"</span>,\n    value: <span class=\"hljs-string\">\"value\"</span>\n}];\n<span class=\"hljs-keyword\">var</span> validPatches_1 = jp.compare({a: <span class=\"hljs-number\">1</span>}, {b: <span class=\"hljs-number\">1</span>});\nt.validate(validPatches_0, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">true</span>);\nt.validate(validPatches_1, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">true</span>);",
      "isRoot": false,
      "uuid": "92a4205b-5cfd-4801-9107-82f165394752",
      "parentUUID": "28b0622a-d430-433f-93aa-13f896a7c1db",
      "skipped": false
    },
    {
      "title": "should not match invalid JSON patches and empty arrays",
      "fullTitle": "Unit suite - The PatchesType object should not match invalid JSON patches and empty arrays",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> invalidPatches_0 = [{a: <span class=\"hljs-number\">2</span>}];\nt.validate(invalidPatches_0, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-keyword\">var</span> invalidPatches_1 = [];\nt.validate(invalidPatches_1, PatchesType).isValid().should.equal(<span class=\"hljs-literal\">false</span>);",
      "isRoot": false,
      "uuid": "b25ef306-6217-4d85-9dec-7fbb95692c6f",
      "parentUUID": "28b0622a-d430-433f-93aa-13f896a7c1db",
      "skipped": false
    },
    {
      "title": "should generate a random 16-bytes string (32 characters long)",
      "fullTitle": "Unit suite - The randomId function should generate a random 16-bytes string (32 characters long)",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> string = randomId();\nstring.should.be.a.String;\nstring.length.should.equal(<span class=\"hljs-number\">32</span>);",
      "isRoot": false,
      "uuid": "96a37d00-15b4-4c82-a408-cac41a4ba4ee",
      "parentUUID": "7c9e6409-4bee-497f-a946-13433d5d2a27",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The insert method should return a promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = methods.insert();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "ae729b98-bb13-4136-a488-ea3f253c7981",
      "parentUUID": "37e99f02-efc0-4bd1-9515-523cf316c390",
      "skipped": false
    },
    {
      "title": "should run validation insert rules",
      "fullTitle": "Unit suite - The insert method should run validation insert rules",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy()\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"insert\"</span>);\n    });",
      "isRoot": false,
      "uuid": "1dc893c9-d285-48f2-8474-64392121c343",
      "parentUUID": "37e99f02-efc0-4bd1-9515-523cf316c390",
      "skipped": false
    },
    {
      "title": "should give the document a random _id if it doesn't have one",
      "fullTitle": "Unit suite - The insert method should give the document a random _id if it doesn't have one",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> insertedDocument = collection.dbCollection.insert.firstCall.args[<span class=\"hljs-number\">0</span>];\n        insertedDocument._id.should.be.a.String;\n        insertedDocument._id.length.should.equal(<span class=\"hljs-number\">32</span>);\n    });",
      "isRoot": false,
      "uuid": "fb67947f-a3e8-4c5c-8255-e12c8db50ee8",
      "parentUUID": "37e99f02-efc0-4bd1-9515-523cf316c390",
      "skipped": false
    },
    {
      "title": "should call dbCollection.insert with the new document",
      "fullTitle": "Unit suite - The insert method should call dbCollection.insert with the new document",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {_id: <span class=\"hljs-string\">\"_id\"</span>, a: <span class=\"hljs-number\">1</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.dbCollection.insert.calledWith({\n            _id: <span class=\"hljs-string\">\"_id\"</span>,\n            a: <span class=\"hljs-number\">1</span>\n        }).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "11f75c96-624c-4f03-91ff-30968f8d8da9",
      "parentUUID": "37e99f02-efc0-4bd1-9515-523cf316c390",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `newDocument` is not an object",
      "fullTitle": "Unit suite - The promise returned by the insert method should be rejected if the remote argument `newDocument` is not an object",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.insert().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `newDocument` must be an object\"</span>\n});",
      "isRoot": false,
      "uuid": "d10fe791-945c-4709-a041-6693d91e8d3c",
      "parentUUID": "f70e7e3a-ab62-469c-94b0-0bc15ce4bc1f",
      "skipped": false
    },
    {
      "title": "should be rejected if running validation rules fails",
      "fullTitle": "Unit suite - The promise returned by the insert method should be rejected if running validation rules fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    ))\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {}).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
      "isRoot": false,
      "uuid": "06dc23bb-dcaf-420b-995d-f8e5b5bcc7a3",
      "parentUUID": "f70e7e3a-ab62-469c-94b0-0bc15ce4bc1f",
      "skipped": false
    },
    {
      "title": "should be rejected if inserting fails",
      "fullTitle": "Unit suite - The promise returned by the insert method should be rejected if inserting fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Insert error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {}).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Insert error\"</span>\n});",
      "isRoot": false,
      "uuid": "e56ac608-6012-4316-adc5-7417526eefd1",
      "parentUUID": "f70e7e3a-ab62-469c-94b0-0bc15ce4bc1f",
      "skipped": false
    },
    {
      "title": "should be resolved with null if nothing fails",
      "fullTitle": "Unit suite - The promise returned by the insert method should be resolved with null if nothing fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        insert: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.insert(collection, {})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "24cf2595-ff73-476d-b078-caf05fa7f6d0",
      "parentUUID": "f70e7e3a-ab62-469c-94b0-0bc15ce4bc1f",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The remove method should return a promise",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = methods.remove();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "e759f24f-292e-49bf-8831-fc71d2eaf516",
      "parentUUID": "99a98a85-701e-4630-9cdb-d13d27e439c3",
      "skipped": false
    },
    {
      "title": "should run validation remove rules",
      "fullTitle": "Unit suite - The remove method should run validation remove rules",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy(),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({}))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>)\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"remove\"</span>);\n    });",
      "isRoot": false,
      "uuid": "128ca2fa-d817-4c03-9c96-5c7c6f939c98",
      "parentUUID": "99a98a85-701e-4630-9cdb-d13d27e439c3",
      "skipped": false
    },
    {
      "title": "should call dbCollection.remove to remove the old document",
      "fullTitle": "Unit suite - The remove method should call dbCollection.remove to remove the old document",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({_id: <span class=\"hljs-string\">\"_id\"</span>})),\n        remove: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"_id\"</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.dbCollection.remove.calledWith({\n            _id: <span class=\"hljs-string\">\"_id\"</span>\n        }).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "7c3d3e5d-074b-402e-8ed8-67e290dc157f",
      "parentUUID": "99a98a85-701e-4630-9cdb-d13d27e439c3",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `documentId` is not a string",
      "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if the remote argument `documentId` is not a string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.remove().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>\n});",
      "isRoot": false,
      "uuid": "38f14f97-63ec-48c0-ad2c-507d4e2872ed",
      "parentUUID": "ad035076-320d-43f2-958b-96bd8e1711bd",
      "skipped": false
    },
    {
      "title": "should be rejected if no document with the given id is found",
      "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if no document with the given id is found",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">404</span>,\n    message: <span class=\"hljs-string\">\"Document not found\"</span>\n});",
      "isRoot": false,
      "uuid": "32817555-3e34-49f7-8f96-4051df339ead",
      "parentUUID": "ad035076-320d-43f2-958b-96bd8e1711bd",
      "skipped": false
    },
    {
      "title": "should be rejected if running validation rules fails",
      "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if running validation rules fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    )),\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
      "isRoot": false,
      "uuid": "410b3ee4-ec4a-4736-a581-0dc970f28d00",
      "parentUUID": "ad035076-320d-43f2-958b-96bd8e1711bd",
      "skipped": false
    },
    {
      "title": "should be rejected if removing fails",
      "fullTitle": "Unit suite - The promise returned by the remove method should be rejected if removing fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        remove: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Remove error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Remove error\"</span>\n});",
      "isRoot": false,
      "uuid": "c9b8e601-3363-4bb4-a8c8-5f665dd09c28",
      "parentUUID": "ad035076-320d-43f2-958b-96bd8e1711bd",
      "skipped": false
    },
    {
      "title": "should be resolved with null if nothing fails",
      "fullTitle": "Unit suite - The promise returned by the remove method should be resolved with null if nothing fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        remove: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.remove(collection, <span class=\"hljs-string\">\"\"</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "0d373237-df59-486e-856b-5f8b3f1c43fb",
      "parentUUID": "ad035076-320d-43f2-958b-96bd8e1711bd",
      "skipped": false
    },
    {
      "title": "should return a promise",
      "fullTitle": "Unit suite - The update method should return a promise",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> promise = methods.update();\npromise.catch(R.always(<span class=\"hljs-literal\">null</span>));\n<span class=\"hljs-keyword\">return</span> promise.should.be.a.Promise;",
      "isRoot": false,
      "uuid": "7e42216f-9d35-4e0b-a772-174efd2efeda",
      "parentUUID": "2a702334-0301-4e26-8159-bc757b467909",
      "skipped": false
    },
    {
      "title": "should run validation update rules",
      "fullTitle": "Unit suite - The update method should run validation update rules",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: sinon.spy(),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({}))\n    }\n};\n<span class=\"hljs-keyword\">var</span> patches = [{\n    op: <span class=\"hljs-string\">\"add\"</span>,\n    path: <span class=\"hljs-string\">\"/prop\"</span>,\n    value: <span class=\"hljs-string\">\"value\"</span>\n}];\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches)\n    .catch(R.always(<span class=\"hljs-literal\">null</span>))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.runValidationRules.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.runValidationRules.firstCall.args[<span class=\"hljs-number\">1</span>].should.equal(<span class=\"hljs-string\">\"update\"</span>);\n    });",
      "isRoot": false,
      "uuid": "96d69fa2-077e-4196-ab19-0b857b182656",
      "parentUUID": "2a702334-0301-4e26-8159-bc757b467909",
      "skipped": false
    },
    {
      "title": "should call dbCollection.update with the updated document",
      "fullTitle": "Unit suite - The update method should call dbCollection.update with the updated document",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always(BPromise.resolve({_id: <span class=\"hljs-string\">\"_id\"</span>})),\n        update: sinon.stub().returns(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">var</span> patches = jp.compare({}, {a: <span class=\"hljs-number\">1</span>});\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"_id\"</span>, patches)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        collection.dbCollection.update.called.should.equal(<span class=\"hljs-literal\">true</span>);\n        collection.dbCollection.update.firstCall.args[<span class=\"hljs-number\">0</span>].should.eql({\n            _id: <span class=\"hljs-string\">\"_id\"</span>\n        });\n        collection.dbCollection.update.firstCall.args[<span class=\"hljs-number\">1</span>].should.eql({\n            $set: {\n                a: <span class=\"hljs-number\">1</span>\n            }\n        });\n    });",
      "isRoot": false,
      "uuid": "1249ee8c-3126-47b9-9163-e798c4616b10",
      "parentUUID": "2a702334-0301-4e26-8159-bc757b467909",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `documentId` is not a string",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if the remote argument `documentId` is not a string",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.update().should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>\n});",
      "isRoot": false,
      "uuid": "6a910b7a-a07b-4e77-a706-37523cf0707e",
      "parentUUID": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
      "skipped": false
    },
    {
      "title": "should be rejected if the remote argument `patches` is not an array of patches",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if the remote argument `patches` is not an array of patches",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">return</span> methods.update(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"\"</span>).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">400</span>,\n    message: <span class=\"hljs-string\">\"Second argument `patches` must be an array of JSON patches\"</span>\n});",
      "isRoot": false,
      "uuid": "5c4cbe0a-4099-4db4-9306-ca577e9e6f26",
      "parentUUID": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
      "skipped": false
    },
    {
      "title": "should be rejected if no document with the given id is found",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if no document with the given id is found",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    dbCollection: {\n        findOne: R.always(<span class=\"hljs-literal\">null</span>)\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">404</span>,\n    message: <span class=\"hljs-string\">\"Document not found\"</span>\n});",
      "isRoot": false,
      "uuid": "3fe5d9f5-3ed0-4003-bfca-03c7cf0d5656",
      "parentUUID": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
      "skipped": false
    },
    {
      "title": "should be rejected if running validation rules fails",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if running validation rules fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.reject(\n        <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Error message\"</span>)\n    )),\n    dbCollection: {\n        findOne: R.always({})\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">499</span>,\n    message: <span class=\"hljs-string\">\"Error message\"</span>\n});",
      "isRoot": false,
      "uuid": "468cb4d3-80f0-4847-a0f3-8e564a749318",
      "parentUUID": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
      "skipped": false
    },
    {
      "title": "should be rejected if updating fails",
      "fullTitle": "Unit suite - The promise returned by the update method should be rejected if updating fails",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        update: R.always(BPromise.reject(\n            <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">599</span>, <span class=\"hljs-string\">\"Update error\"</span>)\n        ))\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches).should.be.rejectedWith(MW.Error, {\n    code: <span class=\"hljs-number\">599</span>,\n    message: <span class=\"hljs-string\">\"Update error\"</span>\n});",
      "isRoot": false,
      "uuid": "c8dbfad8-a1e6-4e9e-83a4-75c75477cadd",
      "parentUUID": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
      "skipped": false
    },
    {
      "title": "should be resolved with null if nothing fails",
      "fullTitle": "Unit suite - The promise returned by the update method should be resolved with null if nothing fails",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> collection = {\n    runValidationRules: R.always(BPromise.resolve()),\n    dbCollection: {\n        findOne: R.always({}),\n        update: R.always(BPromise.resolve())\n    }\n};\n<span class=\"hljs-keyword\">return</span> methods.update(collection, <span class=\"hljs-string\">\"\"</span>, patches)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n        (result === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "f98dabbf-718e-4e5a-af4c-df8ae119b7be",
      "parentUUID": "db63fd0e-7125-4cb6-ad23-c7571407cc53",
      "skipped": false
    },
    {
      "title": "400 on calling the api with the wrong arguments",
      "fullTitle": "Integration suite - Inserting a document 400 on calling the api with the wrong arguments",
      "timedOut": false,
      "duration": 73,
      "state": "passed",
      "speed": "medium",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [<span class=\"hljs-string\">\"myDocument\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"First argument `newDocument` must be an object\"</span>});",
      "isRoot": false,
      "uuid": "6758d622-d840-4cb0-b64a-fd5ffa0e3f9d",
      "parentUUID": "1847e8be-20d2-44ae-ba57-fddf52dd9e9c",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [throwing]",
      "fullTitle": "Integration suite - Inserting a document error if validation rules fail [throwing]",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Validation error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"Validation error\"</span>});",
      "isRoot": false,
      "uuid": "8bee7ae5-750f-4e21-8dad-e64b8d87188a",
      "parentUUID": "1847e8be-20d2-44ae-ba57-fddf52dd9e9c",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [returning an eventually rejected promise]",
      "fullTitle": "Integration suite - Inserting a document error if validation rules fail [returning an eventually rejected promise]",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> BPromise.reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">489</span>, <span class=\"hljs-string\">\"Another validation error\"</span>));\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">489</span>)\n    .expect({error: <span class=\"hljs-string\">\"Another validation error\"</span>});",
      "isRoot": false,
      "uuid": "bb4a31fb-2a23-4b7b-a236-d525088260a1",
      "parentUUID": "1847e8be-20d2-44ae-ba57-fddf52dd9e9c",
      "skipped": false
    },
    {
      "title": "inserting the document successful (after multiple validation rules pass)",
      "fullTitle": "Integration suite - Inserting a document inserting the document successful (after multiple validation rules pass)",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements\n    .addValidationRules({\n        insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n    })\n    .addValidationRules({\n        insert: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.resolve(<span class=\"hljs-literal\">null</span>);\n        }\n    });\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> cursor = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>).find({});\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(cursor.count, cursor)();\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(count)</span> </span>{\n        count.should.equal(<span class=\"hljs-number\">1</span>);\n    });",
      "isRoot": false,
      "uuid": "f5f3a8a1-d628-4592-a4a9-7fe60dd1e5ec",
      "parentUUID": "1847e8be-20d2-44ae-ba57-fddf52dd9e9c",
      "skipped": false
    },
    {
      "title": "automatic assignment of a string _id",
      "fullTitle": "Integration suite - Inserting a document automatic assignment of a string _id",
      "timedOut": false,
      "duration": 7,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/insert\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> collection = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>);\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(collection.findOne, collection)({});\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(element)</span> </span>{\n        element._id.should.be.a.String;\n        element._id.length.should.equal(<span class=\"hljs-number\">32</span>);\n    });",
      "isRoot": false,
      "uuid": "e26dcfa7-9fa7-4ef6-b36e-0e237941ba27",
      "parentUUID": "1847e8be-20d2-44ae-ba57-fddf52dd9e9c",
      "skipped": false
    },
    {
      "title": "400 on calling the api with the wrong arguments",
      "fullTitle": "Integration suite - Removing a document 400 on calling the api with the wrong arguments",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [{}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>});",
      "isRoot": false,
      "uuid": "cb2891f7-3210-4b11-85db-76cdafe27191",
      "parentUUID": "d86a06fb-948e-4bb9-b9f6-c9008eac6a7f",
      "skipped": false
    },
    {
      "title": "404 on document not found",
      "fullTitle": "Integration suite - Removing a document 404 on document not found",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"idNotInDatabase\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">404</span>)\n    .expect({error: <span class=\"hljs-string\">\"Document not found\"</span>});",
      "isRoot": false,
      "uuid": "9be5149d-72dc-4b1e-870c-d1b37a753972",
      "parentUUID": "d86a06fb-948e-4bb9-b9f6-c9008eac6a7f",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [throwing]",
      "fullTitle": "Integration suite - Removing a document error if validation rules fail [throwing]",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Validation error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"Validation error\"</span>});",
      "isRoot": false,
      "uuid": "f7d5f6db-93f4-40e7-bd78-434cbc796056",
      "parentUUID": "d86a06fb-948e-4bb9-b9f6-c9008eac6a7f",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [returning an eventually rejected promise]",
      "fullTitle": "Integration suite - Removing a document error if validation rules fail [returning an eventually rejected promise]",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> BPromise.reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">489</span>, <span class=\"hljs-string\">\"Another validation error\"</span>));\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">489</span>)\n    .expect({error: <span class=\"hljs-string\">\"Another validation error\"</span>});",
      "isRoot": false,
      "uuid": "5cf23b72-676c-4d4f-b6ee-e30b0ca04e43",
      "parentUUID": "d86a06fb-948e-4bb9-b9f6-c9008eac6a7f",
      "skipped": false
    },
    {
      "title": "removing the document successful (after multiple validation rules pass)",
      "fullTitle": "Integration suite - Removing a document removing the document successful (after multiple validation rules pass)",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements\n    .addValidationRules({\n        remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n    })\n    .addValidationRules({\n        remove: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.resolve(<span class=\"hljs-literal\">null</span>);\n        }\n    });\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/remove\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> collection = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>);\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(collection.findOne, collection)({\n            _id: <span class=\"hljs-string\">\"elementId\"</span>\n        });\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(element)</span> </span>{\n        (element === <span class=\"hljs-literal\">null</span>).should.equal(<span class=\"hljs-literal\">true</span>);\n    });",
      "isRoot": false,
      "uuid": "b8ebc942-c088-42ba-b89b-7b2b9cab4484",
      "parentUUID": "d86a06fb-948e-4bb9-b9f6-c9008eac6a7f",
      "skipped": false
    },
    {
      "title": "400 on calling the api with the wrong arguments [first argument]",
      "fullTitle": "Integration suite - Updating a document 400 on calling the api with the wrong arguments [first argument]",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [{}, <span class=\"hljs-string\">\"previous-arg-not-a-string\"</span>]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"First argument `documentId` must be a string\"</span>});",
      "isRoot": false,
      "uuid": "d37a2e79-5971-47ca-8ad2-18a8ca54ed01",
      "parentUUID": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
      "skipped": false
    },
    {
      "title": "400 on calling the api with the wrong arguments [second argument]",
      "fullTitle": "Integration suite - Updating a document 400 on calling the api with the wrong arguments [second argument]",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"second-arg-not-array-of-patches\"</span>, {}]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">400</span>)\n    .expect({error: <span class=\"hljs-string\">\"Second argument `patches` must be an array of JSON patches\"</span>});",
      "isRoot": false,
      "uuid": "c2dd15d0-6644-4d27-aeea-d5c53362674a",
      "parentUUID": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
      "skipped": false
    },
    {
      "title": "404 on document not found",
      "fullTitle": "Integration suite - Updating a document 404 on document not found",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"idNotInDatabase\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">404</span>)\n    .expect({error: <span class=\"hljs-string\">\"Document not found\"</span>});",
      "isRoot": false,
      "uuid": "717baf58-be68-4a09-901b-72bb2689a4b9",
      "parentUUID": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [throwing]",
      "fullTitle": "Integration suite - Updating a document error if validation rules fail [throwing]",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">499</span>, <span class=\"hljs-string\">\"Validation error\"</span>);\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">499</span>)\n    .expect({error: <span class=\"hljs-string\">\"Validation error\"</span>});",
      "isRoot": false,
      "uuid": "22b009d0-4fab-400c-8216-5c6835d61703",
      "parentUUID": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
      "skipped": false
    },
    {
      "title": "error if validation rules fail [returning an eventually rejected promise]",
      "fullTitle": "Integration suite - Updating a document error if validation rules fail [returning an eventually rejected promise]",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements.addValidationRules({\n    update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> BPromise.reject(<span class=\"hljs-keyword\">new</span> MW.Error(<span class=\"hljs-number\">489</span>, <span class=\"hljs-string\">\"Another validation error\"</span>));\n    }\n});\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">489</span>)\n    .expect({error: <span class=\"hljs-string\">\"Another validation error\"</span>});",
      "isRoot": false,
      "uuid": "93b898ba-20dd-49be-be1a-f31e2b20bbf2",
      "parentUUID": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
      "skipped": false
    },
    {
      "title": "updating the document successful (after multiple validation rules pass)",
      "fullTitle": "Integration suite - Updating a document updating the document successful (after multiple validation rules pass)",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> Elements = <span class=\"hljs-keyword\">new</span> Collection(mw, <span class=\"hljs-string\">\"elements\"</span>);\nElements\n    .addValidationRules({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n        }\n    })\n    .addValidationRules({\n        update: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(newDocument)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> BPromise.resolve(<span class=\"hljs-literal\">null</span>);\n        }\n    });\n<span class=\"hljs-keyword\">var</span> app = express().use(<span class=\"hljs-string\">\"/\"</span>, mw.getRouter());\n<span class=\"hljs-keyword\">return</span> request(app)\n    .post(<span class=\"hljs-string\">\"/\"</span>)\n    .send({method: <span class=\"hljs-string\">\"/elements/update\"</span>, params: [<span class=\"hljs-string\">\"elementId\"</span>, patches]})\n    .expect(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-regexp\">/json/</span>)\n    .expect(<span class=\"hljs-number\">200</span>)\n    .expect({result: <span class=\"hljs-literal\">null</span>})\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">var</span> collection = Elements.mw.db.collection(<span class=\"hljs-string\">\"elements\"</span>);\n        <span class=\"hljs-keyword\">return</span> BPromise.promisify(collection.findOne, collection)({\n            _id: <span class=\"hljs-string\">\"elementId\"</span>\n        });\n    })\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(element)</span> </span>{\n        element.should.eql({\n            _id: <span class=\"hljs-string\">\"elementId\"</span>,\n            prop: <span class=\"hljs-string\">\"value\"</span>\n        });\n    });",
      "isRoot": false,
      "uuid": "7170dd76-7ec0-4dc3-9b13-e9e9a972f76d",
      "parentUUID": "77554d7e-3e4e-477c-a427-41f367ae1e6e",
      "skipped": false
    }
  ],
  "allFailures": []
}